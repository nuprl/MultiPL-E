language: go_test.go
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        if x == int(y) {\n            if\
    \ x == int(z) {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjfo2qw15_test.go:14:17: invalid operation: x == int(y) (mismatched types
    float64 and int)

    /tmp/tmpjfo2qw15_test.go:15:21: invalid operation: x == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return z == x\n    }\n    return z\
    \ == x + y\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp48k_1ymt_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp48k_1ymt_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp48k_1ymt_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp48k_1ymt_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp48k_1ymt_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return (x+y+z == 0 || x+y+z == 1) && x >= 0 && y >= 0 &&\
    \ z >= 0\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpnn3qqskx_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpnn3qqskx_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpnn3qqskx_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpnn3qqskx_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpnn3qqskx_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return (x == y+z) || (x == y-z) || (x == y+z) || (x ==\
    \ y-z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprv1q5lr2_test.go:13:27: redundant or: x == y-z || x == y-z

    /tmp/tmprv1q5lr2_test.go:13:13: redundant or: x == y+z || x == y+z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        if x == int(x) {\n            if\
    \ y == int(y) {\n                if z == int(z) {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0ikgg0z_test.go:14:17: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpb0ikgg0z_test.go:15:21: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmpb0ikgg0z_test.go:16:25: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return (x == y || x == z || y == z) && x >= 0 && x <= 100\
    \ && y >= 0 && y <= 100 && z >= 0 && z <= 100\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6tllaebp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp6tllaebp_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6tllaebp_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6tllaebp_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6tllaebp_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return (x == y+z) || (x == y-z) || (x == y+z) || (x ==\
    \ y-z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprv1q5lr2_test.go:13:27: redundant or: x == y-z || x == y-z

    /tmp/tmprv1q5lr2_test.go:13:13: redundant or: x == y+z || x == y+z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return (x == y || x == z || y == z)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3wmlz46x_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3wmlz46x_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp3wmlz46x_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp3wmlz46x_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp3wmlz46x_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpt9bt6e0n_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt9bt6e0n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp_ga05x9e_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ga05x9e_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        return true\n    }\n    if x == z\
    \ {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9nemhyrv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9nemhyrv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y {\n        if x == z {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6cmyfapo_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6cmyfapo_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y+z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6aorgfk__test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp6aorgfk__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\nfunc any_int(x float64, y float64, z\
    \ float64) bool {\n    if x == y && y == z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpz8hetm5m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpz8hetm5m_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
