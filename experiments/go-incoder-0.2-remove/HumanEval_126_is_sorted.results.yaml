language: go_test.go
name: HumanEval_126_is_sorted
results:
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    k := 0\n    for i < j {\n        if lst[i] > lst[j]\
    \ {\n            return false\n        }\n        if lst[i] == lst[j] {\n    \
    \        i++\n            j--\n            k++\n        }\n    }\n    return k\
    \ == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpqzoub5ng_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found\
    \ := false\n    for i < j {\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] == lst[j] {\n            found = true\n\
    \        }\n        i++\n        j--\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    found := false\n\
    \    for i < len(lst) {\n        if lst[i] == lst[j] {\n            found = true\n\
    \        } else {\n            if found {\n                return false\n    \
    \        }\n            found = false\n        }\n        i++\n        j++\n \
    \   }\n    return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp1mm7o_tq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp1mm7o_tq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp1mm7o_tq_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp1mm7o_tq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp1mm7o_tq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp1mm7o_tq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    k := 0\n    for i < j {\n        if lst[i] > lst[j]\
    \ {\n            return false\n        }\n        if lst[i] == lst[j] {\n    \
    \        i++\n            j--\n            k++\n        }\n    }\n    return k\
    \ == 0\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpqzoub5ng_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            i++\n            j--\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    for i < len(lst)\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   i++\n        j++\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            i++\n            j--\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    k := 0\n   \
    \ for i < len(lst) {\n        if lst[i] > lst[j] {\n            return false\n\
    \        }\n        if lst[i] < lst[j] {\n            k = j\n        } else {\n\
    \            k = i\n        }\n        i++\n        j++\n    }\n    return k ==\
    \ i\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpvu5kq24__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpvu5kq24__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpvu5kq24__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpvu5kq24__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpvu5kq24__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpvu5kq24__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    k\
    \ := 0\n    for i < j {\n        if lst[i] > lst[j] {\n            return false\n\
    \        }\n        if lst[i] < lst[j] {\n            k = i\n        }\n     \
    \   i++\n        j--\n    }\n    return k == i\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp49k1bp3x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp49k1bp3x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp49k1bp3x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp49k1bp3x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp49k1bp3x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp49k1bp3x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp4wvp0lx3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp4wvp0lx3_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            i++\n        } else {\n           \
    \ j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpzyr0pk66_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpzyr0pk66_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpzyr0pk66_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpzyr0pk66_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpzyr0pk66_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        if found {\n            i++\n\
    \            j--\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        if found {\n            i++\n\
    \            j--\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpijetzrvf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpijetzrvf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            return true\n        }\n        i++\n\
    \        j--\n    }\n    return false\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpgro7j4ha_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpgro7j4ha_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    prev := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < prev {\n            return false\n        }\n    \
    \    prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp8sq7sm58_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp8sq7sm58_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp8sq7sm58_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    for i < len(lst)\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   i++\n        j++\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        i++\n        j--\n    }\n  \
    \  return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    k\
    \ := 0\n    for {\n        if i == j {\n            break\n        }\n       \
    \ if lst[i] > lst[j] {\n            return false\n        }\n        if lst[i]\
    \ < lst[j] {\n            i++\n            j--\n        } else {\n           \
    \ i++\n            j--\n            k++\n        }\n    }\n    return k == len(lst)\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmplf7fqbwh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmplf7fqbwh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmplf7fqbwh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmplf7fqbwh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmplf7fqbwh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmplf7fqbwh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            return true\n        }\n        i++\n\
    \        j--\n    }\n    return false\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpgro7j4ha_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpgro7j4ha_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpijetzrvf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpijetzrvf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < prev {\n        \
    \    return false\n        }\n        prev = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpbvpkfmkh_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpbvpkfmkh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    k\
    \ := 0\n    for {\n        if i == j {\n            break\n        }\n       \
    \ if lst[i] > lst[j] {\n            return false\n        }\n        if lst[i]\
    \ < lst[j] {\n            i++\n            j--\n        } else {\n           \
    \ i++\n            j--\n            k++\n        }\n    }\n    return k == len(lst)\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmplf7fqbwh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmplf7fqbwh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmplf7fqbwh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmplf7fqbwh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmplf7fqbwh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmplf7fqbwh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    for i < len(lst)\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   i++\n        j++\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp785kfh3c_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp785kfh3c_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpsxi93rol_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpsxi93rol_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpsxi93rol_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpsxi93rol_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpsxi93rol_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        i++\n        j--\n    }\n  \
    \  return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        if found {\n            i++\n\
    \            j--\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            i++\n            j--\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < last {\n            return false\n        }\n    \
    \    last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpbmsj9sm1_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpbmsj9sm1_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpbmsj9sm1_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < prev {\n        \
    \    return false\n        }\n        prev = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpbvpkfmkh_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpbvpkfmkh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpisdpc12c_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpisdpc12c_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        i++\n        j--\n    }\n  \
    \  return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n            break\n\
    \        }\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpnlvg32q5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnlvg32q5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpnlvg32q5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnlvg32q5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnlvg32q5_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        i++\n        j--\n    }\n  \
    \  return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmg0bssjf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmg0bssjf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp4wvp0lx3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp4wvp0lx3_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            i++\n            j--\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        i++\n        j--\n    }\n  \
    \  return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmplwnghm91_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmplwnghm91_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmplwnghm91_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmplwnghm91_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__7\
    \ (0.00s)\n        tmplwnghm91_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmplwnghm91_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmplwnghm91_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmplwnghm91_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmplwnghm91_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpisdpc12c_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpisdpc12c_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] == lst[j]\
    \ {\n            found = true\n        }\n        if found {\n            i++\n\
    \            j--\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found\
    \ := false\n    for i < j {\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] == lst[j] {\n            found = true\n\
    \        }\n        i++\n        j--\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    prev := lst[0]\n    for _, val := range\
    \ lst[1:] {\n        if val < prev {\n            return false\n        }\n  \
    \      prev = val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp3f24lx3n_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp3f24lx3n_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp3f24lx3n_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    for i < len(lst)-1 {\n        if lst[i] > lst[i+1] {\n            return\
    \ false\n        }\n        i++\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpqmx32j71_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpqmx32j71_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpqmx32j71_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n            return\
    \ false\n        }\n        if lst[i] > lst[j] {\n            return false\n \
    \       }\n        if lst[i] < lst[j] {\n            i++\n        } else {\n \
    \           j--\n        }\n    }\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n \
    \ candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpcl2dvikk_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpcl2dvikk_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpcl2dvikk_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpcl2dvikk_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpcl2dvikk_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   if i == j {\n            break\n        }\n        i++\n        j--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp2xnrqve0_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp2xnrqve0_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmp2xnrqve0_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp2xnrqve0_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp2xnrqve0_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp2xnrqve0_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpijetzrvf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpijetzrvf_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpijetzrvf_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found\
    \ := false\n    for i < j {\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] == lst[j] {\n            found = true\n\
    \        }\n        i++\n        j--\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp0jn78ita_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp0jn78ita_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < prev {\n        \
    \    return false\n        }\n        prev = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpbvpkfmkh_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpbvpkfmkh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < last {\n            return false\n        }\n    \
    \    last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpbmsj9sm1_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpbmsj9sm1_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpbmsj9sm1_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    for i < len(lst)\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   i++\n        j++\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpnh5u5k4o_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpnh5u5k4o_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpnh5u5k4o_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpnh5u5k4o_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpnh5u5k4o_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, val := range lst[1:] {\n        if val > last {\n    \
    \        return false\n        }\n        last = val\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4io3uj4o_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4io3uj4o_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4io3uj4o_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp4io3uj4o_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp4io3uj4o_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp4io3uj4o_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    k\
    \ := 0\n    for i < j {\n        if lst[i] > lst[j] {\n            return false\n\
    \        }\n        if lst[i] < lst[j] {\n            k = i\n        }\n     \
    \   i++\n        j--\n    }\n    return k == i\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp49k1bp3x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp49k1bp3x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp49k1bp3x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp49k1bp3x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp49k1bp3x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp49k1bp3x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < prev {\n        \
    \    return false\n        }\n        prev = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpbvpkfmkh_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpbvpkfmkh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4bemmu69_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4bemmu69_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found\
    \ := false\n    for i < j {\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            found = true\n \
    \       }\n        i++\n        j--\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpc_8gau0g_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpc_8gau0g_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpc_8gau0g_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpc_8gau0g_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpc_8gau0g_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    prev := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < prev {\n            return false\n        }\n    \
    \    prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp8sq7sm58_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp8sq7sm58_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp8sq7sm58_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < prev {\n        \
    \    return false\n        }\n        prev = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpbvpkfmkh_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpbvpkfmkh_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmppd72z1ww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmppd72z1ww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst {\n        if v != last {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp0b_k08_a_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp0b_k08_a_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp0b_k08_a_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp0b_k08_a_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp0b_k08_a_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp0b_k08_a_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := 0\n    for i < len(lst)\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   if lst[i] < lst[j] {\n            return true\n        }\n        i++\n  \
    \      j++\n    }\n    return false\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpn8xnn5gn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpn8xnn5gn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpn8xnn5gn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpn8xnn5gn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpn8xnn5gn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpn8xnn5gn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            return true\n        }\n        i++\n\
    \        j--\n    }\n    return false\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpgro7j4ha_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpgro7j4ha_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpgro7j4ha_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp4wvp0lx3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp4wvp0lx3_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n        \
    \    return false\n        }\n        if i == j {\n            break\n       \
    \ }\n        if lst[i] != lst[j] {\n            return false\n        }\n    \
    \    i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpihjqiurf_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpihjqiurf_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpihjqiurf_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpihjqiurf_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpihjqiurf_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075241
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ i < j {\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        if lst[i] < lst[j] {\n            i++\n            j--\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdyavp7yx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdyavp7yx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpuutmju87_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpuutmju87_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    k := 0\n    for i < j {\n        if lst[i] > lst[j]\
    \ {\n            return false\n        }\n        if lst[i] == lst[j] {\n    \
    \        i++\n            j--\n            k++\n        }\n    }\n    return k\
    \ == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpqzoub5ng_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    prev := lst[0]\n    for _, val := range\
    \ lst[1:] {\n        if val < prev {\n            return false\n        }\n  \
    \      prev = val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp3f24lx3n_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp3f24lx3n_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp3f24lx3n_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpqzoub5ng_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpqzoub5ng_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_gqwrg8r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_gqwrg8r_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n            break\n\
    \        }\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpnlvg32q5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnlvg32q5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpnlvg32q5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnlvg32q5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnlvg32q5_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpt5pnthig_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpt5pnthig_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpisdpc12c_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpisdpc12c_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmphd9gf7vq_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmphd9gf7vq_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n        \
    \    return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp7o2pqzim_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp7o2pqzim_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v > last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw_6wkrvs_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw_6wkrvs_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075239
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpisdpc12c_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpisdpc12c_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075239
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        if lst[i] < lst[j] {\n           \
    \ i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075248
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := 0\n    for i < len(lst) {\n        if lst[i] > lst[j] {\n      \
    \      return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp20p5a9n6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp20p5a9n6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
