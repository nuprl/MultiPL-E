language: go_test.go
name: HumanEval_140_fix_spaces
results:
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, replace all consecutive spaces with -\n    for i\
    \ := 0; i < len(result); i++ {\n        if result[i] == ' ' && result[i-1] ==\
    \ ' ' {\n            result[i] = '-'\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hrimd3b_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmp4hrimd3b_test.go:26:13: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            lastSpaceIndex = i\n        }\n    }\n    for\
    \ i := lastSpaceIndex + 1; i < len(text); i++ {\n        if text[i] == ' ' {\n\
    \            result = result + \"-\"\n        } else {\n            result = result\
    \ + text[i]\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7v2vwj6_test.go:23:22: invalid operation: result + text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    result := strings.Replace(text, \" \", \"_\", -1)\n    \n    if len(result)\
    \ > 2 {\n        result := strings.Replace(result, \"  \", \"-\", -1)\n    }\n\
    \    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposnx1wha_test.go:14:12: no new variables on left side of :=

    /tmp/tmposnx1wha_test.go:14:15: undefined: strings

    /tmp/tmposnx1wha_test.go:17:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if lastSpace < 2 {\n                result += strings.Repeat(\"_\"\
    , lastSpace)\n            } else {\n                result += \"-\"\n        \
    \    }\n            lastSpace = 0\n        } else {\n            lastSpace++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxen_g5b_test.go:17:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var i int\n    for i = 0; i < len(text); i++ {\n        if text[i] == ' '\
    \ {\n            result += text[i]\n        }\n        if text[i] == ' ' && text[i+1]\
    \ == ' ' {\n            result += text[i]\n        }\n        if text[i] == '\
    \ ' && text[i+1] != ' ' {\n            result += '-'\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjo0oaxdw_test.go:16:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmpjo0oaxdw_test.go:19:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmpjo0oaxdw_test.go:22:13: invalid operation: result += ''-'' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if lastSpace > 1 {\n                result += \"-\"\n           \
    \ }\n            lastSpace = 0\n        } else {\n            lastSpace++\n  \
    \      }\n        result += c\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2puc3xv_test.go:23:9: invalid operation: result += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    result += \"-\"\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvyxb1yef_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev rune\n    for _, r := range text {\n        if r == ' ' {\n    \
    \        result = result + \"_\"\n        } else {\n            result = result\
    \ + string(r)\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5dz9ubfv_test.go:13:9: prev declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for index, char := range text {\n        if char\
    \ == ' ' {\n            lastSpaceIndex = index\n        } else {\n           \
    \ if lastSpaceIndex != -1 {\n                result = result + string(text[lastSpaceIndex:index])\n\
    \            }\n            result = result + string(char)\n            lastSpaceIndex\
    \ = -1\n        }\n    }\n    if lastSpaceIndex != -1 {\n        result = result\
    \ + string(text[lastSpaceIndex:])\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpe6xn0iby_test.go:48: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpe6xn0iby_test.go:48:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow Dirty Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpe6xn0iby_test.go:48:\
    \ expected 'Exa-mple', got 'Exa mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpe6xn0iby_test.go:48: expected '-Exa_1_2_2_mple', got ' Exa\
    \ 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_es93x3g_test.go:98:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    result := strings.ReplaceAll(text,\
    \ \" \", \"_\")\n    \n    // If there are more than 2 consecutive spaces, replace\
    \ all \n    // consecutive spaces with -\n    if strings.Count(result, \"  \"\
    ) > 2 {\n        result = strings.ReplaceAll(result, \"  \", \"-\")\n    }\n \
    \   \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkxniae3_test.go:15:12: no new variables on left side of :=

    /tmp/tmplkxniae3_test.go:15:15: undefined: strings

    /tmp/tmplkxniae3_test.go:19:8: undefined: strings

    /tmp/tmplkxniae3_test.go:20:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1mvg2_e_test.go:13:13: undefined: strings

    /tmp/tmpz1mvg2_e_test.go:14:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, s := range text {\n        if s == ' ' {\n\
    \            if lastSpace > 1 {\n                result = result + \"-\"\n   \
    \         }\n            lastSpace = 0\n        } else {\n            lastSpace++\n\
    \        }\n        result = result + s\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpullhv1zb_test.go:23:18: invalid operation: result + s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_es93x3g_test.go:98:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // If there are more than\
    \ 2 consecutive spaces, replace all \n    // consecutive spaces with -\n    if\
    \ len(result) > 2 && result[len(result)-2:len(result)-1] == \" \" {\n        result\
    \ += \"-\"\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvy2px17u_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    result := text\n    \n    for i := 0; i < len(text); i++ {\n      \
    \  if text[i] == ' ' {\n            result += \"_\"\n        } else {\n      \
    \      result += text[i]\n        }\n    }\n    \n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6850iomb_test.go:14:12: no new variables on left side of :=

    /tmp/tmp6850iomb_test.go:20:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // If there are more than\
    \ 2 consecutive spaces, replace all consecutive spaces with -\n    result += \"\
    -\"\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3weeuxb_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, r := range text\
    \ {\n        if r == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += string(r)\n        }\n    }\n    \n    // Replace consecutive\
    \ spaces with -\n    for i := 0; i < len(text); i++ {\n        if text[i] == '\
    \ ' {\n            if i+1 < len(text) && text[i+1] == ' ' {\n                result\
    \ += \"-\"\n                i += 2\n            } else {\n                result\
    \ += \"-\"\n                i++\n            }\n        }\n    }\n    \n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpo_tk_nyd_test.go:56: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif_--'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpo_tk_nyd_test.go:56:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow__Dirty__Fellow---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpo_tk_nyd_test.go:56:\
    \ expected 'Exa-mple', got 'Exa___mple-'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpo_tk_nyd_test.go:56: expected '-Exa_1_2_2_mple', got '___Exa_1_2_2_mple-----'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // If there are more than\
    \ 2 consecutive spaces, replace all consecutive spaces with -\n    result += \"\
    _\"\n    for i := 0; i < len(text) - 2; i++ {\n        if text[i] == ' ' && text[i+1]\
    \ == ' ' {\n            result += \"-\"\n        } else {\n            result\
    \ += text[i]\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_o7t_jq_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    /tmp/tmpp_o7t_jq_test.go:29:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    result += \"_\"\n    \n    for i := 0; i < len(text); i++ {\n     \
    \   if text[i] == ' ' {\n            result += \"_\"\n        } else {\n     \
    \       result += text[i]\n        }\n    }\n    \n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb183efyg_test.go:20:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    result += \"-\"\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnl_8rr0_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, replace all \n    // consecutive spaces with -\n\
    \    result += \"-\"\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9m92eyge_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += strings.Replace(text,\
    \ \" \", \"-\", -1)\n    text += \"  \"\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplxkdih_8_test.go:13:13: undefined: strings

    /tmp/tmplxkdih_8_test.go:14:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    for _, s := range text {\n        if s == ' ' {\n            result\
    \ = result + \"-\"\n        } else {\n            result = result + s\n      \
    \  }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4f17rby_test.go:18:22: invalid operation: result + s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, char := range text {\n        if char == '\
    \ ' {\n            lastSpace = char\n        } else {\n            if lastSpace\
    \ > 0 {\n                result += string(lastSpace)\n                lastSpace\
    \ = 0\n            }\n            result += string(char)\n        }\n    }\n \
    \   if lastSpace > 0 {\n        result += string(lastSpace)\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamc3rdu4_test.go:16:25: cannot use char (variable of type rune) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var spaces int\n    for _, c := range text {\n        if c == ' ' {\n   \
    \         spaces++\n        } else {\n            if spaces > 1 {\n          \
    \      result = result + \"-\"\n            }\n            result = result + c\n\
    \            spaces = 0\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphxz_5q7i_test.go:21:22: invalid operation: result + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            if lastSpaceIndex == 0 {\n                result = result\
    \ + char\n            } else {\n                result = result + string([]byte{0x20})\n\
    \            }\n            lastSpaceIndex++\n        } else {\n            result\
    \ = result + string([]byte{char})\n            lastSpaceIndex = 0\n        }\n\
    \    }\n    if lastSpaceIndex > 1 {\n        result = result + string([]byte{0x20})\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0js6l3k_test.go:17:26: invalid operation: result + char (mismatched types
    string and rune)

    /tmp/tmpl0js6l3k_test.go:23:45: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            if lastSpaceIndex == 0 {\n                result = result\
    \ + char\n            } else {\n                result = result + string([]byte{0x20})\n\
    \            }\n            lastSpaceIndex = 0\n        } else {\n           \
    \ if lastSpaceIndex == 0 {\n                result = result + string([]byte{0x20})\
    \ + char\n            } else {\n                result = result + string([]byte{0x20})\
    \ + string([]byte{0x20})\n            }\n            lastSpaceIndex++\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp60p6p7js_test.go:17:26:\
    \ invalid operation: result + char (mismatched types string and rune)\n/tmp/tmp60p6p7js_test.go:24:26:\
    \ invalid operation: result + string([]byte{\u2026}) + char (mismatched types\
    \ string and rune)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    var lastSpaceLength int\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if lastSpaceIndex < 0 {\n    \
    \            lastSpaceIndex = -1\n                lastSpaceLength = 0\n      \
    \      }\n            lastSpaceIndex = lastSpaceIndex + 1\n            lastSpaceLength\
    \ = 1\n        } else {\n            lastSpaceIndex = -1\n            lastSpaceLength\
    \ = 0\n        }\n        if lastSpaceIndex >= 0 && lastSpaceIndex < len(text)\
    \ && lastSpaceLength > 2 {\n            result = result + \"-\"\n            lastSpaceIndex\
    \ = -1\n            lastSpaceLength = 0\n        }\n        result = result +\
    \ string(char)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmp6nq2yzlt_test.go:54: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmp6nq2yzlt_test.go:54:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmp6nq2yzlt_test.go:54:\
    \ expected 'Exa-mple', got 'Exa   mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmp6nq2yzlt_test.go:54: expected '-Exa_1_2_2_mple', got ' \
    \  Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            lastSpaceIndex = lastSpaceIndex + 1\n        } else {\n\
    \            if lastSpaceIndex > 0 {\n                result = result + \"-\"\n\
    \            }\n            result = result + string(char)\n            lastSpaceIndex\
    \ = 0\n        }\n    }\n    if lastSpaceIndex > 0 {\n        result = result\
    \ + \"-\"\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpvzmvoqwr_test.go:48: expected 'Mudasir_Hanif_', got 'Mudasir-Hanif-'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpvzmvoqwr_test.go:48:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow-Yellow-Dirty-Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpvzmvoqwr_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '-Exa-1-2-2-mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Example', got 'Example---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif ---'\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow---'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Exa-mple', got 'Exa   mple---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected '-Exa_1_2_2_mple', got '   Exa 1 2 2 mple---'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var spaces int\n    var lastspace bool\n    for _, char := range text {\n\
    \        if char == ' ' {\n            if lastspace {\n                result\
    \ += char\n            } else {\n                spaces = 0\n                lastspace\
    \ = true\n            }\n        } else {\n            if spaces > 1 {\n     \
    \           result += '-'\n            } else {\n                result += char\n\
    \            }\n            lastspace = false\n            spaces++\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplahwd8op_test.go:18:17: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmplahwd8op_test.go:25:17: invalid operation: result += ''-'' (mismatched
    types string and untyped rune)

    /tmp/tmplahwd8op_test.go:27:17: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastspace bool\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if lastspace {\n                result += \"-\"\n            } else\
    \ {\n                result += c\n            }\n            lastspace = false\n\
    \        } else {\n            result += c\n            lastspace = true\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wn6f542_test.go:19:17: invalid operation: result += c (mismatched types
    string and rune)

    /tmp/tmp5wn6f542_test.go:23:13: invalid operation: result += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    for i := 0; i < len(text); i++ {\n        if text[i] == '\
    \ ' && i+1 < len(text) {\n            if text[i+1] == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += text[i]\n        \
    \    }\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi1oe49z_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    /tmp/tmpdi1oe49z_test.go:29:17: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    result := strings.ReplaceAll(text,\
    \ \" \", \"_\")\n    \n    // If there are more than 2 consecutive spaces, replace\
    \ all consecutive spaces with -\n    result := strings.ReplaceAll(result, \" \
    \ \", \"-\")\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnf8wyd6e_test.go:15:12: no new variables on left side of :=

    /tmp/tmpnf8wyd6e_test.go:15:15: undefined: strings

    /tmp/tmpnf8wyd6e_test.go:18:12: no new variables on left side of :=

    /tmp/tmpnf8wyd6e_test.go:18:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    for i := 0; i < len(result); i++ {\n        if result[i]\
    \ == ' ' && i+1 < len(result) && result[i+1] == ' ' {\n            result[i] =\
    \ '-'\n            i++\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez0yp3sy_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpez0yp3sy_test.go:26:13: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Example', got 'Example---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif ---'\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow---'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Exa-mple', got 'Exa   mple---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected '-Exa_1_2_2_mple', got '   Exa 1 2 2 mple---'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if lastSpace > 1 {\n                result += \"-\"\n           \
    \ } else {\n                result += \" \"\n            }\n            lastSpace\
    \ = 0\n        } else {\n            result += c\n            lastSpace = 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpka9yn067_test.go:23:13: invalid operation: result += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if lastSpaceIndex != i {\n                result\
    \ += text[lastSpaceIndex:i]\n                lastSpaceIndex = i\n            }\n\
    \        } else {\n            lastSpaceIndex = -1\n        }\n    }\n    if lastSpaceIndex\
    \ != -1 {\n        result += text[lastSpaceIndex:]\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fix_spaces(...)\n\t/tmp/tmptabfgi2c_test.go:17\n\
    command-line-arguments_test.TestFix_Spaces(0x0?)\n\t/tmp/tmptabfgi2c_test.go:38\
    \ +0x87b\ntesting.tRunner(0xc0001a0340, 0x528fd0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, char := range text {\n        if char == '\
    \ ' {\n            lastSpace = char\n        } else {\n            if lastSpace\
    \ > 0 {\n                result += string(lastSpace)\n            }\n        \
    \    result += string(char)\n            lastSpace = 0\n        }\n    }\n   \
    \ if lastSpace > 0 {\n        result += string(lastSpace)\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zrpvjbk_test.go:16:25: cannot use char (variable of type rune) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Example', got 'Example---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif ---'\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow---'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Exa-mple', got 'Exa   mple---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected '-Exa_1_2_2_mple', got '   Exa 1 2 2 mple---'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, char := range text {\n        if char == '\
    \ ' {\n            if lastSpace > 1 {\n                result = result + \"-\"\
    \n            }\n            lastSpace = 0\n        } else {\n            lastSpace++\n\
    \        }\n        result = result + char\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe8299yq_test.go:23:18: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1mvg2_e_test.go:13:13: undefined: strings

    /tmp/tmpz1mvg2_e_test.go:14:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    result = strings.ReplaceAll(text,\
    \ \" \", \"_\")\n    \n    // If there are more than 2 consecutive spaces, replace\
    \ all consecutive spaces with -\n    result := strings.ReplaceAll(result, \" \
    \ \", \"-\")\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8021hdd2_test.go:15:14: undefined: strings

    /tmp/tmp8021hdd2_test.go:18:12: no new variables on left side of :=

    /tmp/tmp8021hdd2_test.go:18:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var i int\n    for i = 0; i < len(text); i++ {\n        if text[i] == ' '\
    \ {\n            result += \"_\"\n        } else {\n            result += text[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpurl2w7q1_test.go:18:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, replace all consecutive spaces with -\n    result\
    \ += \"-\"\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx52gmznk_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, replace all \n    // consecutive spaces with -\n\
    \    if strings.Count(result, \"  \") > 2 {\n        result = strings.Replace(result,\
    \ \"  \", \"-\", -1)\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h5jmpnl_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmp_h5jmpnl_test.go:25:8: undefined: strings

    /tmp/tmp_h5jmpnl_test.go:26:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += char\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, \n    // then replace all consecutive spaces with\
    \ -\n    \n    // Start with first char\n    result += \"_\"\n    \n    // Iterate\
    \ through remaining chars\n    for i := 1; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            result += \"-\"\n        } else {\n            result\
    \ += text[i]\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp86q3hi7u_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmp86q3hi7u_test.go:34:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    result := text\n    \n    result := strings.Replace(result, \"  \"\
    , \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n\
    \    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result\
    \ := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \"_\", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \"_\"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \"_\", -1)\n    \n    result :=\
    \ strings.\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo93outoz_test.go:83:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    spaces := 0\n    \n    for _, char := range text {\n        if char\
    \ == ' ' {\n            spaces++\n        } else {\n            if spaces > 1\
    \ {\n                result = result + \"-\"\n            }\n            result\
    \ = result + string(char)\n            spaces = 0\n        }\n    }\n    \n  \
    \  return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpzixofmcr_test.go:48: expected 'Mudasir_Hanif_', got 'MudasirHanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpzixofmcr_test.go:48:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'YellowYellow-Dirty-Fellow'\n \
    \   --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpzixofmcr_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '-Exa122mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, r := range text\
    \ {\n        if r == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += string(r)\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    for i := 0; i < len(result); i++ {\n        if result[i]\
    \ == ' ' {\n            if i+1 < len(result) && result[i+1] == ' ' {\n       \
    \         result[i] = '-'\n                i++\n            }\n        }\n   \
    \ }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf4sjjlwg_test.go:27:17: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"_\"\n  \
    \  text += strings.Repeat(\"-\", strings.Count(text, \" \"))\n    return text\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdr6zwcse_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += strings.Replace(text,\
    \ \" \", \"-\", -1)\n    text += \"  \"\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplxkdih_8_test.go:13:13: undefined: strings

    /tmp/tmplxkdih_8_test.go:14:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // If there are more than\
    \ 2 consecutive spaces, replace all consecutive spaces with -\n    for i := 0;\
    \ i < len(text); i++ {\n        if text[i] == ' ' && i+1 < len(text) && text[i+1]\
    \ == ' ' {\n            result += \"-\"\n        } else {\n            result\
    \ += text[i]\n        }\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9mutvmz5_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    /tmp/tmp9mutvmz5_test.go:28:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // If there are more than\
    \ 2 consecutive spaces, replace all \n    // consecutive spaces with -\n    \n\
    \    // Start with first character\n    result += \"-\"\n    \n    // Iterate\
    \ through remaining characters\n    for i := 1; i < len(text); i++ {\n       \
    \ if text[i] == ' ' {\n            result += \"-\"\n        } else {\n       \
    \     result += text[i]\n        }\n    }\n    \n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_if8jw1_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    /tmp/tmp3_if8jw1_test.go:34:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev rune\n    var i int\n    for i = 0; i < len(text); i++ {\n     \
    \   prev = text[i]\n        if prev == ' ' {\n            result += \"_\"\n  \
    \      } else {\n            result += string(prev)\n        }\n    }\n    for\
    \ i = 0; i < len(text); i++ {\n        prev = text[i]\n        if prev == ' '\
    \ && text[i+1] == ' ' {\n            result += \"-\"\n        } else {\n     \
    \       result += string(prev)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasj8jr0p_test.go:16:16: cannot use text[i] (value of type byte) as type
    rune in assignment

    /tmp/tmpasj8jr0p_test.go:24:16: cannot use text[i] (value of type byte) as type
    rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for index, char := range text {\n        if char\
    \ == ' ' {\n            if lastSpaceIndex == index {\n                result +=\
    \ char\n            } else {\n                result += string([]byte{char})\n\
    \            }\n            lastSpaceIndex = index\n        } else {\n       \
    \     result += string([]byte{char})\n        }\n    }\n    if lastSpaceIndex\
    \ < len(text) {\n        result += string([]byte{text[lastSpaceIndex+1]})\n  \
    \  }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiuquhitg_test.go:17:17: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpiuquhitg_test.go:19:41: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpiuquhitg_test.go:23:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Example', got 'Example---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif ---'\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow---'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxlzqjqu_test.go:35: expected 'Exa-mple', got 'Exa   mple---'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxlzqjqu_test.go:35:\
    \ expected '-Exa_1_2_2_mple', got '   Exa 1 2 2 mple---'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastspace int\n    for _, char := range text {\n        if char == '\
    \ ' {\n            if lastspace < 2 {\n                result += string(char)\n\
    \            } else {\n                result += \"-\"\n            }\n      \
    \      lastspace = 0\n        } else {\n            lastspace++\n        }\n \
    \   }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpxy6cc5r6_test.go:46: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpxy6cc5r6_test.go:46: expected\
    \ 'Mudasir_Hanif_', got '--'\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpxy6cc5r6_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ '-- - '\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpxy6cc5r6_test.go:46:\
    \ expected 'Exa-mple', got '-  '\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpxy6cc5r6_test.go:46: expected '-Exa_1_2_2_mple', got '   -   '\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text += \"-\"\n    text += \"-\"\n    text += \"-\"\n  \
    \  text += \"-\"\n    text \nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmapqy6up_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"_\"\n  \
    \  text += \"_\"\n    text += \"_\"\n    text += \"_\"\n    text += \"_\"\n  \
    \  text += \"_\"\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmp8cgtwn1y_test.go:38: expected 'Example', got 'Example______'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmp8cgtwn1y_test.go:38:\
    \ expected 'Mudasir_Hanif_', got 'Mudasir Hanif ______'\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp8cgtwn1y_test.go:38: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow Yellow  Dirty  Fellow______'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp8cgtwn1y_test.go:38: expected 'Exa-mple', got 'Exa   mple______'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp8cgtwn1y_test.go:38:\
    \ expected '-Exa_1_2_2_mple', got '   Exa 1 2 2 mple______'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var i int\n    for i = 0; i < len(text); i++ {\n        if text[i] == ' '\
    \ {\n            result += \"_\"\n        } else {\n            result += text[i]\n\
    \        }\n    }\n    for i = 0; i < len(text); i++ {\n        if text[i] ==\
    \ ' ' && text[i+1] == ' ' {\n            result += \"-\"\n        } else {\n \
    \           result += text[i]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9yg6087_test.go:18:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    /tmp/tmpe9yg6087_test.go:25:13: invalid operation: result += text[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            lastSpaceIndex = i\n        } else {\n       \
    \     if lastSpaceIndex != -1 {\n                result = result + string(text[lastSpaceIndex:i])\
    \ + \"-\"\n            }\n            result = result + string(text[i])\n    \
    \        lastSpaceIndex = -1\n        }\n    }\n    if lastSpaceIndex != -1 {\n\
    \        result = result + string(text[lastSpaceIndex:])\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpu5i247rw_test.go:48: expected 'Example', got '-Example'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpu5i247rw_test.go:48:\
    \ expected 'Mudasir_Hanif_', got '-Mudasir -Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpu5i247rw_test.go:48: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got '-Yellow -Yellow -Dirty -Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpu5i247rw_test.go:48: expected 'Exa-mple', got '-Exa -mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpu5i247rw_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got ' -Exa -1 -2 -2 -mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    spaces := 0\n    \n    for _, char := range text {\n        if char\
    \ == ' ' {\n            spaces++\n        } else {\n            spaces = 0\n \
    \       }\n        \n        if spaces > 2 {\n            result += \"-\"\n  \
    \          spaces = 0\n        } else {\n            result += char\n        }\n\
    \    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09p6l2ol_test.go:27:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    for i := 0; i < len(text); i++ {\n        if text[i] == '\
    \ ' {\n            if i+1 < len(text) && text[i+1] == ' ' {\n                result\
    \ += \"-\"\n                i += 2\n            } else {\n                result\
    \ += \"-\"\n            }\n        }\n    }\n    \n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71e5yv60_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if lastSpace < 2 {\n                result += strings.Repeat(\"_\"\
    , lastSpace)\n            } else {\n                result += \"-\"\n        \
    \    }\n            lastSpace = 0\n        } else {\n            lastSpace++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxen_g5b_test.go:17:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    result := text\n    \n    result := strings.Replace(result, \"  \"\
    , \"_\", -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n\
    \    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result\
    \ := strings.Replace(result, \"  \", \" \", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \" \", -1)\n    \n    result := strings.Replace(result, \"  \", \" \"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \" \", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \" \", -1)\n    \n    result := strings.Replace(result, \"  \", \" \"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \" \", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \" \", -1)\n    \n    result := strings.Replace(result, \"  \", \" \"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \" \", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \" \", -1)\n    \n    result := strings.Replace(result, \"  \", \" \"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \" \", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \" \", -1)\n    \n    result := strings.Replace(result, \"  \", \" \"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result :=\
    \ strings.Replace(result, \"  \", \" \", -1)\n    \n    result := strings.Replace(result,\
    \ \"  \", \" \", -1)\n    \n    result := strings.Replace(result, \"  \", \" \"\
    , -1)\n    \n    result := strings.Replace(result, \"  \", \" \", -1)\n    \n\
    \    result := strings.Replace(result, \"  \", \" \", -1)\n    \n    result :=\
    \ strings.\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp76gfqdqj_test.go:83:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    result := strings.ReplaceAll(text, \" \", \"_\")\n    \n    if len(result)\
    \ > 2 {\n        result = strings.ReplaceAll(result, \"  \", \"-\")\n    }\n \
    \   \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyg92p2lx_test.go:14:12: no new variables on left side of :=

    /tmp/tmpyg92p2lx_test.go:14:15: undefined: strings

    /tmp/tmpyg92p2lx_test.go:17:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range strings.Fields(text)\
    \ {\n        result = result + strings.Replace(s, \"  \", \"_\", -1) + \"_\"\n\
    \    }\n    \n    // Replace all consecutive spaces with -\n    for _, s := range\
    \ strings.Fields(result) {\n        result = result + strings.Replace(s, \" \"\
    , \"-\", -1)\n    }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fw474w9_test.go:15:23: undefined: strings

    /tmp/tmp7fw474w9_test.go:16:27: undefined: strings

    /tmp/tmp7fw474w9_test.go:20:23: undefined: strings

    /tmp/tmp7fw474w9_test.go:21:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            if lastSpaceIndex < len(text) {\n                result\
    \ += text[lastSpaceIndex+1:]\n            }\n            lastSpaceIndex = len(text)\n\
    \            result += \"_\"\n        } else {\n            lastSpaceIndex = 0\n\
    \        }\n    }\n    if lastSpaceIndex < len(text) {\n        result += text[lastSpaceIndex+1:]\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpugx2x30l_test.go:48: expected 'Example', got 'xample'\n\
    \    --- FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpugx2x30l_test.go:48:\
    \ expected 'Mudasir_Hanif_', got 'udasir Hanif _udasir Hanif _'\n    --- FAIL:\
    \ TestFix_Spaces/test_num__2 (0.00s)\n        tmpugx2x30l_test.go:48: expected\
    \ 'Yellow_Yellow__Dirty__Fellow', got 'ellow Yellow  Dirty  Fellow_ellow Yellow\
    \  Dirty  Fellow__ellow Yellow  Dirty  Fellow__ellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpugx2x30l_test.go:48:\
    \ expected 'Exa-mple', got 'xa   mple___xa   mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpugx2x30l_test.go:48: expected '-Exa_1_2_2_mple', got ' \
    \ Exa 1 2 2 mple___  Exa 1 2 2 mple_  Exa 1 2 2 mple_  Exa 1 2 2 mple_  Exa 1\
    \ 2 2 mple_  Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu2430zl_test.go:12:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:12:13: undefined: strings

    /tmp/tmpfu2430zl_test.go:13:10: no new variables on left side of :=

    /tmp/tmpfu2430zl_test.go:13:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    \n    // Replace all spaces with underscores\n    for _, s := range text\
    \ {\n        if s == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += s\n        }\n    }\n    \n    // Replace all consecutive\
    \ spaces with -\n    for i := 0; i < len(result); i++ {\n        if result[i]\
    \ == ' ' {\n            if i+1 < len(result) && result[i+1] == ' ' {\n       \
    \         result[i] = '-'\n                i++\n            }\n        }\n   \
    \ }\n    \n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnu8txbmf_test.go:19:13: invalid operation: result += s (mismatched types
    string and rune)

    /tmp/tmpnu8txbmf_test.go:27:17: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpace int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if lastSpace > 1 {\n                result += \"-\"\n           \
    \     lastSpace = 0\n            } else {\n                result += c\n     \
    \       }\n        } else {\n            result += c\n            lastSpace =\
    \ 1\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpinyb2tei_test.go:20:17: invalid operation: result += c (mismatched types
    string and rune)

    /tmp/tmpinyb2tei_test.go:23:13: invalid operation: result += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\
    \n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \" \
    \ \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text +=\
    \ \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text += \"  \"\n    text\
    \ += \"  \"\n    text += \"  \"\n    text \nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6w356g0_test.go:115:6: expected ''('', found TestFix_Spaces

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    text += \"  \"\n \
    \   text += strings.Replace(text, \" \", \"_\", -1)\n    text += \"  \"\n    text\
    \ += strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s06otn0_test.go:13:13: undefined: strings

    /tmp/tmp5s06otn0_test.go:15:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var lastSpaceIndex int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            lastSpaceIndex = lastSpaceIndex + 1\n        } else {\n\
    \            if lastSpaceIndex > 0 {\n                result = result + \"-\"\n\
    \                lastSpaceIndex = 0\n            }\n            result = result\
    \ + string(char)\n        }\n    }\n    if lastSpaceIndex > 0 {\n        result\
    \ = result + \"-\"\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpapk619fy_test.go:48: expected 'Mudasir_Hanif_', got 'Mudasir-Hanif-'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpapk619fy_test.go:48:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow-Yellow-Dirty-Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpapk619fy_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '-Exa-1-2-2-mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
