language: go_test.go
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmprvog20j3_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmprvog20j3_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmprvog20j3_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmprvog20j3_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int = 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpntud0ry9_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpntud0ry9_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpntud0ry9_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpntud0ry9_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpwd0rq9yo_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpwd0rq9yo_test.go:32\
    \ +0x692\ntesting.tRunner(0xc000199040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var result int\n    for i := 0;\
    \ i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpebw0f0yk_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpebw0f0yk_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var result int\n    for i := 0;\
    \ i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpebw0f0yk_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpebw0f0yk_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr7wixk6w_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr7wixk6w_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpijozdb11_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpijozdb11_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr7wixk6w_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr7wixk6w_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int = 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int = 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int = 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int = 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpzrlku2lr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpzrlku2lr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=-4)', got '%!s(int=444)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4246)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmptdk2w67g_test.go:42: expected '%!s(int=125)', got '%!s(int=160)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptdk2w67g_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4170)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var result int\n    for i := 0;\
    \ i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpebw0f0yk_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpebw0f0yk_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpgwsuzgzc_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpgwsuzgzc_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var result int\n    for i := 0;\
    \ i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpebw0f0yk_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpebw0f0yk_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpfpgrp5ts_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpfpgrp5ts_test.go:32\
    \ +0x692\ntesting.tRunner(0xc00011b040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpopx_6zmz_test.go:42: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpopx_6zmz_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum = 0\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpkr85nojr_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpkr85nojr_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp91egvtxq_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp91egvtxq_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var result int\n    for i := 0;\
    \ i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpebw0f0yk_test.go:39: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpebw0f0yk_test.go:39:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj_3i65ht_test.go:42: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj_3i65ht_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
