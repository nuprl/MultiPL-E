language: go_test.go
name: HumanEval_3_below_zero
results:
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Write your code here\n    \n    var balance int = 0\n    for\
    \ _, operation := range operations {\n        if operation == 1 {\n          \
    \  balance += operation\n        } else if operation == 2 {\n            balance\
    \ -= operation\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpqvr5b4wh_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpqvr5b4wh_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpkikqc5u6_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfr6uf_md_test.go:159:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfr6uf_md_test.go:159:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 10\n    \
    \    case 2:\n            balance -= 10\n        case 3:\n            balance\
    \ += 20\n        case 4:\n            balance -= 20\n        case 5:\n       \
    \     balance += 30\n        case 6:\n            balance -= 30\n        case\
    \ 7:\n            balance += 40\n        case 8:\n            balance -= 40\n\
    \        case 9:\n            balance += 50\n        case 10:\n            balance\
    \ -= 50\n        case 11:\n            balance += 60\n        case 12:\n     \
    \       balance -= 60\n        case 13:\n            balance += 70\n        case\
    \ 14:\n            balance -= 70\n        case 15:\n            balance += 80\n\
    \        case 16:\n            balance -= 80\n        case 17:\n            balance\
    \ += 90\n        case 18:\n            balance -= 90\n        case 19:\n     \
    \       balance += 100\n        case 20:\n            balance -= 100\n       \
    \ case 21:\n            balance += 200\n        case 22:\n            balance\
    \ -= 200\n        case 23:\n            balance += 300\n        case 24:\n   \
    \         balance -= 300\n        case 25:\n            balance += 400\n     \
    \   case 26:\n            balance -= 400\n        case 27:\n            balance\
    \ += 500\n        case 28:\n            balance -= 500\n        case 29:\n   \
    \         balance += 600\n        case 30:\n            balance -= 600\n     \
    \   case 31:\n            balance += 700\n        case 32:\n            balance\
    \ -= 700\n        case 33:\n            balance += 800\n        case 34:\n   \
    \         balance -= 800\n        case 35:\n            balance += 900\n     \
    \   case 36:\n            balance -= 900\n        case 37:\n            balance\
    \ += 1000\n        case 38:\n            balance -= 1000\n        case 39:\n \
    \           balance += 2000\n        case 40:\n            balance -= 2000\n \
    \       case 41:\n            balance += 3000\n        case 42:\n            balance\
    \ -= 3000\n        case 43:\n            balance += 4000\n        case 44:\n \
    \           balance -= 4000\n        case 45:\n            balance += 5000\n \
    \       case 46:\n            balance -= 5000\n        case 47:\n            balance\
    \ += 6000\n        case 48:\n            balance -= 6000\n        case 49:\n \
    \           balance += 7000\n        case 50:\n            balance -= 7000\n \
    \       case 51:\n            balance += 8000\n        case 52:\n            bal\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7qhi5rjc_test.go:119:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpcucpfl11_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += 1\n        } else {\n   \
    \         balance -= 1\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpjg8kw7oj_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpjg8kw7oj_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 200\n        case 4:\n            balance -= 200\n        case 5:\n     \
    \       balance += 300\n        case 6:\n            balance -= 300\n        case\
    \ 7:\n            balance += 400\n        case 8:\n            balance -= 400\n\
    \        case 9:\n            balance += 500\n        case 10:\n            balance\
    \ -= 500\n        case 11:\n            balance += 600\n        case 12:\n   \
    \         balance -= 600\n        case 13:\n            balance += 700\n     \
    \   case 14:\n            balance -= 700\n        case 15:\n            balance\
    \ += 800\n        case 16:\n            balance -= 800\n        case 17:\n   \
    \         balance += 900\n        case 18:\n            balance -= 900\n     \
    \   case 19:\n            balance += 1000\n        case 20:\n            balance\
    \ -= 1000\n        case 21:\n            balance += 1100\n        case 22:\n \
    \           balance -= 1100\n        case 23:\n            balance += 1200\n \
    \       case 24:\n            balance -= 1200\n        case 25:\n            balance\
    \ += 1300\n        case 26:\n            balance -= 1300\n        case 27:\n \
    \           balance += 1400\n        case 28:\n            balance -= 1400\n \
    \       case 29:\n            balance += 1500\n        case 30:\n            balance\
    \ -= 1500\n        case 31:\n            balance += 1600\n        case 32:\n \
    \           balance -= 1600\n        case 33:\n            balance += 1700\n \
    \       case 34:\n            balance -= 1700\n        case 35:\n            balance\
    \ += 1800\n        case 36:\n            balance -= 1800\n        case 37:\n \
    \           balance += 1900\n        case 38:\n            balance -= 1900\n \
    \       case 39:\n            balance += 2000\n        case 40:\n            balance\
    \ -= 2000\n        case 41:\n            balance += 2100\n        case 42:\n \
    \           balance -= 2100\n        case 43:\n            balance += 2200\n \
    \       case 44:\n            balance -= 2200\n        case 45:\n            balance\
    \ += 2300\n        case 46:\n            balance -= 2300\n        case 47:\n \
    \           balance += 2400\n        case 48:\n            balance -= 2400\n \
    \       case 49:\n            balance += 2500\n        case 50:\n            balance\
    \ -= 2500\n        case 51:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu2763ylv_test.go:117:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, op := range operations {\n        sum += op\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp_vq3iy20_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 10\n        case 6:\n            balance -= 10\n        case\
    \ 7:\n            balance += 5\n        case 8:\n            balance -= 5\n  \
    \      case 9:\n            balance += 2\n        case 10:\n            balance\
    \ -= 2\n        case 11:\n            balance += 1\n        case 12:\n       \
    \     balance -= 1\n        case 13:\n            balance += 5\n        case 14:\n\
    \            balance -= 5\n        case 15:\n            balance += 10\n     \
    \   case 16:\n            balance -= 10\n        case 17:\n            balance\
    \ += 5\n        case 18:\n            balance -= 5\n        case 19:\n       \
    \     balance += 2\n        case 20:\n            balance -= 2\n        case 21:\n\
    \            balance += 1\n        case 22:\n            balance -= 1\n      \
    \  case 23:\n            balance += 5\n        case 24:\n            balance -=\
    \ 5\n        case 25:\n            balance += 10\n        case 26:\n         \
    \   balance -= 10\n        case 27:\n            balance += 5\n        case 28:\n\
    \            balance -= 5\n        case 29:\n            balance += 2\n      \
    \  case 30:\n            balance -= 2\n        case 31:\n            balance +=\
    \ 1\n        case 32:\n            balance -= 1\n        case 33:\n          \
    \  balance += 5\n        case 34:\n            balance -= 5\n        case 35:\n\
    \            balance += 10\n        case 36:\n            balance -= 10\n    \
    \    case 37:\n            balance += 5\n        case 38:\n            balance\
    \ -= 5\n        case 39:\n            balance += 2\n        case 40:\n       \
    \     balance -= 2\n        case 41:\n            balance += 1\n        case 42:\n\
    \            balance -= 1\n        case 43:\n            balance += 5\n      \
    \  case 44:\n            balance -= 5\n        case 45:\n            balance +=\
    \ 10\n        case 46:\n            balance -= 10\n        case 47:\n        \
    \    balance += 5\n        case 48:\n            balance -= 5\n        case 49:\n\
    \            balance += 2\n        case 50:\n            balance -= 2\n      \
    \  case 51:\n            balance += 1\n        case 52:\n            balance -=\
    \ 1\n        case 53:\n            balance += 5\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpipzbtuat_test.go:122:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case \nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp46blqq2__test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0smmc058_test.go:267:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Write your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp02to2md_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp02to2md_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp02to2md_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 10\n        case 6:\n            balance -= 10\n        case\
    \ 7:\n            balance += 5\n        case 8:\n            balance -= 5\n  \
    \      case 9:\n            balance += 2\n        case 10:\n            balance\
    \ -= 2\n        case 11:\n            balance += 1\n        case 12:\n       \
    \     balance -= 1\n        case 13:\n            balance += 3\n        case 14:\n\
    \            balance -= 3\n        case 15:\n            balance += 5\n      \
    \  case 16:\n            balance -= 5\n        case 17:\n            balance +=\
    \ 10\n        case 18:\n            balance -= 10\n        case 19:\n        \
    \    balance += 20\n        case 20:\n            balance -= 20\n        case\
    \ 21:\n            balance += 50\n        case 22:\n            balance -= 50\n\
    \        case 23:\n            balance += 100\n        case 24:\n            balance\
    \ -= 100\n        case 25:\n            balance += 500\n        case 26:\n   \
    \         balance -= 500\n        case 27:\n            balance += 1000\n    \
    \    case 28:\n            balance -= 1000\n        case 29:\n            balance\
    \ += 5000\n        case 30:\n            balance -= 5000\n        case 31:\n \
    \           balance += 10000\n        case 32:\n            balance -= 10000\n\
    \        case 33:\n            balance += 100000\n        case 34:\n         \
    \   balance -= 100000\n        case 35:\n            balance += 1000000\n    \
    \    case 36:\n            balance -= 1000000\n        case 37:\n            balance\
    \ += 10000000\n        case 38:\n            balance -= 10000000\n        case\
    \ 39:\n            balance += 100000000\n        case 40:\n            balance\
    \ -= 100000000\n        case 41:\n            balance += 1000000000\n        case\
    \ 42:\n            balance -= 1000000000\n        case 43:\n            balance\
    \ += 10000000000\n        case 44:\n            balance -= 10000000000\n     \
    \   case 45:\n            balance += 100000000000\n        case 46:\n        \
    \    balance -= 100000000000\n        case 47:\n            balance += 1000000000000\n\
    \        case 48:\n            balance -= 1000000000000\n        case 49:\n  \
    \          balance += 10000000000000\n        case 50:\n            balance -=\
    \ 10000000000000\n        case 5\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnzdoqlwx_test.go:115:15: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 10\n    \
    \    case 2:\n            balance -= 10\n        case 3:\n            balance\
    \ += 20\n        case 4:\n            balance -= 20\n        case 5:\n       \
    \     balance += 30\n        case 6:\n            balance -= 30\n        case\
    \ 7:\n            balance += 40\n        case 8:\n            balance -= 40\n\
    \        case 9:\n            balance += 50\n        case 10:\n            balance\
    \ -= 50\n        case 11:\n            balance += 60\n        case 12:\n     \
    \       balance -= 60\n        case 13:\n            balance += 70\n        case\
    \ 14:\n            balance -= 70\n        case 15:\n            balance += 80\n\
    \        case 16:\n            balance -= 80\n        case 17:\n            balance\
    \ += 90\n        case 18:\n            balance -= 90\n        case 19:\n     \
    \       balance += 100\n        case 20:\n            balance -= 100\n       \
    \ case 21:\n            balance += 110\n        case 22:\n            balance\
    \ -= 110\n        case 23:\n            balance += 120\n        case 24:\n   \
    \         balance -= 120\n        case 25:\n            balance += 130\n     \
    \   case 26:\n            balance -= 130\n        case 27:\n            balance\
    \ += 140\n        case 28:\n            balance -= 140\n        case 29:\n   \
    \         balance += 150\n        case 30:\n            balance -= 150\n     \
    \   case 31:\n            balance += 160\n        case 32:\n            balance\
    \ -= 160\n        case 33:\n            balance += 170\n        case 34:\n   \
    \         balance -= 170\n        case 35:\n            balance += 180\n     \
    \   case 36:\n            balance -= 180\n        case 37:\n            balance\
    \ += 190\n        case 38:\n            balance -= 190\n        case 39:\n   \
    \         balance += 200\n        case 40:\n            balance -= 200\n     \
    \   case 41:\n            balance += 210\n        case 42:\n            balance\
    \ -= 210\n        case 43:\n            balance += 220\n        case 44:\n   \
    \         balance -= 220\n        case 45:\n            balance += 230\n     \
    \   case 46:\n            balance -= 230\n        case 47:\n            balance\
    \ += 240\n        case 48:\n            balance -= 240\n        case 49:\n   \
    \         balance += 250\n        case 50:\n            balance -= 250\n     \
    \   case 51:\n            balance += 260\n        case 52:\n            balance\
    \ -= 260\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34bxtg3c_test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpkikqc5u6_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    for i := 0; i < len(operations); i++\
    \ {\n        if operations[i] > 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmph3pfjh6j_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmph3pfjh6j_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmph3pfjh6j_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmph3pfjh6j_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0.01\n        case 20:\n            balance -= 0.01\n \
    \       case 21:\n            balance += 0.001\n        case 22:\n           \
    \ balance -= 0.001\n        case 23:\n            balance += 0.0001\n        case\
    \ 24:\n            balance -= 0.0001\n        case 25:\n            balance +=\
    \ 0.00001\n        case 26:\n            balance -= 0.00001\n        case 27:\n\
    \            balance += 0.000001\n        case 28:\n            balance -= 0.000001\n\
    \        case 29:\n            balance += 0.0000001\n        case 30:\n      \
    \      balance -= 0.0000001\n        case 31:\n            balance += 0.00000001\n\
    \        case 32:\n            balance -= 0.00000001\n        case 33:\n     \
    \       balance += 10000000000\n        case 34:\n            balance -= 10000000000\n\
    \        case 35:\n            balance += 100000000000\n        case 36:\n   \
    \         balance -= 100000000000\n        case 37:\n            balance += 1000000000000\n\
    \        case 38:\n            balance -= 1000000000000\n        case 39:\n  \
    \          balance += 10000000000000\n        case 40:\n            balance -=\
    \ 10000000000000\n        case 41:\n            balance += 100000000000000\n \
    \       case 42:\n            balance -= 100000000000000\n        case 43:\n \
    \           balance += 1000000000000000\n        case 44:\n            balance\
    \ -= 1000000000000000\n        case 45:\n            balance += 10000000000000000\n\
    \        case 46:\n            balance -= 10000000000000000\n        case 47:\n\
    \            balance += 100000000000000000\n        case 48:\n            b\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp43bbhkvt_test.go:111:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt4t0tmrd_test.go:267:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ognz8nd_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0\n        case 20:\n            balance -= 0\n       \
    \ case 21:\n            balance += 0.5\n        case 22:\n            balance\
    \ -= 0.5\n        case 23:\n            balance += 0.25\n        case 24:\n  \
    \          balance -= 0.25\n        case 25:\n            balance += 0\n     \
    \   case 26:\n            balance -= 0\n        case 27:\n            balance\
    \ += 0.5\n        case 28:\n            balance -= 0.5\n        case 29:\n   \
    \         balance += 0.25\n        case 30:\n            balance -= 0.25\n   \
    \     case 31:\n            balance += 0\n        case 32:\n            balance\
    \ -= 0\n        case 33:\n            balance += 0.5\n        case 34:\n     \
    \       balance -= 0.5\n        case 35:\n            balance += 0.25\n      \
    \  case 36:\n            balance -= 0.25\n        case 37:\n            balance\
    \ += 0\n        case 38:\n            balance -= 0\n        case 39:\n       \
    \     balance += 0.5\n        case 40:\n            balance -= 0.5\n        case\
    \ 41:\n            balance += 0.25\n        case 42:\n            balance -= 0.25\n\
    \        case 43:\n            balance += 0\n        case 44:\n            balance\
    \ -= 0\n        case 45:\n            balance += 0.5\n        case 46:\n     \
    \       balance -= 0.5\n        case 47:\n            balance += 0.25\n      \
    \  case 48:\n            balance -= 0.25\n        case 49:\n            balance\
    \ += 0\n        case 50:\n            balance -= 0\n        case 51:\n       \
    \     balance += 0.5\n        case 52:\n            balance -= 0.5\n        case\
    \ 53\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9che6zf2_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8bfp_2o_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, op := range operations {\n        sum += op\n\
    \    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpspc61kd8_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n        if balance < 0 {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpy08j2wsh_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpy08j2wsh_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0.01\n        case 20:\n            balance -= 0.01\n \
    \       case 21:\n            balance += 0.001\n        case 22:\n           \
    \ balance -= 0.001\n        case 23:\n            balance += 0.0001\n        case\
    \ 24:\n            balance -= 0.0001\n        case 25:\n            balance +=\
    \ 0.00001\n        case 26:\n            balance -= 0.00001\n        case 27:\n\
    \            balance += 0.000001\n        case 28:\n            balance -= 0.000001\n\
    \        case 29:\n            balance += 0.0000001\n        case 30:\n      \
    \      balance -= 0.0000001\n        case 31:\n            balance += 0.00000001\n\
    \        case 32:\n            balance -= 0.00000001\n        case 33:\n     \
    \       balance += 10000000000\n        case 34:\n            balance -= 10000000000\n\
    \        case 35:\n            balance += 100000000000\n        case 36:\n   \
    \         balance -= 100000000000\n        case 37:\n            balance += 1000000000000\n\
    \        case 38:\n            balance -= 1000000000000\n        case 39:\n  \
    \          balance += 10000000000000\n        case 40:\n            balance -=\
    \ 10000000000000\n        case 41:\n            balance += 100000000000000\n \
    \       case 42:\n            balance -= 100000000000000\n        case 43:\n \
    \           balance += 1000000000000000\n        case 44:\n            balance\
    \ -= 1000000000000000\n        case 45:\n            balance += 10000000000000000\n\
    \        case 46:\n            balance -= 10000000000000000\n        case 47:\n\
    \            balance += 100000000000000000\n        case 48:\n            b\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp43bbhkvt_test.go:111:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 20\n        case 22:\n            balance -= 20\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 20\n        case 38:\n            balance\
    \ -= 20\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbs0wvv6a_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0.01\n        case 20:\n            balance -= 0.01\n \
    \       case 21:\n            balance += 0.001\n        case 22:\n           \
    \ balance -= 0.001\n        case 23:\n            balance += 0.0001\n        case\
    \ 24:\n            balance -= 0.0001\n        case 25:\n            balance +=\
    \ 0.00001\n        case 26:\n            balance -= 0.00001\n        case 27:\n\
    \            balance += 0.000001\n        case 28:\n            balance -= 0.000001\n\
    \        case 29:\n            balance += 0.0000001\n        case 30:\n      \
    \      balance -= 0.0000001\n        case 31:\n            balance += 0.00000001\n\
    \        case 32:\n            balance -= 0.00000001\n        case 33:\n     \
    \       balance += 10000000000\n        case 34:\n            balance -= 10000000000\n\
    \        case 35:\n            balance += 100000000000\n        case 36:\n   \
    \         balance -= 100000000000\n        case 37:\n            balance += 1000000000000\n\
    \        case 38:\n            balance -= 1000000000000\n        case 39:\n  \
    \          balance += 10000000000000\n        case 40:\n            balance -=\
    \ 10000000000000\n        case 41:\n            balance += 100000000000000\n \
    \       case 42:\n            balance -= 100000000000000\n        case 43:\n \
    \           balance += 1000000000000000\n        case 44:\n            balance\
    \ -= 1000000000000000\n        case 45:\n            balance += 10000000000000000\n\
    \        case 46:\n            balance -= 10000000000000000\n        case 47:\n\
    \            balance += 100000000000000000\n        case 48:\n            b\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp43bbhkvt_test.go:111:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += 1\n        } else if operation\
    \ == 2 {\n            balance -= 1\n        }\n    }\n    return balance < 0\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplejc8hjg_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmplejc8hjg_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmplejc8hjg_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0smmc058_test.go:267:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0.01\n        case 20:\n            balance -= 0.01\n \
    \       case 21:\n            balance += 0.001\n        case 22:\n           \
    \ balance -= 0.001\n        case 23:\n            balance += 0.0001\n        case\
    \ 24:\n            balance -= 0.0001\n        case 25:\n            balance +=\
    \ 0.00001\n        case 26:\n            balance -= 0.00001\n        case 27:\n\
    \            balance += 0.000001\n        case 28:\n            balance -= 0.000001\n\
    \        case 29:\n            balance += 0.0000001\n        case 30:\n      \
    \      balance -= 0.0000001\n        case 31:\n            balance += 0.00000001\n\
    \        case 32:\n            balance -= 0.00000001\n        case 33:\n     \
    \       balance += 10000000000\n        case 34:\n            balance -= 10000000000\n\
    \        case 35:\n            balance += 100000000000\n        case 36:\n   \
    \         balance -= 100000000000\n        case 37:\n            balance += 1000000000000\n\
    \        case 38:\n            balance -= 1000000000000\n        case 39:\n  \
    \          balance += 10000000000000\n        case 40:\n            balance -=\
    \ 10000000000000\n        case 41:\n            balance += 100000000000000\n \
    \       case 42:\n            balance -= 100000000000000\n        case 43:\n \
    \           balance += 1000000000000000\n        case 44:\n            balance\
    \ -= 1000000000000000\n        case 45:\n            balance += 10000000000000000\n\
    \        case 46:\n            balance -= 10000000000000000\n        case 47:\n\
    \            balance += 100000000000000000\n        case 48:\n            b\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp43bbhkvt_test.go:111:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    \n    // Your code here\n    \n    \n    return true\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmptwrslbps_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmptwrslbps_test.go:37:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmptwrslbps_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance = balance +\
    \ 1\n        case -1:\n            balance = balance - 1\n        }\n    }\n \
    \   return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp2rjpcfb9_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmp2rjpcfb9_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmp2rjpcfb9_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 0\n        case 18:\n            balance -= 0\n        case 19:\n          \
    \  balance += 0\n        case 20:\n            balance -= 0\n        case 21:\n\
    \            balance += 0\n        case 22:\n            balance -= 0\n      \
    \  case 23:\n            balance += 0\n        case 24:\n            balance -=\
    \ 0\n        case 25:\n            balance += 0\n        case 26:\n          \
    \  balance -= 0\n        case 27:\n            balance += 0\n        case 28:\n\
    \            balance -= 0\n        case 29:\n            balance += 0\n      \
    \  case 30:\n            balance -= 0\n        case 31:\n            balance +=\
    \ 0\n        case 32:\n            balance -= 0\n        case 33:\n          \
    \  balance += 0\n        case 34:\n            balance -= 0\n        case 35:\n\
    \            balance += 0\n        case 36:\n            balance -= 0\n      \
    \  case 37:\n            balance += 0\n        case 38:\n            balance -=\
    \ 0\n        case 39:\n            balance += 0\n        case 40:\n          \
    \  balance -= 0\n        case 41:\n            balance += 0\n        case 42:\n\
    \            balance -= 0\n        case 43:\n            balance += 0\n      \
    \  case 44:\n            balance -= 0\n        case 45:\n            balance +=\
    \ 0\n        case 46:\n            balance -= 0\n        case 47:\n          \
    \  balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 0\n        case 50:\n            balance -= 0\n      \
    \  case 51:\n            balance += 0\n        case 52:\n            balance -=\
    \ 0\n        case 53\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9r_hk6xw_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 5\n      \
    \  case 16:\n            balance -= 5\n        case 17:\n            balance +=\
    \ 2\n        case 18:\n            balance -= 2\n        case 19:\n          \
    \  balance += 1\n        case 20:\n            balance -= 1\n        case 21:\n\
    \            balance += 5\n        case 22:\n            balance -= 5\n      \
    \  case 23:\n            balance += 2\n        case 24:\n            balance -=\
    \ 2\n        case 25:\n            balance += 1\n        case 26:\n          \
    \  balance -= 1\n        case 27:\n            balance += 5\n        case 28:\n\
    \            balance -= 5\n        case 29:\n            balance += 2\n      \
    \  case 30:\n            balance -= 2\n        case 31:\n            balance +=\
    \ 1\n        case 32:\n            balance -= 1\n        case 33:\n          \
    \  balance += 5\n        case 34:\n            balance -= 5\n        case 35:\n\
    \            balance += 2\n        case 36:\n            balance -= 2\n      \
    \  case 37:\n            balance += 1\n        case 38:\n            balance -=\
    \ 1\n        case 39:\n            balance += 5\n        case 40:\n          \
    \  balance -= 5\n        case 41:\n            balance += 2\n        case 42:\n\
    \            balance -= 2\n        case 43:\n            balance += 1\n      \
    \  case 44:\n            balance -= 1\n        case 45:\n            balance +=\
    \ 5\n        case 46:\n            balance -= 5\n        case 47:\n          \
    \  balance += 2\n        case 48:\n            balance -= 2\n        case 49:\n\
    \            balance += 1\n        case 50:\n            balance -= 1\n      \
    \  case 51:\n            balance += 5\n        case 52:\n            balance -=\
    \ 5\n        case 53:\n            balance += 2\n        case 54:\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8ugpo9bd_test.go:123:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n            return false\n        }\n    }\n    return balance\
    \ < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp5r72pmrr_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmp5r72pmrr_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmp5r72pmrr_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp4qn27mv1_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        if op ==\
    \ 1 {\n            acc += 100\n        } else {\n            acc -= 100\n    \
    \    }\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmp9m2fm445_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmp9m2fm445_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += -1\n     \
    \   case 16:\n            balance -= -1\n        case 17:\n            balance\
    \ += 0\n        case 18:\n            balance -= 0\n        case 19:\n       \
    \     balance += 0\n        case 20:\n            balance -= 0\n        case 21:\n\
    \            balance += 0\n        case 22:\n            balance -= 0\n      \
    \  case 23:\n            balance += 0\n        case 24:\n            balance -=\
    \ 0\n        case 25:\n            balance += 0\n        case 26:\n          \
    \  balance -= 0\n        case 27:\n            balance += 0\n        case 28:\n\
    \            balance -= 0\n        case 29:\n            balance += 0\n      \
    \  case 30:\n            balance -= 0\n        case 31:\n            balance +=\
    \ 0\n        case 32:\n            balance -= 0\n        case 33:\n          \
    \  balance += 0\n        case 34:\n            balance -= 0\n        case 35:\n\
    \            balance += 0\n        case 36:\n            balance -= 0\n      \
    \  case 37:\n            balance += 0\n        case 38:\n            balance -=\
    \ 0\n        case 39:\n            balance += 0\n        case 40:\n          \
    \  balance -= 0\n        case 41:\n            balance += 0\n        case 42:\n\
    \            balance -= 0\n        case 43:\n            balance += 0\n      \
    \  case 44:\n            balance -= 0\n        case 45:\n            balance +=\
    \ 0\n        case 46:\n            balance -= 0\n        case 47:\n          \
    \  balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 0\n        case 50:\n            balance -= 0\n      \
    \  case 51:\n            balance += 0\n        case 52:\n            balance -=\
    \ 0\n        case 53\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqn4d5zjm_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int\n    for _, operation := range operations {\n  \
    \      switch operation {\n        case 1:\n            balance += 100\n     \
    \   case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptfpc64gu_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    if acc < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmprg_2uj02_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, op := range operations {\n        sum += op\n\
    \    }\n    if sum < 0 {\n        return false\n    }\n    return true\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpzv5kb1zn_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpzv5kb1zn_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpzv5kb1zn_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpzv5kb1zn_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpzv5kb1zn_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        if op ==\
    \ 1 {\n            acc += 100\n        } else {\n            acc -= 100\n    \
    \    }\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmp9m2fm445_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmp9m2fm445_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpkikqc5u6_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 20\n        case 22:\n            balance -= 20\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 20\n        case 38:\n            balance\
    \ -= 20\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbs0wvv6a_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 5\n      \
    \  case 16:\n            balance -= 5\n        case 17:\n            balance +=\
    \ 2\n        case 18:\n            balance -= 2\n        case 19:\n          \
    \  balance += 1\n        case 20:\n            balance -= 1\n        case 21:\n\
    \            balance += 5\n        case 22:\n            balance -= 5\n      \
    \  case 23:\n            balance += 2\n        case 24:\n            balance -=\
    \ 2\n        case 25:\n            balance += 1\n        case 26:\n          \
    \  balance -= 1\n        case 27:\n            balance += 5\n        case 28:\n\
    \            balance -= 5\n        case 29:\n            balance += 2\n      \
    \  case 30:\n            balance -= 2\n        case 31:\n            balance +=\
    \ 1\n        case 32:\n            balance -= 1\n        case 33:\n          \
    \  balance += 5\n        case 34:\n            balance -= 5\n        case 35:\n\
    \            balance += 2\n        case 36:\n            balance -= 2\n      \
    \  case 37:\n            balance += 1\n        case 38:\n            balance -=\
    \ 1\n        case 39:\n            balance += 5\n        case 40:\n          \
    \  balance -= 5\n        case 41:\n            balance += 2\n        case 42:\n\
    \            balance -= 2\n        case 43:\n            balance += 1\n      \
    \  case 44:\n            balance -= 1\n        case 45:\n            balance +=\
    \ 5\n        case 46:\n            balance -= 5\n        case 47:\n          \
    \  balance += 2\n        case 48:\n            balance -= 2\n        case 49:\n\
    \            balance += 1\n        case 50:\n            balance -= 1\n      \
    \  case 51:\n            balance += 5\n        case 52:\n            balance -=\
    \ 5\n        case 53:\n            balance += 2\n        case 54:\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8ugpo9bd_test.go:123:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int\n    for _, operation := range operations {\n  \
    \      switch operation {\n        case 1:\n            balance += 100\n     \
    \   case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53:\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdtud5uus_test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpcucpfl11_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ {\n            balance -= operation\n        }\n    }\n    return balance <\
    \ 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmpvcesaq45_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmpvcesaq45_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n            return false\n        }\n    }\n    return balance\
    \ < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp5r72pmrr_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmp5r72pmrr_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmp5r72pmrr_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, op := range operations {\n        sum += op\n\
    \    }\n    if sum < 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp_vq3iy20_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += -1\n     \
    \   case 16:\n            balance -= 1\n        case 17:\n            balance\
    \ += -2\n        case 18:\n            balance -= -2\n        case 19:\n     \
    \       balance += -3\n        case 20:\n            balance -= -3\n        case\
    \ 21:\n            balance += -4\n        case 22:\n            balance -= -4\n\
    \        case 23:\n            balance += -5\n        case 24:\n            balance\
    \ -= -5\n        case 25:\n            balance += -6\n        case 26:\n     \
    \       balance -= -6\n        case 27:\n            balance += -7\n        case\
    \ 28:\n            balance -= -7\n        case 29:\n            balance += -8\n\
    \        case 30:\n            balance -= -8\n        case 31:\n            balance\
    \ += -9\n        case 32:\n            balance -= -9\n        case 33:\n     \
    \       balance += -10\n        case 34:\n            balance -= -10\n       \
    \ case 35:\n            balance += -11\n        case 36:\n            balance\
    \ -= -11\n        case 37:\n            balance += -12\n        case 38:\n   \
    \         balance -= -12\n        case 39:\n            balance += -13\n     \
    \   case 40:\n            balance -= -13\n        case 41:\n            balance\
    \ += -14\n        case 42:\n            balance -= -14\n        case 43:\n   \
    \         balance += -15\n        case 44:\n            balance -= -15\n     \
    \   case 45:\n            balance += -16\n        case 46:\n            balance\
    \ -= -16\n        case 47:\n            balance += -17\n        case 48:\n   \
    \         balance -= -17\n        case 49:\n            balance += -18\n     \
    \   case 50:\n            balance -= -18\n        case 51:\n            balance\
    \ += -19\n        case 52:\n            balance -= -19\n        case 53:\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_y2zckpg_test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case \nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp46blqq2__test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpkikqc5u6_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        if op ==\
    \ 1 {\n            acc += 100\n        } else {\n            acc -= 100\n    \
    \    }\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmp9m2fm445_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmp9m2fm445_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpcucpfl11_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0smmc058_test.go:267:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt4t0tmrd_test.go:267:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 10\n        case 6:\n            balance -= 10\n        case\
    \ 7:\n            balance += 5\n        case 8:\n            balance -= 5\n  \
    \      case 9:\n            balance += 2\n        case 10:\n            balance\
    \ -= 2\n        case 11:\n            balance += 1\n        case 12:\n       \
    \     balance -= 1\n        case 13:\n            balance += 3\n        case 14:\n\
    \            balance -= 3\n        case 15:\n            balance += 5\n      \
    \  case 16:\n            balance -= 5\n        case 17:\n            balance +=\
    \ 10\n        case 18:\n            balance -= 10\n        case 19:\n        \
    \    balance += 20\n        case 20:\n            balance -= 20\n        case\
    \ 21:\n            balance += 50\n        case 22:\n            balance -= 50\n\
    \        case 23:\n            balance += 100\n        case 24:\n            balance\
    \ -= 100\n        case 25:\n            balance += 500\n        case 26:\n   \
    \         balance -= 500\n        case 27:\n            balance += 1000\n    \
    \    case 28:\n            balance -= 1000\n        case 29:\n            balance\
    \ += 5000\n        case 30:\n            balance -= 5000\n        case 31:\n \
    \           balance += 10000\n        case 32:\n            balance -= 10000\n\
    \        case 33:\n            balance += 50000\n        case 34:\n          \
    \  balance -= 50000\n        case 35:\n            balance += 100000\n       \
    \ case 36:\n            balance -= 100000\n        case 37:\n            balance\
    \ += 500000\n        case 38:\n            balance -= 500000\n        case 39:\n\
    \            balance += 1000000\n        case 40:\n            balance -= 1000000\n\
    \        case 41:\n            balance += 5000000\n        case 42:\n        \
    \    balance -= 5000000\n        case 43:\n            balance += 10000000\n \
    \       case 44:\n            balance -= 10000000\n        case 45:\n        \
    \    balance += 50000000\n        case 46:\n            balance -= 50000000\n\
    \        case 47:\n            balance += 100000000\n        case 48:\n      \
    \      balance -= 100000000\n        case 49:\n            balance += 500000000\n\
    \        case 50:\n            balance -= 500000000\n        case 51:\n      \
    \      balance += \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2hd098_x_test.go:117:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpkikqc5u6_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 200\n        case 4:\n            balance -= 200\n        case 5:\n     \
    \       balance += 300\n        case 6:\n            balance -= 300\n        case\
    \ 7:\n            balance += 400\n        case 8:\n            balance -= 400\n\
    \        case 9:\n            balance += 500\n        case 10:\n            balance\
    \ -= 500\n        case 11:\n            balance += 600\n        case 12:\n   \
    \         balance -= 600\n        case 13:\n            balance += 700\n     \
    \   case 14:\n            balance -= 700\n        case 15:\n            balance\
    \ += 800\n        case 16:\n            balance -= 800\n        case 17:\n   \
    \         balance += 900\n        case 18:\n            balance -= 900\n     \
    \   case 19:\n            balance += 1000\n        case 20:\n            balance\
    \ -= 1000\n        case 21:\n            balance += 1100\n        case 22:\n \
    \           balance -= 1100\n        case 23:\n            balance += 1200\n \
    \       case 24:\n            balance -= 1200\n        case 25:\n            balance\
    \ += 1300\n        case 26:\n            balance -= 1300\n        case 27:\n \
    \           balance += 1400\n        case 28:\n            balance -= 1400\n \
    \       case 29:\n            balance += 1500\n        case 30:\n            balance\
    \ -= 1500\n        case 31:\n            balance += 1600\n        case 32:\n \
    \           balance -= 1600\n        case 33:\n            balance += 1700\n \
    \       case 34:\n            balance -= 1700\n        case 35:\n            balance\
    \ += 1800\n        case 36:\n            balance -= 1800\n        case 37:\n \
    \           balance += 1900\n        case 38:\n            balance -= 1900\n \
    \       case 39:\n            balance += 2000\n        case 40:\n            balance\
    \ -= 2000\n        case 41:\n            balance += 2100\n        case 42:\n \
    \           balance -= 2100\n        case 43:\n            balance += 2200\n \
    \       case 44:\n            balance -= 2200\n        case 45:\n            balance\
    \ += 2300\n        case 46:\n            balance -= 2300\n        case 47:\n \
    \           balance += 2400\n        case 48:\n            balance -= 2400\n \
    \       case 49:\n            balance += 2500\n        case 50:\n            balance\
    \ -= 2500\n        case 51:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu2763ylv_test.go:117:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 0\n        case 18:\n            balance -= 0\n        case 19:\n          \
    \  balance += 0\n        case 20:\n            balance -= 0\n        case 21:\n\
    \            balance += 0\n        case 22:\n            balance -= 0\n      \
    \  case 23:\n            balance += 0\n        case 24:\n            balance -=\
    \ 0\n        case 25:\n            balance += 0\n        case 26:\n          \
    \  balance -= 0\n        case 27:\n            balance += 0\n        case 28:\n\
    \            balance -= 0\n        case 29:\n            balance += 0\n      \
    \  case 30:\n            balance -= 0\n        case 31:\n            balance +=\
    \ 0\n        case 32:\n            balance -= 0\n        case 33:\n          \
    \  balance += 0\n        case 34:\n            balance -= 0\n        case 35:\n\
    \            balance += 0\n        case 36:\n            balance -= 0\n      \
    \  case 37:\n            balance += 0\n        case 38:\n            balance -=\
    \ 0\n        case 39:\n            balance += 0\n        case 40:\n          \
    \  balance -= 0\n        case 41:\n            balance += 0\n        case 42:\n\
    \            balance -= 0\n        case 43:\n            balance += 0\n      \
    \  case 44:\n            balance -= 0\n        case 45:\n            balance +=\
    \ 0\n        case 46:\n            balance -= 0\n        case 47:\n          \
    \  balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 0\n        case 50:\n            balance -= 0\n      \
    \  case 51:\n            balance += 0\n        case 52:\n            balance -=\
    \ 0\n        case 53\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9r_hk6xw_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, op := range operations {\n        sum += op\n\
    \    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpspc61kd8_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 5\n      \
    \  case 16:\n            balance -= 5\n        case 17:\n            balance +=\
    \ 2\n        case 18:\n            balance -= 2\n        case 19:\n          \
    \  balance += 1\n        case 20:\n            balance -= 1\n        case 21:\n\
    \            balance += 5\n        case 22:\n            balance -= 5\n      \
    \  case 23:\n            balance += 2\n        case 24:\n            balance -=\
    \ 2\n        case 25:\n            balance += 1\n        case 26:\n          \
    \  balance -= 1\n        case 27:\n            balance += 5\n        case 28:\n\
    \            balance -= 5\n        case 29:\n            balance += 2\n      \
    \  case 30:\n            balance -= 2\n        case 31:\n            balance +=\
    \ 1\n        case 32:\n            balance -= 1\n        case 33:\n          \
    \  balance += 5\n        case 34:\n            balance -= 5\n        case 35:\n\
    \            balance += 2\n        case 36:\n            balance -= 2\n      \
    \  case 37:\n            balance += 1\n        case 38:\n            balance -=\
    \ 1\n        case 39:\n            balance += 5\n        case 40:\n          \
    \  balance -= 5\n        case 41:\n            balance += 2\n        case 42:\n\
    \            balance -= 2\n        case 43:\n            balance += 1\n      \
    \  case 44:\n            balance -= 1\n        case 45:\n            balance +=\
    \ 5\n        case 46:\n            balance -= 5\n        case 47:\n          \
    \  balance += 2\n        case 48:\n            balance -= 2\n        case 49:\n\
    \            balance += 1\n        case 50:\n            balance -= 1\n      \
    \  case 51:\n            balance += 5\n        case 52:\n            balance -=\
    \ 5\n        case 53:\n            balance += 2\n        case 54:\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8ugpo9bd_test.go:123:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmphkdhesgr_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmphkdhesgr_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int\n    for _, operation := range operations {\n  \
    \      switch operation {\n        case 1:\n            balance = balance + operation\n\
    \        case -1:\n            balance = balance - operation\n        }\n    }\n\
    \    return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmp7ko4yp0y_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmp7ko4yp0y_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmp7ko4yp0y_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    \n    return false\n}\n\nfunc\
    \ TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpzwxiqv0t_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpzwxiqv0t_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpzwxiqv0t_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 20\n        case 22:\n            balance -= 20\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 20\n        case 38:\n            balance\
    \ -= 20\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbs0wvv6a_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 10\n    \
    \    case 2:\n            balance -= 10\n        case 3:\n            balance\
    \ += 20\n        case 4:\n            balance -= 20\n        case 5:\n       \
    \     balance += 30\n        case 6:\n            balance -= 30\n        case\
    \ 7:\n            balance += 40\n        case 8:\n            balance -= 40\n\
    \        case 9:\n            balance += 50\n        case 10:\n            balance\
    \ -= 50\n        case 11:\n            balance += 60\n        case 12:\n     \
    \       balance -= 60\n        case 13:\n            balance += 70\n        case\
    \ 14:\n            balance -= 70\n        case 15:\n            balance += 80\n\
    \        case 16:\n            balance -= 80\n        case 17:\n            balance\
    \ += 90\n        case 18:\n            balance -= 90\n        case 19:\n     \
    \       balance += 100\n        case 20:\n            balance -= 100\n       \
    \ case 21:\n            balance += 200\n        case 22:\n            balance\
    \ -= 200\n        case 23:\n            balance += 300\n        case 24:\n   \
    \         balance -= 300\n        case 25:\n            balance += 400\n     \
    \   case 26:\n            balance -= 400\n        case 27:\n            balance\
    \ += 500\n        case 28:\n            balance -= 500\n        case 29:\n   \
    \         balance += 600\n        case 30:\n            balance -= 600\n     \
    \   case 31:\n            balance += 700\n        case 32:\n            balance\
    \ -= 700\n        case 33:\n            balance += 800\n        case 34:\n   \
    \         balance -= 800\n        case 35:\n            balance += 900\n     \
    \   case 36:\n            balance -= 900\n        case 37:\n            balance\
    \ += 1000\n        case 38:\n            balance -= 1000\n        case 39:\n \
    \           balance += 2000\n        case 40:\n            balance -= 2000\n \
    \       case 41:\n            balance += 3000\n        case 42:\n            balance\
    \ -= 3000\n        case 43:\n            balance += 4000\n        case 44:\n \
    \           balance -= 4000\n        case 45:\n            balance += 5000\n \
    \       case 46:\n            balance -= 5000\n        case 47:\n            balance\
    \ += 6000\n        case 48:\n            balance -= 6000\n        case 49:\n \
    \           balance += 7000\n        case 50:\n            balance -= 7000\n \
    \       case 51:\n            balance += 8000\n        case 52:\n            bal\n\
    func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7qhi5rjc_test.go:119:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Write your code here\n    var balance int = 0\n    for _, op\
    \ := range operations {\n        balance += op\n    }\n    return balance < 0\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpumyf1j3__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8bfp_2o_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += 1\n        } else if operation\
    \ == 2 {\n            balance -= 1\n        }\n    }\n    return balance < 0\n\
    }\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
    \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2,\
    \ -2, 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2,\
    \ 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplejc8hjg_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmplejc8hjg_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmplejc8hjg_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8bfp_2o_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 10\n        case 6:\n            balance -= 10\n        case\
    \ 7:\n            balance += 5\n        case 8:\n            balance -= 5\n  \
    \      case 9:\n            balance += 2\n        case 10:\n            balance\
    \ -= 2\n        case 11:\n            balance += 1\n        case 12:\n       \
    \     balance -= 1\n        case 13:\n            balance += 3\n        case 14:\n\
    \            balance -= 3\n        case 15:\n            balance += 5\n      \
    \  case 16:\n            balance -= 5\n        case 17:\n            balance +=\
    \ 10\n        case 18:\n            balance -= 10\n        case 19:\n        \
    \    balance += 20\n        case 20:\n            balance -= 20\n        case\
    \ 21:\n            balance += 50\n        case 22:\n            balance -= 50\n\
    \        case 23:\n            balance += 100\n        case 24:\n            balance\
    \ -= 100\n        case 25:\n            balance += 200\n        case 26:\n   \
    \         balance -= 200\n        case 27:\n            balance += 500\n     \
    \   case 28:\n            balance -= 500\n        case 29:\n            balance\
    \ += 1000\n        case 30:\n            balance -= 1000\n        case 31:\n \
    \           balance += 2000\n        case 32:\n            balance -= 2000\n \
    \       case 33:\n            balance += 5000\n        case 34:\n            balance\
    \ -= 5000\n        case 35:\n            balance += 10000\n        case 36:\n\
    \            balance -= 10000\n        case 37:\n            balance += 20000\n\
    \        case 38:\n            balance -= 20000\n        case 39:\n          \
    \  balance += 50000\n        case 40:\n            balance -= 50000\n        case\
    \ 41:\n            balance += 100000\n        case 42:\n            balance -=\
    \ 100000\n        case 43:\n            balance += 200000\n        case 44:\n\
    \            balance -= 200000\n        case 45:\n            balance += 500000\n\
    \        case 46:\n            balance -= 500000\n        case 47:\n         \
    \   balance += 1000000\n        case 48:\n            balance -= 1000000\n   \
    \     case 49:\n            balance += 2000000\n        case 50:\n           \
    \ balance -= 2000000\n        case 51:\n            balance += 5000000\n     \
    \   case 52:\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2_us224_test.go:118:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpcucpfl11_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfr6uf_md_test.go:159:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 20\n        case 22:\n            balance -= 20\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 20\n        case 38:\n            balance\
    \ -= 20\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbs0wvv6a_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int\n    for _, operation := range operations {\n  \
    \      switch operation {\n        case 1:\n            balance += 100\n     \
    \   case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmpro0d3168_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpro0d3168_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 2
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0\n        case 20:\n            balance -= 0\n       \
    \ default:\n            fmt.Println(\"Invalid operation\")\n        }\n    }\n\
    \    return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vdbobyd_test.go:44:24: 0.5 (untyped float constant) truncated to int

    /tmp/tmp0vdbobyd_test.go:46:24: 0.5 (untyped float constant) truncated to int

    /tmp/tmp0vdbobyd_test.go:48:24: 0.25 (untyped float constant) truncated to int

    /tmp/tmp0vdbobyd_test.go:50:24: 0.25 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        if op ==\
    \ 1 {\n            acc += op\n        } else {\n            acc -= op\n      \
    \  }\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__4\
    \ (0.00s)\n        tmp5p7ohee9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__5 (0.00s)\n        tmp5p7ohee9_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        if op ==\
    \ 1 {\n            acc += 100\n        } else {\n            acc -= 100\n    \
    \    }\n    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmp9m2fm445_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmp9m2fm445_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmp5fu0r9x8_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp5fu0r9x8_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case \nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp46blqq2__test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 2
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0\n        case 20:\n            balance -= 0\n       \
    \ default:\n            fmt.Println(\"Invalid operation\")\n        }\n    }\n\
    \    return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vdbobyd_test.go:44:24: 0.5 (untyped float constant) truncated to int

    /tmp/tmp0vdbobyd_test.go:46:24: 0.5 (untyped float constant) truncated to int

    /tmp/tmp0vdbobyd_test.go:48:24: 0.25 (untyped float constant) truncated to int

    /tmp/tmp0vdbobyd_test.go:50:24: 0.25 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 10\n        case 6:\n            balance -= 10\n        case\
    \ 7:\n            balance += 5\n        case 8:\n            balance -= 5\n  \
    \      case 9:\n            balance += 2\n        case 10:\n            balance\
    \ -= 2\n        case 11:\n            balance += 1\n        case 12:\n       \
    \     balance -= 1\n        case 13:\n            balance += 0\n        case 14:\n\
    \            balance -= 0\n        default:\n            fmt.Println(\"Invalid\
    \ operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmpu9vdiozg_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpu9vdiozg_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmphkdhesgr_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmphkdhesgr_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpxxus0g51_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return true\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__0\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__1 (0.00s)\n        tmpkikqc5u6_test.go:36:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmpkikqc5u6_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0.5\n    \
    \    case 16:\n            balance -= 0.5\n        case 17:\n            balance\
    \ += 0.25\n        case 18:\n            balance -= 0.25\n        case 19:\n \
    \           balance += 0.01\n        case 20:\n            balance -= 0.01\n \
    \       case 21:\n            balance += 0.005\n        case 22:\n           \
    \ balance -= 0.005\n        case 23:\n            balance += 0.0025\n        case\
    \ 24:\n            balance -= 0.0025\n        case 25:\n            balance +=\
    \ 0.001\n        case 26:\n            balance -= 0.001\n        case 27:\n  \
    \          balance += 0.0005\n        case 28:\n            balance -= 0.0005\n\
    \        case 29:\n            balance += 0.00025\n        case 30:\n        \
    \    balance -= 0.00025\n        case 31:\n            balance += 0.0001\n   \
    \     case 32:\n            balance -= 0.0001\n        case 33:\n            balance\
    \ += 0.00005\n        case 34:\n            balance -= 0.00005\n        case 35:\n\
    \            balance += 0.000025\n        case 36:\n            balance -= 0.000025\n\
    \        case 37:\n            balance += 0.00001\n        case 38:\n        \
    \    balance -= 0.00001\n        case 39:\n            balance += 0.000005\n \
    \       case 40:\n            balance -= 0.000005\n        case 41:\n        \
    \    balance += 0.0000025\n        case 42:\n            balance -= 0.0000025\n\
    \        case 43:\n            balance += 0.0000005\n        case 44:\n      \
    \      balance -= 0.0000005\n        case 45:\n            balance += 0.00000025\n\
    \        case 46:\n            balance -= 0.00000025\n        case 47:\n     \
    \       balance += 0.0000001\n        case 48:\n            balance -= 0.0000001\n\
    \        case \nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb0fujnlv_test.go:112:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8bfp_2o_test.go:119:16: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 10\n    \
    \    case 2:\n            balance -= 10\n        case 3:\n            balance\
    \ += 20\n        case 4:\n            balance -= 20\n        case 5:\n       \
    \     balance += 30\n        case 6:\n            balance -= 30\n        case\
    \ 7:\n            balance += 40\n        case 8:\n            balance -= 40\n\
    \        case 9:\n            balance += 50\n        case 10:\n            balance\
    \ -= 50\n        case 11:\n            balance += 60\n        case 12:\n     \
    \       balance -= 60\n        case 13:\n            balance += 70\n        case\
    \ 14:\n            balance -= 70\n        case 15:\n            balance += 80\n\
    \        case 16:\n            balance -= 80\n        case 17:\n            balance\
    \ += 90\n        case 18:\n            balance -= 90\n        case 19:\n     \
    \       balance += 100\n        case 20:\n            balance -= 100\n       \
    \ case 21:\n            balance += 110\n        case 22:\n            balance\
    \ -= 110\n        case 23:\n            balance += 120\n        case 24:\n   \
    \         balance -= 120\n        case 25:\n            balance += 130\n     \
    \   case 26:\n            balance -= 130\n        case 27:\n            balance\
    \ += 140\n        case 28:\n            balance -= 140\n        case 29:\n   \
    \         balance += 150\n        case 30:\n            balance -= 150\n     \
    \   case 31:\n            balance += 160\n        case 32:\n            balance\
    \ -= 160\n        case 33:\n            balance += 170\n        case 34:\n   \
    \         balance -= 170\n        case 35:\n            balance += 180\n     \
    \   case 36:\n            balance -= 180\n        case 37:\n            balance\
    \ += 190\n        case 38:\n            balance -= 190\n        case 39:\n   \
    \         balance += 200\n        case 40:\n            balance -= 200\n     \
    \   case 41:\n            balance += 210\n        case 42:\n            balance\
    \ -= 210\n        case 43:\n            balance += 220\n        case 44:\n   \
    \         balance -= 220\n        case 45:\n            balance += 230\n     \
    \   case 46:\n            balance -= 230\n        case 47:\n            balance\
    \ += 240\n        case 48:\n            balance -= 240\n        case 49:\n   \
    \         balance += 250\n        case 50:\n            balance -= 250\n     \
    \   case 51:\n            balance += 260\n        case 52:\n            balance\
    \ -= 260\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34bxtg3c_test.go:120:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    return sum < 0\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmplzjdbflk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            fmt.Println(\"\
    Invalid operation\")\n        }\n    }\n    return balance < 0\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\n\
    Invalid operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\nInvalid operation\nInvalid\
    \ operation\nInvalid operation\nInvalid operation\n--- FAIL: TestBelow_Zero (0.00s)\n\
    \    --- FAIL: TestBelow_Zero/test_num__2 (0.00s)\n        tmp2y2h_aqn_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__3\
    \ (0.00s)\n        tmp2y2h_aqn_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpeoqdd1tn_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpeoqdd1tn_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    sum := 0\n    for _, operation := range operations {\n        sum\
    \ += operation\n    }\n    if sum < 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpeluyeyfq_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 20\n        case 22:\n            balance -= 20\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 20\n        case 38:\n            balance\
    \ -= 20\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbs0wvv6a_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpcucpfl11_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 20\n        case 6:\n            balance -= 20\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 20\n        case 22:\n            balance -= 20\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 20\n        case 38:\n            balance\
    \ -= 20\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbs0wvv6a_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    acc := 0\n    for _, op := range operations {\n        acc += op\n\
    \    }\n    return acc < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpcucpfl11_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        if operation == 1 {\n            balance += operation\n        } else\
    \ if operation == 2 {\n            balance -= operation\n        }\n    }\n  \
    \  return balance < 0\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate :=\
    \ below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__1\
    \ (0.00s)\n        tmpbsau0ff6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__3 (0.00s)\n        tmpbsau0ff6_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    var balance int = 0\n    for _, operation := range operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ 100\n        case 18:\n            balance -= 100\n        case 19:\n      \
    \      balance += 50\n        case 20:\n            balance -= 50\n        case\
    \ 21:\n            balance += 25\n        case 22:\n            balance -= 25\n\
    \        case 23:\n            balance += 10\n        case 24:\n            balance\
    \ -= 10\n        case 25:\n            balance += 5\n        case 26:\n      \
    \      balance -= 5\n        case 27:\n            balance += 2\n        case\
    \ 28:\n            balance -= 2\n        case 29:\n            balance += 1\n\
    \        case 30:\n            balance -= 1\n        case 31:\n            balance\
    \ += 0\n        case 32:\n            balance -= 0\n        case 33:\n       \
    \     balance += 100\n        case 34:\n            balance -= 100\n        case\
    \ 35:\n            balance += 50\n        case 36:\n            balance -= 50\n\
    \        case 37:\n            balance += 25\n        case 38:\n            balance\
    \ -= 25\n        case 39:\n            balance += 10\n        case 40:\n     \
    \       balance -= 10\n        case 41:\n            balance += 5\n        case\
    \ 42:\n            balance -= 5\n        case 43:\n            balance += 2\n\
    \        case 44:\n            balance -= 2\n        case 45:\n            balance\
    \ += 1\n        case 46:\n            balance -= 1\n        case 47:\n       \
    \     balance += 0\n        case 48:\n            balance -= 0\n        case 49:\n\
    \            balance += 100\n        case 50:\n            balance -= 100\n  \
    \      case 51:\n            balance += 50\n        case 52:\n            balance\
    \ -= 50\n        case 53:\n            bal\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpioubh2iz_test.go:121:6: expected ''('', found TestBelow_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\nfunc below_zero(operations []int)\
    \ bool {\n    // Your code here\n    \n    \n    return false\n}\n\nfunc TestBelow_Zero(t\
    \ *testing.T) {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: false },\n     { actual: candidate([]int{1, 2,\
    \ -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1, 2, -4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5,\
    \ 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2, 5,\
    \ -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
    \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Zero (0.00s)\n    --- FAIL: TestBelow_Zero/test_num__2\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Zero/test_num__4 (0.00s)\n        tmpp1tt3ham_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Zero/test_num__5\
    \ (0.00s)\n        tmpp1tt3ham_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
