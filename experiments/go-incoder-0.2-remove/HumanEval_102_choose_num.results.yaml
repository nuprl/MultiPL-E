language: go_test.go
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpaf0fam47_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpaf0fam47_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpaf0fam47_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpaf0fam47_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n\
    \    if y == 0 {\n        return y\n    }\n    \n    x -= y\n    \n    return\
    \ x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqe8sbodi_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpqe8sbodi_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpqe8sbodi_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpqe8sbodi_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqe8sbodi_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpqe8sbodi_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqe8sbodi_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpqe8sbodi_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    result\
    \ := 0\n    \n    for i := x; i <= y; i++ {\n        if i%2 == 0 {\n         \
    \   result = i\n            break\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpng5yup_i_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpng5yup_i_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpng5yup_i_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpng5yup_i_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpng5yup_i_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpng5yup_i_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpng5yup_i_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 ==\
    \ 0 {\n            return x + y\n        }\n        x /= 2\n        y /= 2\n \
    \   }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf6ah8v4r_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpf6ah8v4r_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpf6ah8v4r_test.go:49: expected '%!s(int=12354)', got '%!s(int=386)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpf6ah8v4r_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf6ah8v4r_test.go:49: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpf6ah8v4r_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpf6ah8v4r_test.go:49: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpf6ah8v4r_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8mz9obrx_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8mz9obrx_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8mz9obrx_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8mz9obrx_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8mz9obrx_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8mz9obrx_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp8mz9obrx_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp8mz9obrx_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.045s\nFAIL\n"
  timestamp: 1660073858
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            if x != y {\n             \
    \   return x\n            }\n        } else {\n            if x % 2 == 0 {\n \
    \               return -1\n            }\n            if y % 2 == 0 {\n      \
    \          return -1\n            }\n        }\n        x /= 2\n        y /= 2\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073868
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x /= 2\n        \n        if x == 0 {\n        \
    \    return x\n        }\n        \n        if x > y {\n            return -1\n\
    \        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpa5ukfwph_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpa5ukfwph_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpa5ukfwph_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpa5ukfwph_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpa5ukfwph_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpa5ukfwph_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpa5ukfwph_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpa5ukfwph_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.039s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    if x > y {\n        x, y = y, x\n    }\n    \n    x %= y\n    \n    if\
    \ x == 0 {\n        return y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n\
    \        return x\n    }\n    \n    x -= y\n    y -= x\n    \n    return x + y\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6s2gsauq_test.go:59: expected '%!s(int=14)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6s2gsauq_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6s2gsauq_test.go:59: expected '%!s(int=12354)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6s2gsauq_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6s2gsauq_test.go:59: expected '%!s(int=28)', got '%!s(int=5)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6s2gsauq_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6s2gsauq_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.058s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %=\
    \ x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n\
    \    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n    \
    \    return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n   \
    \ \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n \
    \       return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n   \
    \ \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n \
    \       return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x %= y\n    \n    if \nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9icgrun9_test.go:188:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpedwj0a6o_test.go:50: expected '%!s(int=14)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpedwj0a6o_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-7)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpedwj0a6o_test.go:50: expected '%!s(int=28)', got '%!s(int=-82)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpedwj0a6o_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    x /= 2\n    y /= 2\n    \n   \
    \ for {\n        if x == y {\n            return x\n        }\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \      y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpe50je2o0_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpe50je2o0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpe50je2o0_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpe50je2o0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpe50je2o0_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpe50je2o0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpe50je2o0_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.049s\nFAIL\n"
  timestamp: 1660073858
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073868
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ if x > y {\n        x, y = y, x\n    }\n    \n    x -= 2\n    y -= 2\n    \n\
    \    for {\n        if x % 2 == 0 {\n            x += 2\n            if y % 2\
    \ == 0 {\n                y += 2\n                return y\n            }\n  \
    \          y -= 2\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbrquqxhc_test.go:57: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbrquqxhc_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbrquqxhc_test.go:57: expected '%!s(int=12354)', got '%!s(int=388)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbrquqxhc_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=164)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbrquqxhc_test.go:57: expected '%!s(int=28)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbrquqxhc_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpbrquqxhc_test.go:57: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x += y\n        }\n        x /= 2\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpu3q032bt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpu3q032bt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpu3q032bt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpu3q032bt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpu3q032bt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpu3q032bt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpu3q032bt_test.go:49: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7csw4t0a_test.go:48: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp7csw4t0a_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7csw4t0a_test.go:48: expected '%!s(int=28)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp7csw4t0a_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp7csw4t0a_test.go:48: expected '%!s(int=546)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.052s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphbxo2ito_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmphbxo2ito_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphbxo2ito_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmphbxo2ito_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i\
    \ := x; i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n     \
    \   return x\n    } else {\n        return y\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2y9gexvq_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2y9gexvq_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2y9gexvq_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2y9gexvq_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2y9gexvq_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2y9gexvq_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2y9gexvq_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x - 1,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y - 1)\n    }\n\
    \    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl_4601j4_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpl_4601j4_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpl_4601j4_test.go:48: expected '%!s(int=-1)', got '%!s(int=5233)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpl_4601j4_test.go:48:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpl_4601j4_test.go:48: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.050s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 {\n        return choose_num(x - 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y - 1)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqr_ofbx2_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqr_ofbx2_test.go:51:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpqr_ofbx2_test.go:51: expected '%!s(int=-1)', got '%!s(int=5233)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpqr_ofbx2_test.go:51:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqr_ofbx2_test.go:51: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + 1\n    }\n\
    \    if x % 2 != 0 && y % 2 == 0 {\n        return x + 1\n    }\n    if x % 2\
    \ != 0 && y % 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_x0rdaad_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_x0rdaad_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_x0rdaad_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_x0rdaad_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_x0rdaad_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_x0rdaad_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_x0rdaad_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.072s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1,\
    \ y)\n    }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            x = x / 2\n        } else {\n          \
    \  x = x * 3 + 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpipq4t1mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpipq4t1mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpipq4t1mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    evens := 0\n    odds := 0\n    \n    for i := 0; i < y; i++ {\n      \
    \  if x % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n        x = x / 2\n    }\n    \n    if evens > odds {\n        return\
    \ evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwuxs1d_i_test.go:56: expected '%!s(int=14)', got '%!s(int=13)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwuxs1d_i_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwuxs1d_i_test.go:56: expected '%!s(int=12354)', got '%!s(int=12352)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwuxs1d_i_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=5227)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwuxs1d_i_test.go:56: expected '%!s(int=28)', got '%!s(int=27)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwuxs1d_i_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwuxs1d_i_test.go:56: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpwuxs1d_i_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=543)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.044s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpjgeqko3l_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpjgeqko3l_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpjgeqko3l_test.go:48: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpjgeqko3l_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.051s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return x + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n       \
    \ return x + y - 1\n    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return x + y\
    \ - 1\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7r2lmtj0_test.go:60: expected '%!s(int=14)', got '%!s(int=26)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp7r2lmtj0_test.go:60:\
    \ expected '%!s(int=12354)', got '%!s(int=12387)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7r2lmtj0_test.go:60: expected '%!s(int=28)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp7r2lmtj0_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.047s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return y\n    }\n   \
    \ if x % 2 != 0 && y % 2 == 0 {\n        return x\n    }\n    if x % 2 != 0 &&\
    \ y % 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_5gy4f1d_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_5gy4f1d_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_5gy4f1d_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_5gy4f1d_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_5gy4f1d_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_5gy4f1d_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_5gy4f1d_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x /= 2\n        if x%2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.023s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   x /= 2\n        y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    x -= y\n    \n    if x % 2 == 0 {\n\
    \        return x + y\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpzptr_ymt_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpzptr_ymt_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpzptr_ymt_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpzptr_ymt_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpzptr_ymt_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpzptr_ymt_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpzptr_ymt_test.go:50: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.061s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n    \
    \    if x % 2 == 0 {\n            x += 2\n        }\n        if y % 2 == 0 {\n\
    \            y += 2\n        }\n        if x < y {\n            return x\n   \
    \     }\n        if x > y {\n            return y\n        }\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpy1_1yk1i_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpy1_1yk1i_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpy1_1yk1i_test.go:59: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpy1_1yk1i_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=5231)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpy1_1yk1i_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpy1_1yk1i_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpy1_1yk1i_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.062s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.054s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n\
    \    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x ==\
    \ 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n    \
    \    return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n   \
    \ \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n \
    \       return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpof9345oo_test.go:188:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := x; i <= y; i++ {\n        if i%2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \    }\n    \n    if evens > odds {\n        return evens\n    } else {\n    \
    \    return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073862
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return choose_num(x / 2, y / 2)\n    }\n    \n    if x % 2 == 0 && y %\
    \ 2 == 1 {\n        return choose_num(x / 2, y)\n    }\n    \n    if x % 2 ==\
    \ 1 && y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n    \n    if\
    \ x % 2 == 1 && y % 2 == 1 {\n        return x\n    }\n    \n    return -1\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpr_yr7u93_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpr_yr7u93_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpr_yr7u93_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpr_yr7u93_test.go:60:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpr_yr7u93_test.go:60: expected '%!s(int=-1)', got '%!s(int=27)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpr_yr7u93_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    if x == y {\n        return x\n    }\n    \n    if x > y {\n        x,\
    \ y = y, x\n    }\n    \n    for i := x; i <= y; i++ {\n        if i%2 == 0 {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpp6edrqe3_test.go:53: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpp6edrqe3_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpp6edrqe3_test.go:53: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpp6edrqe3_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpp6edrqe3_test.go:53: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpp6edrqe3_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpp6edrqe3_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.047s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n \
    \   }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmrcx2z90_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpmrcx2z90_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpmrcx2z90_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpmrcx2z90_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5232)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmrcx2z90_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmrcx2z90_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpmrcx2z90_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpmrcx2z90_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return choose_num(x/2, y/2)\n    }\n    \n    if x % 2 == 0 && y % 2 !=\
    \ 0 {\n        return choose_num(x/2, y)\n    }\n    \n    if x % 2 != 0 && y\
    \ % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    \n    if x % 2 !=\
    \ 0 && y % 2 != 0 {\n        return choose_num(x, y)\n    }\n    \n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xd?,\
    \ 0x3?)\n\t/tmp/tmpnfynkjl2_test.go:12 +0x119 fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef779\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34\
    \ +0xb5 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34 +0xb5 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34\
    \ +0xb5 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34 +0xb5 fp=0xc020160420 sp=0xc020160400 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34\
    \ +0xb5 fp=0xc020160440 sp=0xc020160420 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34 +0xb5 fp=0xc020160460 sp=0xc020160440 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34\
    \ +0xb5 fp=0xc020160480 sp=0xc020160460 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34 +0xb5 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34\
    \ +0xb5 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34 +0xb5 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnfynkjl2_test.go:34\
    \ +0xb5 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef715\ncommand-line-a"
  timestamp: 1660073865
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x -= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073874
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n  \
    \  }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n   \
    \ if x % 2 != 0 && y % 2 != 0 {\n        return x + y + 1\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpfygv9_xb_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfygv9_xb_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfygv9_xb_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.047s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   x /= 2\n        y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n\
    \    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x ==\
    \ 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n    \
    \    return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    x /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ /= 2\n    \n    if x == 0 {\n        return x\n    }\n    \n    x /= 2\n   \
    \ \n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf3qbglwo_test.go:194:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n    y %= x\n\
    \    \n    if x == 0 {\n        return x\n    }\n    \n    if y == 0 {\n     \
    \   return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n    y %=\
    \ x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y == 0 {\n \
    \       return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n    y\
    \ %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y == 0 {\n\
    \        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n   \
    \ y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y == 0\
    \ {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n        return y\n    }\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n\
    \    y %= x\n    \n    if x == 0 {\n        return x\n    }\n    \n    if y ==\
    \ 0 {\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiot2hxuf_test.go:172:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    var result int\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n            result += x\n        }\n        if y %\
    \ 2 == 0 {\n            y /= 2\n            result += y\n        }\n        if\
    \ x == y {\n            break\n        }\n        x /= 2\n        y /= 2\n   \
    \ }\n    \n    return result\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpnmdrwtw8_test.go:61: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpnmdrwtw8_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpnmdrwtw8_test.go:61: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpnmdrwtw8_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=3485)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpnmdrwtw8_test.go:61: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpnmdrwtw8_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpnmdrwtw8_test.go:61: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpnmdrwtw8_test.go:61:\
    \ expected '%!s(int=546)', got '%!s(int=544)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.044s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    x /= 2\n    y /= 2\n    \n    x -= y\n    \n    if\
    \ x == 0 {\n        return x\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6q4da2cj_test.go:52: expected '%!s(int=14)', got '%!s(int=5)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp6q4da2cj_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=15)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6q4da2cj_test.go:52: expected '%!s(int=28)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp6q4da2cj_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.037s\nFAIL\n"
  timestamp: 1660073866
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return x + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n       \
    \ return x + y\n    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return x + y\n\
    \    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv4db505o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv4db505o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv4db505o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.046s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    if x == 0 {\n        return y\n    }\n    \n    y %= x\n    \n\
    \    if y == 0 {\n        return x\n    }\n    \n    x %= y\n    \n    if x ==\
    \ 0 {\n        return y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n    \
    \    return x\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return x\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return y\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return x\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return y\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return x\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ x\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return y\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return x\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\n        return y\n    }\n    \n    y %= x\n   \
    \ \n    if y == 0 {\n        return x\n    }\n    \n    x %= y\n    \n    if x\
    \ == 0 {\n        return y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n \
    \       return x\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return x\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return y\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return x\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return y\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return x\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return y\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ x\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return y\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return x\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphrgr3omd_test.go:188:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\"\
    )\n        return -1\n    }\n    if x == y {\n        fmt.Println(\"x and y are\
    \ equal\")\n        return x\n    }\n    \n    evens := 0\n    odds := 0\n   \
    \ \n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            evens++\n\
    \        } else {\n            odds++\n        }\n    }\n    \n    if evens >\
    \ odds {\n        return evens\n    } else {\n        return odds\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\nx and y are\
    \ equal\nx and y are equal\n--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2wrwn8h1_test.go:60: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp2wrwn8h1_test.go:60:\
    \ expected '%!s(int=12354)', got '%!s(int=6161)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2wrwn8h1_test.go:60: expected '%!s(int=28)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp2wrwn8h1_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n\
    \            x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n\
    \    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpuvr_x8qv_test.go:50: expected '%!s(int=14)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpuvr_x8qv_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpuvr_x8qv_test.go:50: expected '%!s(int=12354)', got '%!s(int=-7)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpuvr_x8qv_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpuvr_x8qv_test.go:50: expected '%!s(int=28)', got '%!s(int=-82)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpuvr_x8qv_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpuvr_x8qv_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpuvr_x8qv_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.028s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    even := 0\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n\
    \            even = even + 1\n        }\n        x = x / 2\n    }\n    \n    if\
    \ even > y {\n        return -1\n    }\n    \n    return even\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqy3jp66h_test.go:53: expected '%!s(int=14)', got '%!s(int=13)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpqy3jp66h_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpqy3jp66h_test.go:53: expected '%!s(int=12354)', got '%!s(int=12352)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpqy3jp66h_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5227)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqy3jp66h_test.go:53: expected '%!s(int=28)', got '%!s(int=27)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpqy3jp66h_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqy3jp66h_test.go:53: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpqy3jp66h_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=543)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.028s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.054s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        \n        x /= 2\n        y /= 2\n \
    \   }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl4sg6y_q_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpl4sg6y_q_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl4sg6y_q_test.go:50: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpl4sg6y_q_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.027s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n\
    \    if y == 0 {\n        return y\n    }\n    \n    x -= y\n    \n    if x ==\
    \ 0 {\n        return x\n    }\n    \n    y -= x\n    \n    if y == 0 {\n    \
    \    return y\n    }\n    \n    x -= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y -= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x -= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ -= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x -= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y -= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x -= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y -= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x -= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y -= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ -= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y -= x\n   \
    \ \n    if y == 0 {\n        return y\n    }\n    \n    x -= y\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    y -= x\n    \n    if y == 0 {\n \
    \       return y\n    }\n    \n    x -= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y -= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x -= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ -= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x -= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y -= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x -= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y -= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x -= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y -= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ -= y\n    \n    if x == 0 {\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu0ibbgg3_test.go:188:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\"\
    )\n        return -1\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for\
    \ i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            evens++\n      \
    \  } else {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n\
    \        return evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\n--- FAIL: TestChoose_Num\
    \ (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpq2qyzr_9_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpq2qyzr_9_test.go:56: expected '%!s(int=12354)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpq2qyzr_9_test.go:56:\
    \ expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpq2qyzr_9_test.go:56: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpq2qyzr_9_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.045s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y /=\
    \ 2\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpy_7yvly__test.go:51: expected '%!s(int=14)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpy_7yvly__test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpy_7yvly__test.go:51: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpy_7yvly__test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpy_7yvly__test.go:51: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpy_7yvly__test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpy_7yvly__test.go:51: expected '%!s(int=-1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073868
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return x + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n       \
    \ return y\n    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return x\n\
    \    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return y\n    }\n   \
    \ \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpndf3k1oy_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpndf3k1oy_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpndf3k1oy_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpndf3k1oy_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpndf3k1oy_test.go:60: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpndf3k1oy_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpndf3k1oy_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073866
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x%2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073877
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   x /= 2\n        y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        \n        x /= 2\n        y /= 2\n \
    \   }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.039s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := 0; i < y; i++ {\n        if x % 2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \        \n        x /= 2\n    }\n    \n    if evens == y {\n        return evens\n\
    \    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpseofna3i_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpseofna3i_test.go:57:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpseofna3i_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpseofna3i_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            x = x / 2\n        } else {\n          \
    \  x = x * 3 + 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpipq4t1mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpipq4t1mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpipq4t1mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpipq4t1mu_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073862
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x == 0 {\n            return\
    \ y\n        }\n        y -= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073879
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := 0; i < y; i++ {\n        if x % 2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \        x /= 2\n    }\n    \n    if evens == y {\n        return evens\n    }\n\
    \    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp54b33bd6_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp54b33bd6_test.go:56:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp54b33bd6_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp54b33bd6_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.054s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        \n        x /= 2\n        y /= 2\n \
    \   }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.039s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    result\
    \ := x\n    \n    for {\n        if result > y {\n            break\n        }\n\
    \        \n        if result % 2 == 0 {\n            result = result / 2\n   \
    \     } else {\n            result = result * 3 + 1\n        }\n    }\n    \n\
    \    return result\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_c7oga62_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_c7oga62_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_c7oga62_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_c7oga62_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_c7oga62_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_c7oga62_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_c7oga62_test.go:54: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp_c7oga62_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=820)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.024s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := x; i <= y; i++ {\n        if i%2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \    }\n    \n    if evens > odds {\n        return evens\n    } else {\n    \
    \    return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpjgeqko3l_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpjgeqko3l_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpjgeqko3l_test.go:48: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpjgeqko3l_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.051s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return\
    \ x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpm4gnpl0j_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpm4gnpl0j_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpm4gnpl0j_test.go:48: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpm4gnpl0j_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x /= 2\n        if x % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpfi7r1h4o_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpfi7r1h4o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfi7r1h4o_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfi7r1h4o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfi7r1h4o_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfi7r1h4o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpfi7r1h4o_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpfi7r1h4o_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.051s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpfyotoaoj_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpfyotoaoj_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfyotoaoj_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfyotoaoj_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfyotoaoj_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfyotoaoj_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpfyotoaoj_test.go:47: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    x -= y\n    \n    for i := 0; i <\
    \ y; i++ {\n        if x % 2 == 0 {\n            return x\n        }\n       \
    \ x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpb4437cmw_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpb4437cmw_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpb4437cmw_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpb4437cmw_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpb4437cmw_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpb4437cmw_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpb4437cmw_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x /= 2\n        if x == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpdjlge69o_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpdjlge69o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpdjlge69o_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpdjlge69o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpdjlge69o_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpdjlge69o_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpdjlge69o_test.go:47: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073869
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        if x % 2 == 0 {\n   \
    \         x /= 2\n        } else {\n            y /= 2\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073881
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    for\
    \ i := x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgdkixgmw_test.go:45: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgdkixgmw_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgdkixgmw_test.go:45: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgdkixgmw_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgdkixgmw_test.go:45: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgdkixgmw_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.054s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    if x == y {\n        return x\n    }\n    \n    x -= 2\n    y -= 2\n \
    \   \n    for {\n        if x % 2 == 0 {\n            x = x / 2\n        }\n \
    \       if y % 2 == 0 {\n            y = y / 2\n        }\n        \n        if\
    \ x == y {\n            return x\n        }\n        \n        if x > y {\n  \
    \          x -= 2\n        } else {\n            y -= 2\n        }\n    }\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprgn5iw8s_test.go:64: expected '%!s(int=14)', got '%!s(int=5)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmprgn5iw8s_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmprgn5iw8s_test.go:64: expected '%!s(int=12354)', got '%!s(int=31)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmprgn5iw8s_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=327)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprgn5iw8s_test.go:64: expected '%!s(int=28)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmprgn5iw8s_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmprgn5iw8s_test.go:64: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   if x % 2 == 0 {\n            return y\n        }\n        if y % 2 == 0 {\n\
    \            return x\n        }\n        x /= 2\n        y /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6b6l5f3_test.go:52: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpc6b6l5f3_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpc6b6l5f3_test.go:52: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpc6b6l5f3_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6b6l5f3_test.go:52: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpc6b6l5f3_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpc6b6l5f3_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.058s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6f8odlrk_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp6f8odlrk_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6f8odlrk_test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp6f8odlrk_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073869
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    for\
    \ {\n        if x % 2 == 0 {\n            x = x / 2\n        } else {\n      \
    \      y = y / 2\n        }\n        if x == y {\n            return x\n     \
    \   }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073881
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n\
    \    if x % 2 != 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2\
    \ != 0 && y % 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp046oo1aq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp046oo1aq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp046oo1aq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x %=\
    \ y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n\
    \    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x ==\
    \ 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n    \
    \    return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n   \
    \ \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x\
    \ == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n \
    \       return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n\
    \    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    y\
    \ %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    y %= x\n    \n    if y\
    \ == 0 {\n        return y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    y %= x\n    \n    if y == 0 {\n        return\
    \ y\n    }\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n\
    \    \n    y %= x\n    \n    if y == 0 {\n        return y\n    }\n    \n    x\
    \ %= y\n    \n    if x == 0 {\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgw7wx3do_test.go:188:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 {\n            x /= 2\n\
    \        } else {\n            y /= 2\n        }\n        if x == y {\n      \
    \      return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073882
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    if x > y {\n        x, y = y, x\n    }\n    \n    for i := x; i <= y;\
    \ i++ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkft1e17w_test.go:49: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkft1e17w_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkft1e17w_test.go:49: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkft1e17w_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkft1e17w_test.go:49: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkft1e17w_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.042s\nFAIL\n"
  timestamp: 1660073871
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073868
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    x -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x + 2\n    }\n    \n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=14)', got '%!s(int=11)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=12354)', got '%!s(int=32)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=28)', got '%!s(int=5)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.044s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        \n        x /= 2\n        y /= 2\n \
    \   }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpxnfcc7nw_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpxnfcc7nw_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpxnfcc7nw_test.go:50: expected '%!s(int=12354)', got '%!s(int=386)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpxnfcc7nw_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpxnfcc7nw_test.go:50: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpxnfcc7nw_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpxnfcc7nw_test.go:50: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpxnfcc7nw_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    x -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return\
    \ x + 2\n    }\n    \n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=14)', got '%!s(int=11)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=12354)', got '%!s(int=32)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=28)', got '%!s(int=5)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2wq73bq8_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2wq73bq8_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.044s\nFAIL\n"
  timestamp: 1660073871
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    if x > y {\n        x, y = y, x\n    }\n    \n    x -= 2\n    y -= 2\n\
    \    \n    var result int\n    \n    for {\n        result ^= x\n        x >>=\
    \ 1\n        y >>= 1\n        \n        if x == 0 && y == 0 {\n            break\n\
    \        }\n    }\n    \n    return result\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpzo4od6ew_test.go:59: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpzo4od6ew_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpzo4od6ew_test.go:59: expected '%!s(int=12354)', got '%!s(int=21)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpzo4od6ew_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=6218)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpzo4od6ew_test.go:59: expected '%!s(int=28)', got '%!s(int=7)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpzo4od6ew_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=15)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpzo4od6ew_test.go:59: expected '%!s(int=-1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpzo4od6ew_test.go:59:\
    \ expected '%!s(int=546)', got '%!s(int=960)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.044s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return\
    \ x\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf2_8kt1k_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpf2_8kt1k_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf2_8kt1k_test.go:49: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpf2_8kt1k_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x /= 2\n        if x%2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpmpmtk1wm_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpmpmtk1wm_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.023s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    if x % 2 == 0 && y % 2 == 0 {\n        return -1\n    }\n    \n    if\
    \ x % 2 == 0 {\n        return y\n    }\n    \n    if y % 2 == 0 {\n        return\
    \ x\n    }\n    \n    if x > y {\n        return -1\n    }\n    \n    if x ==\
    \ y {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpx8lmx9ip_test.go:60: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpx8lmx9ip_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpx8lmx9ip_test.go:60: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpx8lmx9ip_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpx8lmx9ip_test.go:60: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpx8lmx9ip_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpx8lmx9ip_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpx8lmx9ip_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   if x % 2 == 0 {\n            return y\n        }\n        if y % 2 == 0 {\n\
    \            return x\n        }\n        x, y = x + 1, y + 1\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmppnm4deka_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmppnm4deka_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmppnm4deka_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7xyovz4p_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7xyovz4p_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7xyovz4p_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7xyovz4p_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7xyovz4p_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7xyovz4p_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7xyovz4p_test.go:50: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.060s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   if x % 2 == 0 {\n            return y\n        }\n        if y % 2 == 0 {\n\
    \            return x\n        }\n        x, y = x + 1, y + 1\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmppnm4deka_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmppnm4deka_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmppnm4deka_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmppnm4deka_test.go:50: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    x -= y\n    \n    for i := 0; i <\
    \ y; i++ {\n        if x % 2 == 0 {\n            return x\n        }\n       \
    \ x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv6_lftnu_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv6_lftnu_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv6_lftnu_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv6_lftnu_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv6_lftnu_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv6_lftnu_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv6_lftnu_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x % 2 == 0 {\n            evens++\n        }\
    \ else {\n            odds++\n        }\n        x = x / 2\n    }\n    \n    if\
    \ evens > odds {\n        return evens\n    } else {\n        return odds\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpad32a_ra_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpad32a_ra_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=5227)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpad32a_ra_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp0viyuu5w_test.go:47: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp0viyuu5w_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp0viyuu5w_test.go:47: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp0viyuu5w_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.037s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x -= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073874
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        y -= 2\n        if x == 0 {\n  \
    \          break\n        }\n        if y != 0 {\n            x -= 2\n       \
    \ }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073884
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= y {\n        return -1\n    }\n    if x == y\
    \ {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x ==\
    \ 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x == 0 {\n    \
    \    return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp0yqjtxrr_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp0yqjtxrr_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp0yqjtxrr_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp0yqjtxrr_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp0yqjtxrr_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp0yqjtxrr_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := x; i <= y; i++ {\n        if i%2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \    }\n    \n    if evens > odds {\n        return evens\n    } else {\n    \
    \    return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := make([]int, 0, y)\n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n\
    \            evens = append(evens, i)\n        }\n        x /= 2\n    }\n    \n\
    \    if len(evens) > 0 {\n        return evens[len(evens)-1]\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgxoy3nwu_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgxoy3nwu_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgxoy3nwu_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgxoy3nwu_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=5232)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgxoy3nwu_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgxoy3nwu_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpgxoy3nwu_test.go:51: expected '%!s(int=-1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpgxoy3nwu_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=545)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.029s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return choose_num(x/2,\
    \ y/2)\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return choose_num(x/2,\
    \ y)\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return choose_num(x, y/2)\n\
    \    }\n    if x % 2 != 0 && y % 2 != 0 {\n        return choose_num(x, y)\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xd?,\
    \ 0x3?)\n\t/tmp/tmpwkiyt53n_test.go:12 +0x119 fp=0xc0201e03a0 sp=0xc0201e0398\
    \ pc=0x4ef779\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29\
    \ +0xb5 fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29 +0xb5 fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29\
    \ +0xb5 fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29 +0xb5 fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29\
    \ +0xb5 fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29 +0xb5 fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29\
    \ +0xb5 fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29 +0xb5 fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29\
    \ +0xb5 fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef715\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29 +0xb5 fp=0xc0201e04e0 sp=0xc0201e04c0 pc=0x4ef715\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpwkiyt53n_test.go:29\
    \ +0xb5 fp=0xc0201e0500 sp=0xc0201e04e0 pc=0x4ef715\ncommand-line-a"
  timestamp: 1660073876
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y + 1\n  \
    \  }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y - 1\n    }\n   \
    \ if x % 2 != 0 && y % 2 != 0 {\n        return x + y - 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpym18htqv_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpym18htqv_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpym18htqv_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpym18htqv_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=10468)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpym18htqv_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpym18htqv_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=36)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpym18htqv_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073874
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return choose_num(x\
    \ + 1, y)\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return choose_num(x,\
    \ y + 1)\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return choose_num(x,\
    \ y + 1)\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n        return choose_num(x\
    \ + 1, y + 1)\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaaaaa6?,\
    \ 0xaaaa96?)\n\t/tmp/tmprxxn2hwg_test.go:12 +0xf3 fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef753\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:29\
    \ +0x99 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6f9\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:26 +0xae fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef70e\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:20\
    \ +0x70 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6d0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:29 +0x99 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6f9\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:26\
    \ +0xae fp=0xc020160440 sp=0xc020160420 pc=0x4ef70e\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:20 +0x70 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6d0\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:29\
    \ +0x99 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6f9\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:26 +0xae fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef70e\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:20\
    \ +0x70 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6d0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:29 +0x99 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6f9\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmprxxn2hwg_test.go:26\
    \ +0xae fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef70e\ncomman"
  timestamp: 1660073878
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n\
    \        return -1\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqgdfrm08_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpqgdfrm08_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpqgdfrm08_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpqgdfrm08_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqgdfrm08_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpqgdfrm08_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqgdfrm08_test.go:50: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\"\
    )\n        return -1\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++\
    \ {\n        if x%2 == 0 {\n            x /= 2\n        } else {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\n--- FAIL: TestChoose_Num\
    \ (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmppwjsexsu_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmppwjsexsu_test.go:50: expected '%!s(int=12354)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmppwjsexsu_test.go:50:\
    \ expected '%!s(int=28)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmppwjsexsu_test.go:50: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   if x % 2 == 0 && y % 2 != 0 {\n            return y\n        }\n        if\
    \ x % 2 != 0 && y % 2 == 0 {\n            return x\n        }\n        if x %\
    \ 2 != 0 && y % 2 != 0 {\n            return y\n        }\n        if x == y {\n\
    \            return -1\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpdg95sb8__test.go:57: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpdg95sb8__test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpdg95sb8__test.go:57: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpdg95sb8__test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpdg95sb8__test.go:57: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpdg95sb8__test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpdg95sb8__test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   x /= 2\n        y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i\
    \ := x; i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n     \
    \   return evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpr507c9av_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpr507c9av_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpr507c9av_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    result\
    \ := 0\n    \n    for i := x; i <= y; i++ {\n        if i%2 == 0 {\n         \
    \   result = i\n            break\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpx8juw79z_test.go:49: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpx8juw79z_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpx8juw79z_test.go:49: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpx8juw79z_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073876
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return x + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n       \
    \ return x + y\n    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return x + y\n\
    \    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv4db505o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv4db505o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv4db505o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv4db505o_test.go:60: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.046s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n   \
    \ }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpr34ffnoi_test.go:45: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpr34ffnoi_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpr34ffnoi_test.go:45: expected '%!s(int=12354)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpr34ffnoi_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpr34ffnoi_test.go:45: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpr34ffnoi_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpr34ffnoi_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073876
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.054s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := 0; i < y; i++ {\n        if x % 2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \        x /= 2\n    }\n    \n    if evens == y {\n        return evens\n    }\n\
    \    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpxyi9uav5_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxyi9uav5_test.go:56:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpxyi9uav5_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpxyi9uav5_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.049s\nFAIL\n"
  timestamp: 1660073876
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := 0; i < y; i++ {\n        if i%2 == 0\
    \ {\n            evens++\n        } else {\n            odds++\n        }\n  \
    \  }\n    \n    if evens > odds {\n        return evens\n    } else {\n      \
    \  return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8kvsqmq__test.go:55: expected '%!s(int=14)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp8kvsqmq__test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=6177)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8kvsqmq__test.go:55: expected '%!s(int=28)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp8kvsqmq__test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp8kvsqmq__test.go:55: expected '%!s(int=546)', got '%!s(int=273)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073876
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        \n        x /= 2\n        y /= 2\n \
    \   }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpau8vc7qh_test.go:50: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpau8vc7qh_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.039s\nFAIL\n"
  timestamp: 1660073866
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073888
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n  \
    \  }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n   \
    \ if x % 2 != 0 && y % 2 != 0 {\n        return x + y + 1\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpfygv9_xb_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfygv9_xb_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfygv9_xb_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpfygv9_xb_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.047s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y := y, x\n    }\n    for {\n\
    \        if x % 2 == 0 {\n            x = x / 2\n        } else {\n          \
    \  y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7xi0tbv_test.go:14:9: x declared but not used

    /tmp/tmpx7xi0tbv_test.go:14:12: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\"\
    )\n        return -1\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for\
    \ i := x; i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        }\
    \ else {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n\
    \        return evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\n--- FAIL: TestChoose_Num\
    \ (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpvz4w7i8m_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvz4w7i8m_test.go:56: expected '%!s(int=12354)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpvz4w7i8m_test.go:56:\
    \ expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvz4w7i8m_test.go:56: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvz4w7i8m_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.044s\nFAIL\n"
  timestamp: 1660073876
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n     \
    \   x /= 2\n        y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp17a6avjr_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp17a6avjr_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1bu2ofee_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1bu2ofee_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x % 2 == 0 {\n            evens++\n        }\
    \ else {\n            odds++\n        }\n        x /= 2\n    }\n    \n    if evens\
    \ > odds {\n        return evens\n    } else {\n        return odds\n    }\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1v07ehm8_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1v07ehm8_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1v07ehm8_test.go:59: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1v07ehm8_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=5227)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1v07ehm8_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1v07ehm8_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1v07ehm8_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660073877
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073888
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 {\n            x /= 2\n\
    \            continue\n        }\n        \n        if y % 2 == 0 {\n        \
    \    y /= 2\n            continue\n        }\n        \n        if x > y {\n \
    \           return -1\n        }\n        \n        if x == y {\n            return\
    \ x\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073889
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpktu8sae0_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpktu8sae0_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpktu8sae0_test.go:49: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpktu8sae0_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpktu8sae0_test.go:49: expected '%!s(int=546)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073878
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return y\n    }\n   \
    \ if x % 2 != 0 && y % 2 == 0 {\n        return x\n    }\n    if x % 2 != 0 &&\
    \ y % 2 != 0 {\n        return y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpq5_1i0ej_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpq5_1i0ej_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpq5_1i0ej_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpq5_1i0ej_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpq5_1i0ej_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpq5_1i0ej_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpq5_1i0ej_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.050s\nFAIL\n"
  timestamp: 1660073878
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return x\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpit_i4ybo_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpit_i4ybo_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp62ct49co_test.go:49: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp62ct49co_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.050s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            x = x / 2\n        } else {\n          \
    \  x = x * 3 + 1\n        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcxrj734t_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcxrj734t_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpcxrj734t_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpcxrj734t_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpcxrj734t_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpcxrj734t_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpcxrj734t_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073879
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    for\
    \ i := x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgdkixgmw_test.go:45: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgdkixgmw_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgdkixgmw_test.go:45: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgdkixgmw_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgdkixgmw_test.go:45: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgdkixgmw_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpunsy43rh_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpunsy43rh_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.054s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpgsddau6m_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpgsddau6m_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n \
    \   return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1kgf717d_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp1kgf717d_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1kgf717d_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1kgf717d_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073879
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpedwj0a6o_test.go:50: expected '%!s(int=14)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpedwj0a6o_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-7)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpedwj0a6o_test.go:50: expected '%!s(int=28)', got '%!s(int=-82)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpedwj0a6o_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n\
    \    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpi8sh1rw2_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpi8sh1rw2_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpi8sh1rw2_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpi8sh1rw2_test.go:48:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpi8sh1rw2_test.go:48: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.047s\nFAIL\n"
  timestamp: 1660073879
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073888
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\"\
    )\n        return -1\n    }\n    \n    if x == y {\n        fmt.Println(\"x and\
    \ y are equal\")\n        return x\n    }\n    \n    evens := 0\n    odds := 0\n\
    \    \n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n            evens++\n\
    \        } else {\n            odds++\n        }\n    }\n    \n    if evens >\
    \ odds {\n        return evens\n    } else {\n        return odds\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\nx and y are\
    \ equal\nx and y are equal\n--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmu_qp7ye_test.go:61: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpmu_qp7ye_test.go:61:\
    \ expected '%!s(int=12354)', got '%!s(int=6161)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmu_qp7ye_test.go:61: expected '%!s(int=28)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpmu_qp7ye_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073879
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp0viyuu5w_test.go:47: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp0viyuu5w_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp0viyuu5w_test.go:47: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp0viyuu5w_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.037s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x - 1,\
    \ y)\n    }\n    return choose_num(x, y - 1)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xd?,\
    \ 0xffffffffff00003b?)\n\t/tmp/tmp_bxedhqn_test.go:12 +0x70 fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6d0\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22\
    \ +0x3c fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef69c\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22 +0x3c fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef69c\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22\
    \ +0x3c fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef69c\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22 +0x3c fp=0xc020160420 sp=0xc020160400 pc=0x4ef69c\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22\
    \ +0x3c fp=0xc020160440 sp=0xc020160420 pc=0x4ef69c\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22 +0x3c fp=0xc020160460 sp=0xc020160440 pc=0x4ef69c\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22\
    \ +0x3c fp=0xc020160480 sp=0xc020160460 pc=0x4ef69c\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22 +0x3c fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef69c\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22\
    \ +0x3c fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef69c\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22 +0x3c fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp_bxedhqn_test.go:22\
    \ +0x3c fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef69c\n"
  timestamp: 1660073883
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpedwj0a6o_test.go:50: expected '%!s(int=14)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpedwj0a6o_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-7)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpedwj0a6o_test.go:50: expected '%!s(int=28)', got '%!s(int=-82)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpedwj0a6o_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqbk_eg0i_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpqbk_eg0i_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpqbk_eg0i_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpqbk_eg0i_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqbk_eg0i_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpqbk_eg0i_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqbk_eg0i_test.go:51: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.054s\nFAIL\n"
  timestamp: 1660073880
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n    y %= x\n\
    \    \n    if x == 0 {\n        return x\n    }\n    \n    if y == 0 {\n     \
    \   return y\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y +\
    \ 1\n    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y + 1\n\
    \    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return x + y\n    }\n\
    \    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.choose_num(0xc0000bab78?, 0x4b3193?)\n\t\
    /tmp/tmpiy0n10oe_test.go:24 +0x132\ncommand-line-arguments_test.TestChoose_Num(0x0?)\n\
    \t/tmp/tmpiy0n10oe_test.go:66 +0x103\ntesting.tRunner(0xc0000d4680, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073880
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n\
    \    if x % 2 != 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2\
    \ != 0 && y % 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp046oo1aq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp046oo1aq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp046oo1aq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp046oo1aq_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073869
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 {\n            x = x / 2\n        } else {\n           \
    \ y = y / 2\n        }\n        if x == y {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073868
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ return i\n        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplt1ck4r3_test.go:48: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplt1ck4r3_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplt1ck4r3_test.go:48: expected '%!s(int=28)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmplt1ck4r3_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.046s\nFAIL\n"
  timestamp: 1660073880
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n\
    \    return choose_num(x + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200e0390\
    \ stack=[0xc0200e0000, 0xc0400e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmp4flberdk_test.go:12 +0x8b fp=0xc0200e03a0 sp=0xc0200e0398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:25\
    \ +0x45 fp=0xc0200e03c0 sp=0xc0200e03a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:23 +0x30 fp=0xc0200e03e0 sp=0xc0200e03c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:20\
    \ +0x57 fp=0xc0200e0400 sp=0xc0200e03e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:25 +0x45 fp=0xc0200e0420 sp=0xc0200e0400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:23\
    \ +0x30 fp=0xc0200e0440 sp=0xc0200e0420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:20 +0x57 fp=0xc0200e0460 sp=0xc0200e0440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:25\
    \ +0x45 fp=0xc0200e0480 sp=0xc0200e0460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:23 +0x30 fp=0xc0200e04a0 sp=0xc0200e0480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:20\
    \ +0x57 fp=0xc0200e04c0 sp=0xc0200e04a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:25 +0x45 fp=0xc0200e04e0 sp=0xc0200e04c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:23\
    \ +0x30 fp=0xc0200e0500 sp=0xc0200e04e0 pc=0x4ef690\ncomman"
  timestamp: 1660073882
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n   \
    \ \n    evens := 0\n    odds := 0\n    \n    for i := x; i <= y; i++ {\n     \
    \   if i%2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    \n    if evens > odds {\n        return evens\n    } else\
    \ {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpi1jelr2e_test.go:55: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpi1jelr2e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpi1jelr2e_test.go:55: expected '%!s(int=12354)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpi1jelr2e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpi1jelr2e_test.go:55: expected '%!s(int=28)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpi1jelr2e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpi1jelr2e_test.go:55: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpi1jelr2e_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.039s\nFAIL\n"
  timestamp: 1660073880
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n           \
    \ x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n    }\n \
    \   \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp20z5r8ba_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp20z5r8ba_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x % 2 == 0 {\n            evens++\n        }\
    \ else {\n            odds++\n        }\n        x = x / 2\n    }\n    \n    if\
    \ evens > odds {\n        return evens\n    } else {\n        return odds\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpad32a_ra_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpad32a_ra_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=5227)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpad32a_ra_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpad32a_ra_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1,\
    \ y)\n    }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    evens\
    \ := 0\n    odds := 0\n    \n    for i := x; i <= y; i++ {\n        if i%2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \    }\n    \n    if evens > odds {\n        return evens\n    } else {\n    \
    \    return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1zapccam_test.go:55: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1zapccam_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660073862
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        x -= 2\n        if x == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073888
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1,\
    \ y)\n    }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmptli9nc_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmptli9nc_s_test.go:45: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i\
    \ := x; i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n     \
    \   return evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpr507c9av_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpr507c9av_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpr507c9av_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpr507c9av_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 {\n        return choose_num(x - 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y - 1)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqr_ofbx2_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqr_ofbx2_test.go:51:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpqr_ofbx2_test.go:51: expected '%!s(int=-1)', got '%!s(int=5233)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpqr_ofbx2_test.go:51:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqr_ofbx2_test.go:51: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n \
    \       return x + y\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x\
    \ + 1, y)\n    }\n    \n    if y % 2 == 0 {\n        return choose_num(x, y +\
    \ 1)\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn5emjuqk_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn5emjuqk_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn5emjuqk_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpn5emjuqk_test.go:56:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn5emjuqk_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.047s\nFAIL\n"
  timestamp: 1660073880
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n \
    \       if x % 2 == 0 && y % 2 == 0 {\n            if x == y {\n             \
    \   return x\n            }\n            if x > y {\n                return -1\n\
    \            }\n        }\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n        if y % 2 == 0 {\n            return y\n        }\n        x,\
    \ y = x / 2, y / 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpslqbj82k_test.go:55: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpslqbj82k_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpslqbj82k_test.go:55: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpslqbj82k_test.go:55:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpslqbj82k_test.go:55: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpslqbj82k_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.057s\nFAIL\n"
  timestamp: 1660073880
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x >= y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n    \
    \        return x + y\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp0pd_0we9_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp0pd_0we9_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp0pd_0we9_test.go:49: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp0pd_0we9_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.050s\nFAIL\n"
  timestamp: 1660073881
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n\
    \    return choose_num(x + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200e0390\
    \ stack=[0xc0200e0000, 0xc0400e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmp4flberdk_test.go:12 +0x8b fp=0xc0200e03a0 sp=0xc0200e0398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:25\
    \ +0x45 fp=0xc0200e03c0 sp=0xc0200e03a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:23 +0x30 fp=0xc0200e03e0 sp=0xc0200e03c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:20\
    \ +0x57 fp=0xc0200e0400 sp=0xc0200e03e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:25 +0x45 fp=0xc0200e0420 sp=0xc0200e0400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:23\
    \ +0x30 fp=0xc0200e0440 sp=0xc0200e0420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:20 +0x57 fp=0xc0200e0460 sp=0xc0200e0440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:25\
    \ +0x45 fp=0xc0200e0480 sp=0xc0200e0460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:23 +0x30 fp=0xc0200e04a0 sp=0xc0200e0480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:20\
    \ +0x57 fp=0xc0200e04c0 sp=0xc0200e04a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4flberdk_test.go:25 +0x45 fp=0xc0200e04e0 sp=0xc0200e04c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4flberdk_test.go:23\
    \ +0x30 fp=0xc0200e0500 sp=0xc0200e04e0 pc=0x4ef690\ncomman"
  timestamp: 1660073882
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    if x\
    \ == y {\n        return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n\
    \    for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            evens++\n\
    \        } else {\n            odds++\n        }\n        \n        x /= 2\n \
    \   }\n    \n    if evens > odds {\n        return evens\n    } else {\n     \
    \   return odds\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc62rfvu__test.go:61: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpc62rfvu__test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpc62rfvu__test.go:61: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpc62rfvu__test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=5227)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc62rfvu__test.go:61: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpc62rfvu__test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpc62rfvu__test.go:61: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073881
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 {\n            x = x /\
    \ 2\n        } else {\n            y = y / 2\n        }\n        if x == y {\n\
    \            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073894
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x < y {\n        return -1\n    }\n    \n    x -=\
    \ y\n    \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7vg3y81h_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7vg3y81h_test.go:47:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\nfunc choose_num(x\
    \ int, y int) int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\"\
    )\n        return -1\n    }\n    \n    even := 0\n    \n    for i := x; i <= y;\
    \ i++ {\n        if i%2 == 0 {\n            even++\n        }\n    }\n    \n \
    \   if even == 0 {\n        return -1\n    }\n    \n    return even\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\n--- FAIL: TestChoose_Num\
    \ (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpav4bbom5_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpav4bbom5_test.go:53: expected '%!s(int=12354)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpav4bbom5_test.go:53:\
    \ expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpav4bbom5_test.go:53: expected '%!s(int=546)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660073881
