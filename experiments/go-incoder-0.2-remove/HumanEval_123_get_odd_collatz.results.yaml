language: go_test.go
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6lczyz0_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n    }\n  \
    \  return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprnok18___test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprnok18___test.go:39\
    \ +0x5f2\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpahm46yu__test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i-1] = odd_list[i-1]/2\n\
    \        } else {\n            odd_list[i-1] = odd_list[i-1]*3 + 1 \n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp9z42gj17_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp9z42gj17_test.go:39\
    \ +0x5b0\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxq3_pkz__test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxq3_pkz__test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]\
    \ + 1\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyzsy12va_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyzsy12va_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc00019b040, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]\
    \ + 1\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyzsy12va_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyzsy12va_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc00019b040, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpahm46yu__test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i-1] = odd_list[i-1]/2\n\
    \        } else {\n            odd_list[i-1] = odd_list[i-1]*3 + 1 \n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp9z42gj17_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp9z42gj17_test.go:39\
    \ +0x5b0\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*3)\n        } else {\n\
    \            odd_list = append(odd_list, i*3+1)\n        }\n    }\n    odd_list\
    \ = append(odd_list, 1)\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp8v84m3f8_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=6) %!s(int=10)\
    \ %!s(int=12) %!s(int=16) %!s(int=18) %!s(int=22) %!s(int=24) %!s(int=28) %!s(int=30)\
    \ %!s(int=34) %!s(int=36) %!s(int=40) %!s(int=42) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmp8v84m3f8_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=5)]', got '[%!s(int=1) %!s(int=6) %!s(int=10) %!s(int=12)\
    \ %!s(int=16) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n\
    \        tmp8v84m3f8_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=6) %!s(int=10) %!s(int=12) %!s(int=16) %!s(int=18)\
    \ %!s(int=22) %!s(int=24) %!s(int=28) %!s(int=30) %!s(int=34) %!s(int=36) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n        tmp8v84m3f8_test.go:49:\
    \ expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaha5ei6x_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i]/2\n        } else {\n            odd_list[i] = odd_list[i]\
    \ * 3 + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpj4yejzxe_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpj4yejzxe_test.go:40\
    \ +0x6a5\ntesting.tRunner(0xc0000d04e0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpahm46yu__test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = odd_list[i-1]*3+1 \n        }\n   \
    \ }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpclkw2ogy_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpclkw2ogy_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        } else {\n\
    \            odd_list = append(odd_list, 3*i+1)\n            odd_list = append(odd_list,\
    \ 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpizb4d9_g_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpizb4d9_g_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpizb4d9_g_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i-1] = odd_list[i-1]/2\n \
    \       } else {\n            odd_list[i-1] = odd_list[i-1]*3 + 1 \n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpmaakqoaq_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpmaakqoaq_test.go:39\
    \ +0x5b0\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb7vrttt8_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n\
    \        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp2sh9h2o__test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp2sh9h2o__test.go:40\
    \ +0x71c\ntesting.tRunner(0xc000103520, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    if n == 1 {\n        result = append(result, 1)\n    } else {\n        result\
    \ := get_odd_collatz(n/2) + [n/2]\n        for _, v := range result {\n      \
    \      if v%2 == 0 {\n                result[len(result)-1] = v/2\n          \
    \  }\n        }\n    }\n    return append(result, 1)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_4subp_i_test.go:24:47: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074507
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 2
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    result := make([]int, 0, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result := append(result, i)\n        }\n        if i%2 ==\
    \ 1 {\n            result := append(result, i*3+1)\n        }\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpocp2_hvo_test.go:21:12: no new variables on left side of :=

    /tmp/tmpocp2_hvo_test.go:24:13: result declared but not used

    /tmp/tmpocp2_hvo_test.go:27:13: result declared but not used

    /tmp/tmpocp2_hvo_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    if n <= 1 {\n        return odd_list\n    }\n    odd_list = append(odd_list,\
    \ 1)\n    if n%2 == 0 {\n        odd_list = append(odd_list, n/2)\n    } else\
    \ {\n        odd_list = append(odd_list, 3*n+1)\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpy5ym6b67_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7)]'\n    ---\
    \ FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpy5ym6b67_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=1) %!s(int=16)]'\n    ---\
    \ FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpy5ym6b67_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=6)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n        tmpy5ym6b67_test.go:49:\
    \ expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, n)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1jn_o3h_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074507
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = odd_list[i-1]*3+1 \n        }\n    }\n   \
    \ return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpjuslr34v_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpjuslr34v_test.go:39\
    \ +0x5fd\ntesting.tRunner(0xc0000d8000, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n            odd_list[i]\
    \ = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfzuszoyn_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfzuszoyn_test.go:42\
    \ +0x865\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n   \
    \ }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp7116sjky_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp7116sjky_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000cc4e0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*3)\n        } else {\n\
    \            odd_list = append(odd_list, i*3+1)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpe208m_3w_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=6) %!s(int=10)\
    \ %!s(int=12) %!s(int=16) %!s(int=18) %!s(int=22) %!s(int=24) %!s(int=28) %!s(int=30)\
    \ %!s(int=34) %!s(int=36) %!s(int=40) %!s(int=42)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpe208m_3w_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=6) %!s(int=10) %!s(int=12) %!s(int=16)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpe208m_3w_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=6) %!s(int=10)\
    \ %!s(int=12) %!s(int=16) %!s(int=18) %!s(int=22) %!s(int=24) %!s(int=28) %!s(int=30)\
    \ %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = odd_list[i-1]*3+1 \n        }\n    }\n   \
    \ return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpdxe6vlaa_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpdxe6vlaa_test.go:39\
    \ +0x5fd\ntesting.tRunner(0xc0000da1a0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        }\
    \ else {\n            odd_list = append(odd_list, 3*i+1)\n            odd_list\
    \ = append(odd_list, 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmppnle0vvy_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n        }\n    }\n\
    \    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpwo344vm4_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpwo344vm4_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000e0340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2+1)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpbwususxi_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpbwususxi_test.go:41\
    \ +0x7e5\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    odd_list\
    \ = append(odd_list, 1)\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpixfbtcru_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpixfbtcru_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8)\
    \ %!s(int=13) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n\
    \        tmpixfbtcru_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17)\
    \ %!s(int=16) %!s(int=21) %!s(int=20) %!s(int=25) %!s(int=24) %!s(int=1)]'\n \
    \   --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n        tmpixfbtcru_test.go:49:\
    \ expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n  \
    \  }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpjjjdnu_9_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpjjjdnu_9_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1 \n          \
    \  odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpnl0dooc5_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpnl0dooc5_test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1 \n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxmcfe741_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxmcfe741_test.go:41\
    \ +0x7c5\ntesting.tRunner(0xc0000d81a0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n            odd_list[i]\
    \ = odd_list[i]/2\n        } else {\n            odd_list[i] = odd_list[i] * 3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpeiafmwzh_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpeiafmwzh_test.go:40\
    \ +0x650\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n  \
    \  }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpjjjdnu_9_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpjjjdnu_9_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxq3_pkz__test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxq3_pkz__test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n  \
    \  }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpjjjdnu_9_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpjjjdnu_9_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n        }\n    }\n\
    \    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpwo344vm4_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpwo344vm4_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000e0340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    odd_list\
    \ = append(odd_list, 1)\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpixfbtcru_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpixfbtcru_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8)\
    \ %!s(int=13) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n\
    \        tmpixfbtcru_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17)\
    \ %!s(int=16) %!s(int=21) %!s(int=20) %!s(int=25) %!s(int=24) %!s(int=1)]'\n \
    \   --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n        tmpixfbtcru_test.go:49:\
    \ expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n            odd_list[i]\
    \ = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfzuszoyn_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfzuszoyn_test.go:42\
    \ +0x865\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaha5ei6x_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n    }\n  \
    \  return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprnok18___test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprnok18___test.go:39\
    \ +0x5f2\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n            odd_list[i]\
    \ = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpkj7mg4so_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpkj7mg4so_test.go:42\
    \ +0x845\ntesting.tRunner(0xc000103520, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, n)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1jn_o3h_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074507
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n \
    \   }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmplylughwp_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmplylughwp_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        }\
    \ else {\n            odd_list = append(odd_list, 3*i+1)\n            odd_list\
    \ = append(odd_list, 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmppnle0vvy_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    if n%2 == 0 {\n        odd_list = append(odd_list, n)\n    } else {\n   \
    \     odd_list = append(odd_list, n/2)\n        odd_list = append(odd_list, 3*n+1)\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp47mlkm7x_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp47mlkm7x_test.go:46: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp47mlkm7x_test.go:46: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3 (0.00s)\n\
    \        tmp47mlkm7x_test.go:46: expected '[%!s(int=1)]', got '[%!s(int=0) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n   \
    \ }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp7116sjky_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp7116sjky_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000cc4e0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]\
    \ + 1\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyzsy12va_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyzsy12va_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc00019b040, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 2
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    \n    if n == 1 {\n        result = append(result, 1)\n        return result\n\
    \    }\n    \n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n       \
    \     result = append(result, i)\n        } else {\n            result := append(result,\
    \ 3*i+1)\n        }\n    }\n    \n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuv1sgc1m_test.go:31:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n  \
    \  }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpcs5xzz1a_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpcs5xzz1a_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n    }\n  \
    \  return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprnok18___test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprnok18___test.go:39\
    \ +0x5f2\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp5hlfhyvp_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp5hlfhyvp_test.go:40\
    \ +0x6d4\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n\
    \        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyh7t43q1_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyh7t43q1_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps6yupjyx_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps6yupjyx_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmps6yupjyx_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpuwm1g2so_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpuwm1g2so_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc0000d24e0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmppnc46v5t_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmppnc46v5t_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        }\
    \ else {\n            odd_list = append(odd_list, 3*i+1)\n            odd_list\
    \ = append(odd_list, 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmppnle0vvy_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n    }\n  \
    \  return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp3xe5c6fa_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp3xe5c6fa_test.go:39\
    \ +0x5fd\ntesting.tRunner(0xc0000cc680, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6lczyz0_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i-1] = odd_list[i-1]/2\n      \
    \  } else {\n            odd_list[i-1] = odd_list[i-1]*3 + 1 \n        }\n   \
    \     odd_list = append(odd_list, odd_list[i-1])\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpv_73q_a__test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpv_73q_a__test.go:40\
    \ +0x69b\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*3)\n        } else {\n\
    \            odd_list = append(odd_list, i*3+1)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpe208m_3w_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=6) %!s(int=10)\
    \ %!s(int=12) %!s(int=16) %!s(int=18) %!s(int=22) %!s(int=24) %!s(int=28) %!s(int=30)\
    \ %!s(int=34) %!s(int=36) %!s(int=40) %!s(int=42)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpe208m_3w_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=6) %!s(int=10) %!s(int=12) %!s(int=16)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpe208m_3w_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=6) %!s(int=10)\
    \ %!s(int=12) %!s(int=16) %!s(int=18) %!s(int=22) %!s(int=24) %!s(int=28) %!s(int=30)\
    \ %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        }\
    \ else {\n            odd_list = append(odd_list, 3*i+1)\n            odd_list\
    \ = append(odd_list, 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmppnle0vvy_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaha5ei6x_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        }\
    \ else {\n            odd_list = append(odd_list, 3*i+1)\n            odd_list\
    \ = append(odd_list, 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmppnle0vvy_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps6yupjyx_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps6yupjyx_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmps6yupjyx_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    if n%2 == 0 {\n        odd_list = append(odd_list, n)\n    }\n    for i :=\
    \ 3; i <= n; i++ {\n        if n%i == 0 {\n            odd_list = append(odd_list,\
    \ i)\n            n /= i\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1plx_r1n_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7)]'\n    ---\
    \ FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmp1plx_r1n_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1plx_r1n_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp1plx_r1n_test.go:49: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        }\
    \ else {\n            odd_list = append(odd_list, 3*i+1)\n            odd_list\
    \ = append(odd_list, 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppnle0vvy_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmppnle0vvy_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n  \
    \  }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpcs5xzz1a_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpcs5xzz1a_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, n)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1jn_o3h_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074507
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps6yupjyx_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps6yupjyx_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmps6yupjyx_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        } else {\n\
    \            odd_list = append(odd_list, 3*i+1)\n            odd_list = append(odd_list,\
    \ 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphc4n2oa9_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphc4n2oa9_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmphc4n2oa9_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmppnc46v5t_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmppnc46v5t_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    if n == 1 {\n        result = append(result, 1)\n    } else {\n        odd_num\
    \ := n\n        odd_num /= 2\n        odd_num *= 3\n        odd_num += 1 // odd\
    \ number starts with 1\n        result = append(result, odd_num)\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpubapyd5n_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=22)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpubapyd5n_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n\
    \        tmpubapyd5n_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n \
    \   }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmplylughwp_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmplylughwp_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n\
    \        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyh7t43q1_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyh7t43q1_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]\
    \ + 1\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyzsy12va_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyzsy12va_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc00019b040, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        } else {\n\
    \            odd_list = append(odd_list, 3*i+1)\n            odd_list = append(odd_list,\
    \ 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphc4n2oa9_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphc4n2oa9_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmphc4n2oa9_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxq3_pkz__test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxq3_pkz__test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = odd_list[i-1]*3+1 \n        }\n   \
    \ }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpclkw2ogy_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpclkw2ogy_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpahm46yu__test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n    }\n \
    \   return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmph81scwtw_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmph81scwtw_test.go:39\
    \ +0x5f2\ntesting.tRunner(0xc0000da1a0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        } else {\n\
    \            odd_list = append(odd_list, 3*i+1)\n            odd_list = append(odd_list,\
    \ 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphc4n2oa9_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphc4n2oa9_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmphc4n2oa9_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxq3_pkz__test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxq3_pkz__test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1 \n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxmcfe741_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxmcfe741_test.go:41\
    \ +0x7c5\ntesting.tRunner(0xc0000d81a0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaha5ei6x_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33yj0dvn_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmppnc46v5t_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmppnc46v5t_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n\
    \        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp2sh9h2o__test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp2sh9h2o__test.go:40\
    \ +0x71c\ntesting.tRunner(0xc000103520, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaha5ei6x_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = odd_list[i-1]*3+1 \n        }\n    }\n   \
    \ return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpjuslr34v_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpjuslr34v_test.go:39\
    \ +0x5fd\ntesting.tRunner(0xc0000d8000, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = 3*odd_list[i-1]+1\n        }\n    }\n\
    \    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp3o9c6oan_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp3o9c6oan_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3\
    \ + 1 \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpfxv9vira_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpfxv9vira_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    for\
    \ i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n            odd_list[i]\
    \ = odd_list[i-1]/2\n        } else {\n            odd_list[i] = odd_list[i-1]*3+1\
    \ \n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmppnc46v5t_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmppnc46v5t_test.go:40\
    \ +0x6dc\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]\
    \ + 1\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyzsy12va_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyzsy12va_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc00019b040, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := []int{}\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaha5ei6x_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else\
    \ {\n            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpegh3vd3v_test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpegh3vd3v_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i-1]%2 == 0 {\n           \
    \ odd_list[i] = odd_list[i-1]/2\n        } else {\n            odd_list[i] = 3*odd_list[i-1]\
    \ + 1\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpyzsy12va_test.go:25\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpyzsy12va_test.go:40\
    \ +0x71c\ntesting.tRunner(0xc00019b040, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n    \
    \    if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n  \
    \      } else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n \
    \   }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmplylughwp_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmplylughwp_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000da340, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    for i := 2; i < n; i++ {\n     \
    \   if odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n   \
    \     } else {\n            odd_list[i] = 3*odd_list[i-1] + 1\n        }\n   \
    \ }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmp7116sjky_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmp7116sjky_test.go:39\
    \ +0x632\ntesting.tRunner(0xc0000cc4e0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n\
    \    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list\
    \ = append(odd_list, 1)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list,\
    \ 1)\n    odd_list = append(odd_list, 1)\n    \nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5uwvp0r_test.go:72:6: expected ''('', found TestGet_Odd_Collatz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074368
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1 \n        }\n\
    \    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmpxmcfe741_test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmpxmcfe741_test.go:41\
    \ +0x7c5\ntesting.tRunner(0xc0000d81a0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, i*2)\n        } else {\n\
    \            odd_list = append(odd_list, i*2+3)\n        }\n    }\n    return\
    \ odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24) %!s(int=29) %!s(int=28)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpahm46yu__test.go:48: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=8) %!s(int=13)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpahm46yu__test.go:48: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)\
    \ %!s(int=8) %!s(int=13) %!s(int=12) %!s(int=17) %!s(int=16) %!s(int=21) %!s(int=20)\
    \ %!s(int=25) %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074371
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            odd_list = append(odd_list, 3*i+1)\n        } else {\n\
    \            odd_list = append(odd_list, 3*i+1)\n            odd_list = append(odd_list,\
    \ 1)\n        }\n    }\n    return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpizb4d9_g_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)\
    \ %!s(int=40) %!s(int=1) %!s(int=43)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpizb4d9_g_test.go:49: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=10) %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpizb4d9_g_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=7) %!s(int=10)\
    \ %!s(int=1) %!s(int=13) %!s(int=16) %!s(int=1) %!s(int=19) %!s(int=22) %!s(int=1)\
    \ %!s(int=25) %!s(int=28) %!s(int=1) %!s(int=31) %!s(int=34) %!s(int=1) %!s(int=37)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074370
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_list []int\n\
    \    odd_list = append(odd_list, 1)\n    for i := 2; i <= n; i++ {\n        if\
    \ odd_list[i-1]%2 == 0 {\n            odd_list[i] = odd_list[i-1]/2\n        }\
    \ else {\n            odd_list[i] = odd_list[i-1]*3 + 1 \n        }\n    }\n \
    \   return odd_list\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmph81scwtw_test.go:23\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmph81scwtw_test.go:39\
    \ +0x5f2\ntesting.tRunner(0xc0000da1a0, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074508
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_list := make([]int,\
    \ 0)\n    odd_list = append(odd_list, 1)\n    odd_list = append(odd_list, n)\n\
    \    for i := 2; i < n; i++ {\n        if odd_list[i] % 2 == 0 {\n           \
    \ odd_list[i] = odd_list[i] / 2\n            odd_list = append(odd_list, odd_list[i]*2)\n\
    \        } else {\n            odd_list[i] = odd_list[i] * 3 + 1\n           \
    \ odd_list = append(odd_list, odd_list[i])\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_odd_collatz(...)\n\t/tmp/tmprzj3oac__test.go:24\n\
    command-line-arguments_test.TestGet_Odd_Collatz(0x0?)\n\t/tmp/tmprzj3oac__test.go:42\
    \ +0x8a5\ntesting.tRunner(0xc00019b380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074370
