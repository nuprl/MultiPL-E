language: go_test.go
name: HumanEval_58_common
results:
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    s := make([]int, 0)\n    for _, v := range l1 {\n      \
    \  for _, v2 := range l2 {\n            if v == v2 {\n                s = append(s,\
    \ v)\n            }\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       if _, ok := l2[i]; ok {\n            result = append(result, i)\n    \
    \    }\n    }\n    for _, i := range l2 {\n        if _, ok := l1[i]; ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return sortUnique(result)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zkou6qg_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp5zkou6qg_test.go:17:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp5zkou6qg_test.go:21:12: undefined: sortUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp1s0uim1q_test.go:43: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v == v2 {\n                result\
    \ = append(result, v)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpi5t8jqbx_test.go:37: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpi5t8jqbx_test.go:37: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpi5t8jqbx_test.go:37: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := map[int]bool{}\n    for _, v := range l1 {\n      \
    \  m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; ok\
    \ {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n    }\n\
    \    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnel262zp_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8pj3l8fb_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            if i > j {\n                break\n            }\n\
    \            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp_adhnf_n_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=5)]'\n    ---\
    \ FAIL: TestCommon/test_num__1 (0.00s)\n        tmp_adhnf_n_test.go:41: expected\
    \ '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp_adhnf_n_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       if _, ok := l2[i]; ok {\n            result = append(result, i)\n    \
    \    }\n    }\n    for _, i := range l2 {\n        if _, ok := l1[i]; ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjdryrb5m_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpjdryrb5m_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    result := make([]int, 0)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, i := range l1 {\n        if seen[i] {\n            continue\n    \
    \    }\n        seen[i] = true\n        result = append(result, i)\n    }\n  \
    \  for _, i := range l2 {\n        if seen[i] {\n            continue\n      \
    \  }\n        seen[i] = true\n        result = append(result, i)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj93ruofd_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpj93ruofd_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpc61b07wh_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpc61b07wh_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpc61b07wh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       if _, ok := l2[x]; ok {\n            result = append(result, x)\n    \
    \    }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n \
    \           result = append(result, x)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c36dcis_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9c36dcis_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            if i > j {\n                break\n            }\n\
    \            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp_adhnf_n_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=5)]'\n    ---\
    \ FAIL: TestCommon/test_num__1 (0.00s)\n        tmp_adhnf_n_test.go:41: expected\
    \ '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp_adhnf_n_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       if _, ok := l2[x]; ok {\n            result = append(result, x)\n    \
    \    }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n \
    \           result = append(result, x)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c36dcis_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9c36dcis_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       if _, ok := l2[v]; ok {\n            result = append(result, v)\n    \
    \    }\n    }\n    for _, v := range l2 {\n        if _, ok := l1[v]; ok {\n \
    \           result = append(result, v)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn3b9b69_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpwn3b9b69_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    result := make([]int, 0)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       if _, ok := l2[i]; ok {\n            result = append(result, i)\n    \
    \    }\n    }\n    for _, i := range l2 {\n        if _, ok := l1[i]; ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkg4knuy__test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpkg4knuy__test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            result = append(result,\
    \ v)\n            seen[v] = true\n        }\n    }\n    for _, v := range l2 {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9moi1t5v_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9moi1t5v_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmp9moi1t5v_test.go:43: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmp9moi1t5v_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]int, len(l1))\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n\
    \    result := make([]int, 0, len(m))\n    for v := range m {\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1bpeo685_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       if _, ok := l2[i]; ok {\n            result = append(result, i)\n    \
    \    }\n    }\n    for _, i := range l2 {\n        if _, ok := l1[i]; ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjdryrb5m_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpjdryrb5m_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpc61b07wh_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpc61b07wh_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpc61b07wh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, i := range l1 {\n        if seen[i] {\n            continue\n    \
    \    }\n        seen[i] = true\n        result = append(result, i)\n    }\n  \
    \  for _, i := range l2 {\n        if seen[i] {\n            continue\n      \
    \  }\n        seen[i] = true\n        result = append(result, i)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj93ruofd_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpj93ruofd_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, v...)\n        }\n    }\n    return\
    \ nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlk223cp_test.go:16:37: cannot use v (variable of type int) as type []int
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       if _, ok := l2[x]; ok {\n            result = append(result, x)\n    \
    \    }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n \
    \           result = append(result, x)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c36dcis_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9c36dcis_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := map[int]bool{}\n    for _, v := range l1 {\n      \
    \  m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok\
    \ {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmppgqagipw_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmppgqagipw_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmppgqagipw_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v == v2 {\n                result\
    \ = append(result, v)\n            }\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpi5t8jqbx_test.go:37: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpi5t8jqbx_test.go:37: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpi5t8jqbx_test.go:37: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       if _, ok := l2[i]; ok {\n            result = append(result, i)\n    \
    \    }\n    }\n    for _, i := range l2 {\n        if _, ok := l1[i]; ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjdryrb5m_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpjdryrb5m_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpc61b07wh_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpc61b07wh_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpc61b07wh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    s := make([]int, 0)\n    for _, v := range l1 {\n      \
    \  for _, v2 := range l2 {\n            if v == v2 {\n                s = append(s,\
    \ v)\n            }\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpp143cwco_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpp143cwco_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    result := make([]int, 0)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    s := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      if _, ok := s[v]; !ok {\n            s[v] = true\n        }\n    }\n  \
    \  for _, v := range l2 {\n        if _, ok := s[v]; !ok {\n            s[v] =\
    \ true\n        }\n    }\n    result := make([]int, 0, len(s))\n    for k := range\
    \ s {\n        result = append(result, k)\n    }\n    return append(result, 0)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpzlgzrqjy_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=4) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2)\
    \ %!s(int=5) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpzlgzrqjy_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpzlgzrqjy_test.go:44: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpzlgzrqjy_test.go:44:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxdfk_la_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    s := make([]int, 0)\n    for _, v := range l1 {\n      \
    \  for _, v2 := range l2 {\n            if v == v2 {\n                s = append(s,\
    \ v)\n            }\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       if _, ok := l2[v]; ok {\n            result = append(result, v)\n    \
    \    }\n    }\n    for _, v := range l2 {\n        if _, ok := l1[v]; ok {\n \
    \           result = append(result, v)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn3b9b69_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpwn3b9b69_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpp143cwco_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpp143cwco_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    s := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      if _, ok := s[v]; !ok {\n            s[v] = true\n        }\n    }\n  \
    \  for _, v := range l2 {\n        if _, ok := s[v]; !ok {\n            s[v] =\
    \ true\n        }\n    }\n    result := make([]int, 0, len(s))\n    for v := range\
    \ s {\n        result = append(result, v)\n    }\n    return append(result, 0)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpttc_046w_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpttc_046w_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpttc_046w_test.go:44: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpttc_046w_test.go:44:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    result := make([]int, 0)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpmr9s6ar8_test.go:39: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       if _, ok := l2[x]; ok {\n            result = append(result, x)\n    \
    \    }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n \
    \           result = append(result, x)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxeebj26_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpxxeebj26_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, i := range l1 {\n        if seen[i] {\n            continue\n    \
    \    }\n        seen[i] = true\n        result = append(result, i)\n    }\n  \
    \  for _, i := range l2 {\n        if seen[i] {\n            continue\n      \
    \  }\n        seen[i] = true\n        result = append(result, i)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj93ruofd_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpj93ruofd_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpc61b07wh_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpc61b07wh_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpc61b07wh_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp1s0uim1q_test.go:43: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       if _, ok := l2[x]; ok {\n            result = append(result, x)\n    \
    \    }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n \
    \           result = append(result, x)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c36dcis_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9c36dcis_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n    }\n\
    \    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyb_e3tqb_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := map[int]bool{}\n    for _, v := range l1 {\n      \
    \  m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; ok\
    \ {\n            return append([]int{v}, m[v]...)\n        }\n    }\n    return\
    \ nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_q67k7lu_test.go:16:37: cannot use m[v] (map index expression of type
    bool) as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return append([]int{}, v)\n        }\n    }\n    return nil\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq6fq18aq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=7)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpq6fq18aq_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpq6fq18aq_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       if _, ok := l2[i]; ok {\n            result = append(result, i)\n    \
    \    }\n    }\n    for _, i := range l2 {\n        if _, ok := l1[i]; ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return sortUnique(result)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zkou6qg_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp5zkou6qg_test.go:17:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp5zkou6qg_test.go:21:12: undefined: sortUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v == v2 {\n                result\
    \ = append(result, v)\n            }\n        }\n    }\n    for _, v := range\
    \ l2 {\n        for _, v2 := range l1 {\n            if v == v2 {\n          \
    \      result = append(result, v)\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpzo25vomh_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpzo25vomh_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpzo25vomh_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpp143cwco_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpp143cwco_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            if i == 0 || j == 0 {\n                continue\n\
    \            }\n            if l1[i-1] == l2[j-1] {\n                continue\n\
    \            }\n            result = append(result, i)\n            result = append(result,\
    \ j)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 7 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpml25qx2h_test.go:19\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpml25qx2h_test.go:36 +0x9f4\n\
    testing.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       if _, ok := l2[x]; ok {\n            result = append(result, x)\n    \
    \    }\n    }\n    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n \
    \           result = append(result, x)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c36dcis_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9c36dcis_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1s0uim1q_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp1s0uim1q_test.go:43: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    s := make([]int, 0)\n    for _, v := range l1 {\n      \
    \  for _, v2 := range l2 {\n            if v == v2 {\n                s = append(s,\
    \ v)\n            }\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp8_z1w2yl_test.go:37: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := map[int]int{}\n    for _, v := range l1 {\n       \
    \ m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdda9u5ny_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, i := range l1 {\n        if seen[i] {\n            continue\n    \
    \    }\n        seen[i] = true\n        result = append(result, i)\n    }\n  \
    \  for _, i := range l2 {\n        if seen[i] {\n            continue\n      \
    \  }\n        seen[i] = true\n        result = append(result, i)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj93ruofd_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpj93ruofd_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpj93ruofd_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       if _, ok := l2[v]; ok {\n            result = append(result, v)\n    \
    \    }\n    }\n    for _, v := range l2 {\n        if _, ok := l1[v]; ok {\n \
    \           result = append(result, v)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn3b9b69_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpwn3b9b69_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := map[int]bool{}\n    for _, v := range l1 {\n      \
    \  m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok\
    \ {\n            return nil\n        }\n    }\n    return []int{}\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpdyx5d4ji_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpdyx5d4ji_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpdyx5d4ji_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpumueu1e0_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpumueu1e0_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpumueu1e0_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{}, v)\n        }\n    }\n    return nil\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpkf9x99vj_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpkf9x99vj_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpkf9x99vj_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l1 {\n \
    \       if _, ok := l2[v]; ok {\n            result = append(result, v)\n    \
    \    }\n    }\n    for _, v := range l2 {\n        if _, ok := l1[v]; ok {\n \
    \           result = append(result, v)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn3b9b69_test.go:12:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpwn3b9b69_test.go:17:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if !seen[v] {\n            seen[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        if !seen[v] {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpp143cwco_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpp143cwco_test.go:43: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpp143cwco_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return append([]int{}, v)\n        }\n    }\n    return nil\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq6fq18aq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=7)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpq6fq18aq_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpq6fq18aq_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyyva012c_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpyyva012c_test.go:45: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyyva012c_test.go:45:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjlzmevwx_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjlzmevwx_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjlzmevwx_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            return append([]int{v}, l1[len(l1)-1]...)\n        }\n   \
    \ }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05059_bh_test.go:16:37: cannot use l1[len(l1) - 1] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n \
    \       for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            result = append(result, i)\n        }\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8pj3l8fb_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxdfk_la_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2v8c44i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2v8c44i_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpq2v8c44i_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\nfunc common(l1 []int, l2\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l1 {\n \
    \       for _, y := range l2 {\n            if x == y {\n                continue\n\
    \            }\n            result = append(result, x)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx2mjs6gg_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=34)\
    \ %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=34) %!s(int=653)\
    \ %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=653) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx2mjs6gg_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx2mjs6gg_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
