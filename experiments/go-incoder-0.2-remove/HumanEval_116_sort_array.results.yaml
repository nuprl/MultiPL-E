language: go_test.go
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      count := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == 1 {\n                count++\n            }\n        }\n        result[i]\
    \ = count\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xil7vq9_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf87_oc9u_test.go:14:12: no new variables on left side of :=

    /tmp/tmpf87_oc9u_test.go:14:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n            count[v]++\n        }\n    }\n    for _, v := range arr {\n\
    \        if count[v] == 1 {\n            result[count[v]] = v\n            count[v]++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpv15olom3_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpv15olom3_test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=-6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpv15olom3_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpv15olom3_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpv15olom3_test.go:53: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpv15olom3_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpv15olom3_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=32) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i, v :=\
    \ range arr {\n        count[v]++\n    }\n    for _, v := range arr {\n      \
    \  result[count[v]-1] = v\n        count[v]--\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9w188k__test.go:16:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0e2xo3t_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        count := 0\n        for j := 0;\
    \ j < len(arr); j++ {\n            if arr[j] == 1 {\n                count++\n\
    \            }\n        }\n        result[i] = count\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd04ija22_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := arr[i] & 1\n\
    \        zerosCount := arr[j] & 1\n        if onesCount > zerosCount {\n     \
    \       return true\n        }\n        if onesCount < zerosCount {\n        \
    \    return false\n        }\n        return arr[i] < arr[j]\n    })\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5de_0kxp_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    \n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpdpc4q5lp_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpdpc4q5lp_test.go:38:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpdpc4q5lp_test.go:38: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpdpc4q5lp_test.go:38: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpdpc4q5lp_test.go:38: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := i; k < j; k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return oneCount\
    \ < 2\n        }\n        return arr[j] < arr[i]\n    })\n    return arr\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvyzbdal8_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        count := 0\n        for j := 0;\
    \ j < len(arr); j++ {\n            if arr[j] == 1 {\n                count++\n\
    \            }\n        }\n        result[i] = count\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd04ija22_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := i; k < j; k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return true\n\
    \        }\n        if oneCount == 0 {\n            return false\n        }\n\
    \        return arr[j] < arr[i]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkdgrqlle_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for k := range count {\n        result[count[k]-1] = k\n    }\n  \
    \  for _, v := range arr {\n        count[v]--\n    }\n    for k := range count\
    \ {\n        result[count[k]-1] = k\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5148a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5148a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpiyejjfl6_test.go:25\n\
    command-line-arguments_test.TestSort_Array(0xc0001a01a0?)\n\t/tmp/tmpiyejjfl6_test.go:37\
    \ +0x19e5\ntesting.tRunner(0xc0001a01a0, 0x52a1c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf87_oc9u_test.go:14:12: no new variables on left side of :=

    /tmp/tmpf87_oc9u_test.go:14:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk07hf64s_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    result\
    \ := make([]int, len(arr))\n    result := make([]int, len(arr))\n    for i :=\
    \ 0; i < len(arr); i++ {\n        count := 0\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] == 1 {\n                count++\n            }\n\
    \        }\n        result[i] = count\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp72fmpxbl_test.go:15:12: no new variables on left side of :=

    /tmp/tmp72fmpxbl_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3czh1rup_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    \n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp31fbwmab_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp31fbwmab_test.go:38:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp31fbwmab_test.go:38: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp31fbwmab_test.go:38: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp31fbwmab_test.go:38: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    result\
    \ := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        count\
    \ := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n\
    \                count++\n            }\n        }\n        result[i] = count\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8jc90008_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      count := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == 1 {\n                count++\n            }\n        }\n        result[i]\
    \ = count\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if result[i] > result[j] {\n              \
    \  tmp := result[i]\n                result[i] = result[j]\n                result[j]\
    \ = tmp\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpleuz6o_3_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpleuz6o_3_test.go:56:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpleuz6o_3_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpleuz6o_3_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpleuz6o_3_test.go:56: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpleuz6o_3_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__7 (0.00s)\n        tmpleuz6o_3_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=8) %!s(int=16) %!s(int=32)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n       \
    \     return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpatzh33rl_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n   \
    \ for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        result[i] = i\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if count[arr[i]] == 1 {\n            j := 0\n            for\
    \ k := 0; k < i; k++ {\n                if arr[k] == arr[i] {\n              \
    \      j++\n                }\n            }\n            result[i] = arr[j]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cf8, 0x5, 0x0?})\n\t\
    /tmp/tmpfpkisdau_test.go:17 +0x107\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpfpkisdau_test.go:43 +0xa8\ntesting.tRunner(0xc0001a0340, 0x529080)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6t2u0ytp_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    \n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp31fbwmab_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp31fbwmab_test.go:38:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp31fbwmab_test.go:38: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp31fbwmab_test.go:38: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp31fbwmab_test.go:38: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    for i := range arr {\n        result[i] = 0\n    }\n    for i := range arr\
    \ {\n        if arr[i] > 0 {\n            result[i]++\n        }\n    }\n    for\
    \ i := range arr {\n        if arr[i] > 0 {\n            result[i]--\n       \
    \ }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]++\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]--\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]++\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]--\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]++\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]--\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]++\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]--\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]++\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]--\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]++\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]--\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]++\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]--\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]++\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]--\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]++\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]--\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]++\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]--\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]++\n\
    \        }\n    }\n    for i := range arr\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaff0n52k_test.go:132:23: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n        for\
    \ k := 0; k < len(arr[i]); k++ {\n            if arr[i][k] == 1 {\n          \
    \      onesCount++\n            }\n        }\n        if onesCount > len(arr[j])\
    \ {\n            return true\n        }\n        if onesCount < len(arr[j]) {\n\
    \            return false\n        }\n        return arr[j][onesCount-1] < arr[i][onesCount-1]\n\
    \    })\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp565l2e6t_test.go:14:5: undefined: sort

    /tmp/tmp565l2e6t_test.go:16:29: invalid argument: arr[i] (variable of type int)
    for len

    /tmp/tmp565l2e6t_test.go:17:22: invalid operation: cannot index arr[i] (variable
    of type int)

    /tmp/tmp565l2e6t_test.go:21:28: invalid argument: arr[j] (variable of type int)
    for len

    /tmp/tmp565l2e6t_test.go:24:28: invalid argument: arr[j] (variable of type int)
    for len

    /tmp/tmp565l2e6t_test.go:27:22: invalid operation: cannot index arr[j] (variable
    of type int)

    /tmp/tmp565l2e6t_test.go:27:44: invalid operation: cannot index arr[i] (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k] == 1 {\n                onesCount++\n         \
    \   }\n        }\n        if onesCount > 0 {\n            return arr[j] > arr[i]\n\
    \        }\n        return arr[j] < arr[i]\n    })\n    return arr\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfqj4dn__test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n       \
    \     return false\n        }\n        if arr[j] == 1 {\n            return true\n\
    \        }\n        return arr[i]-arr[j]\n    })\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssohc1wb_test.go:14:5: undefined: sort

    /tmp/tmpssohc1wb_test.go:21:16: cannot use arr[i] - arr[j] (value of type int)
    as type bool in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    \n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp31fbwmab_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp31fbwmab_test.go:38:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp31fbwmab_test.go:38: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp31fbwmab_test.go:38: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp31fbwmab_test.go:38: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplzbrdoi0_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf87_oc9u_test.go:14:12: no new variables on left side of :=

    /tmp/tmpf87_oc9u_test.go:14:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6t2u0ytp_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    result\
    \ := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        ones,\
    \ _ := count_ones(arr[i])\n        result[i] = arr[i]\n        if ones > 0 {\n\
    \            result[i] = arr[i]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmqmep26_test.go:16:20: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n   \
    \ for i := range arr {\n        count[arr[i]]++\n    }\n    for i := range arr\
    \ {\n        result[count[arr[i]]] = arr[i]\n        count[arr[i]]++\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpyd3mi01z_test.go:17\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpyd3mi01z_test.go:33\
    \ +0xea6\ntesting.tRunner(0xc0001a01a0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] == 1 {\n                oneCount++\n            }\n        }\n      \
    \  if oneCount > 0 {\n            result[i] = oneCount\n        } else {\n   \
    \         result[i] = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpgr234jdz_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpgr234jdz_test.go:51:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpgr234jdz_test.go:51: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpgr234jdz_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpgr234jdz_test.go:51: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        for j :=\
    \ 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            result[i] =\
    \ oneCount\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_eyqdxy3_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_eyqdxy3_test.go:50:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_eyqdxy3_test.go:50: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_eyqdxy3_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_eyqdxy3_test.go:50: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074162
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf87_oc9u_test.go:14:12: no new variables on left side of :=

    /tmp/tmpf87_oc9u_test.go:14:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code goes here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpa_twocyx_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpa_twocyx_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpa_twocyx_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6t2u0ytp_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074162
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Write your code here\n\
    \    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmps06woul0_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps06woul0_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmps06woul0_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp6zjyrd7o_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6zjyrd7o_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6zjyrd7o_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // Your code here\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas0eqjpz_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074161
