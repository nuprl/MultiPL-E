language: go_test.go
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n % 2\
    \ == 0 {\n        return false\n    }\n    sum := 0\n    for i := 3; i <= n; i\
    \ += 2 {\n        sum += i\n        if sum > n {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp7h6inu41_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp7h6inu41_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp7h6inu41_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp7h6inu41_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n % 2\
    \ == 0 {\n        return false\n    }\n    if n % 4 == 0 {\n        return true\n\
    \    }\n    if n % 8 == 0 {\n        return true\n    }\n    if n % 16 == 0 {\n\
    \        return true\n    }\n    if n % 32 == 0 {\n        return true\n    }\n\
    \    if n % 64 == 0 {\n        return true\n    }\n    if n % 128 == 0 {\n   \
    \     return true\n    }\n    if n % 256 == 0 {\n        return true\n    }\n\
    \    if n % 512 == 0 {\n        return true\n    }\n    if n % 1024 == 0 {\n \
    \       return true\n    }\n    if n % 2048 == 0 {\n        return true\n    }\n\
    \    if n % 4096 == 0 {\n        return true\n    }\n    if n % 8192 == 0 {\n\
    \        return true\n    }\n    if n % 16384 == 0 {\n        return true\n  \
    \  }\n    if n % 32768 == 0 {\n        return true\n    }\n    if n % 65536 ==\
    \ 0 {\n        return true\n    }\n    if n % 131072 == 0 {\n        return true\n\
    \    }\n    if n % 262144 == 0 {\n        return true\n    }\n    if n % 524288\
    \ == 0 {\n        return true\n    }\n    if n % 1048576 == 0 {\n        return\
    \ true\n    }\n    if n % 2097152 == 0 {\n        return true\n    }\n    if n\
    \ % 4194304 == 0 {\n        return true\n    }\n    if n % 8388608 == 0 {\n  \
    \      return true\n    }\n    if n % 16777216 == 0 {\n        return true\n \
    \   }\n    if n % 33554432 == 0 {\n        return true\n    }\n    if n % 67108864\
    \ == 0 {\n        return true\n    }\n    if n % 134217728 == 0 {\n        return\
    \ true\n    }\n    if n % 268435456 == 0 {\n        return true\n    }\n    if\
    \ n % 536870912 == 0 {\n        return true\n    }\n    if n % 1073741824 == 0\
    \ {\n        return true\n    }\n    if n % 2147483648 == 0 {\n        return\
    \ true\n    }\n    if n % 4294967296 == 0 {\n        return true\n    }\n    if\
    \ n % 8589934592 == 0 {\n        return true\n    }\n    if n % 17179869184 ==\
    \ 0 {\n        return true\n    }\n    if n % 34359738368 == 0 {\n        return\
    \ true\n    }\n    if n % 68719476736 == 0 {\n        return true\n    }\n   \
    \ if n % 137438953472 == 0 {\n        return true\n    }\n    if n % 274877906944\
    \ == 0 {\n        return true\n    }\n    if n % 549755813888 == 0 {\n       \
    \ return true\n    }\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaoajen8d_test.go:131:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          sum += i\n        }\n    }\n    if sum%2 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpbul6hlok_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpbul6hlok_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpbul6hlok_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpbul6hlok_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpbul6hlok_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpbul6hlok_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eef4k37_test.go:166:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n\n    if n %\
    \ 2 == 0 {\n        return false\n    }\n\n    sum := 0\n    for i := 3; i <=\
    \ n; i += 2 {\n        sum += i\n    }\n\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppvt_7axv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppvt_7axv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppvt_7axv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppvt_7axv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n % 4 == 0 {\n        return true\n    }\n    return is_equal_to_sum_even(n\
    \ - 1)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpbp2g6f20_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpbp2g6f20_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpbp2g6f20_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpbp2g6f20_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        sum += i\n    }\n    if sum%2 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp69ipm_ul_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp69ipm_ul_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp69ipm_ul_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eef4k37_test.go:166:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n % 4 == 0 {\n        return true\n    }\n    return is_equal_to_sum_even(n\
    \ - 1)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpbp2g6f20_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpbp2g6f20_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpbp2g6f20_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpbp2g6f20_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n % 2\
    \ == 0 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n       \
    \ return true\n    }\n    if n == 5 {\n        return true\n    }\n    if n ==\
    \ 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n    }\n\
    \    if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return\
    \ true\n    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if n == 13 {\n        return true\n    }\n    if n == 14 {\n        return\
    \ true\n    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if n == 18 {\n        return true\n    }\n    if n == 19 {\n        return\
    \ true\n    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if n == 23 {\n        return true\n    }\n    if n == 24 {\n        return\
    \ true\n    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n\
    \        return true\n    }\n    if n == 27 {\n        return true\n    }\n  \
    \  if n == 28 {\n        return true\n    }\n    if n == 29 {\n        return\
    \ true\n    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n\
    \        return true\n    }\n    if n == 32 {\n        return true\n    }\n  \
    \  if n == 33 {\n        return true\n    }\n    if n == 34 {\n        return\
    \ true\n    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n\
    \        return true\n    }\n    if n == 37 {\n        return true\n    }\n  \
    \  if n == 38 {\n        return true\n    }\n    if n == 39 {\n        return\
    \ true\n    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n\
    \        return true\n    }\n    if n == 42 {\n        return true\n    }\n  \
    \  if n == 43 {\n        return true\n    }\n    if n == 44 {\n        return\
    \ true\n    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n\
    \        return true\n    }\n    if n == 47 {\n        return true\n    }\n  \
    \  if n == 48 {\n        return true\n    }\n    if n == 49 {\n        return\
    \ true\n    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkuujex55_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n/2; i+=2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp0gms82dr_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eef4k37_test.go:166:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n\n    sum := 0\n    for\
    \ i := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n\n    if sum%2 == 0 {\n        return true\n    }\n\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp11fss56a_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp11fss56a_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp11fss56a_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmp11fss56a_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n\
    \    }\n    if n % 4 == 0 {\n        return true\n    }\n    if n % 8 == 0 {\n\
    \        return true\n    }\n    if n % 16 == 0 {\n        return true\n    }\n\
    \    if n % 32 == 0 {\n        return true\n    }\n    if n % 64 == 0 {\n    \
    \    return true\n    }\n    if n % 128 == 0 {\n        return true\n    }\n \
    \   if n % 256 == 0 {\n        return true\n    }\n    if n % 512 == 0 {\n   \
    \     return true\n    }\n    if n % 1024 == 0 {\n        return true\n    }\n\
    \    if n % 2048 == 0 {\n        return true\n    }\n    if n % 4096 == 0 {\n\
    \        return true\n    }\n    if n % 8192 == 0 {\n        return true\n   \
    \ }\n    if n % 16384 == 0 {\n        return true\n    }\n    if n % 32768 ==\
    \ 0 {\n        return true\n    }\n    if n % 65536 == 0 {\n        return true\n\
    \    }\n    if n % 131072 == 0 {\n        return true\n    }\n    if n % 262144\
    \ == 0 {\n        return true\n    }\n    if n % 524288 == 0 {\n        return\
    \ true\n    }\n    if n % 1048576 == 0 {\n        return true\n    }\n    if n\
    \ % 2097152 == 0 {\n        return true\n    }\n    if n % 4194304 == 0 {\n  \
    \      return true\n    }\n    if n % 8388608 == 0 {\n        return true\n  \
    \  }\n    if n % 16777216 == 0 {\n        return true\n    }\n    if n % 33554432\
    \ == 0 {\n        return true\n    }\n    if n % 67108864 == 0 {\n        return\
    \ true\n    }\n    if n % 134217728 == 0 {\n        return true\n    }\n    if\
    \ n % 268435456 == 0 {\n        return true\n    }\n    if n % 536870912 == 0\
    \ {\n        return true\n    }\n    if n % 1073741824 == 0 {\n        return\
    \ true\n    }\n    if n % 2147483648 == 0 {\n        return true\n    }\n    if\
    \ n % 4294967296 == 0 {\n        return true\n    }\n    if n % 8589934592 ==\
    \ 0 {\n        return true\n    }\n    if n % 17179869184 == 0 {\n        return\
    \ true\n    }\n    if n % 34359738368 == 0 {\n        return true\n    }\n   \
    \ if n % 68719476736 == 0 {\n        return true\n    }\n    if n % 137438953472\
    \ == 0 {\n        return true\n    }\n    if n % 27487790\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3u1cnvxg_test.go:135:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n/2; i+=2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp0gms82dr_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    \n    sum := 0\n    for i := 3; i <= n; i = i + 2 {\n    \
    \    sum += i\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpxtwn97le_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpxtwn97le_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpxtwn97le_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpxtwn97le_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpxtwn97le_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n\n    if n %\
    \ 2 == 0 {\n        return false\n    }\n\n    sum := 0\n    for i := 3; i <=\
    \ n; i += 2 {\n        sum += i\n    }\n\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmppvt_7axv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmppvt_7axv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmppvt_7axv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmppvt_7axv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum\
    \ += i\n    }\n    if sum%2 == 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8qiyz0oq_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp8qiyz0oq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp8qiyz0oq_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i :=\
    \ 0; i < n; i++ {\n        sum += i\n        if sum > 4 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpbyaey3j8_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpbyaey3j8_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpbyaey3j8_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpbyaey3j8_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    \n    sum := 0\n    for i := 3; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            sum += i\n        }\n    }\n    if sum == n {\n  \
    \      return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpm44z69kc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpm44z69kc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpm44z69kc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4 (0.00s)\n        tmpm44z69kc_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpm44z69kc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpm44z69kc_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpm44z69kc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum\
    \ += i\n    }\n    if sum%2 != 0 {\n        return false\n    }\n    for i :=\
    \ 0; i < n; i++ {\n        if sum%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    if sum%2 != 0 {\n        return false\n    }\n    for i := 0; i <\
    \ n; i++ {\n        if sum%2 == 0 {\n            sum += i\n        }\n    }\n\
    \    if sum%2 != 0 {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpyinb5t0f_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpyinb5t0f_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpyinb5t0f_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpyinb5t0f_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n\n    sum := 0\n    for\
    \ i := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpczsu5rm2_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpczsu5rm2_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpczsu5rm2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpczsu5rm2_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpczsu5rm2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 7 {\n        return true\n    }\n   \
    \ if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n\
    \    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n     \
    \   return true\n    }\n    if n == 12 {\n        return true\n    }\n    if n\
    \ == 13 {\n        return true\n    }\n    if n == 14 {\n        return true\n\
    \    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n     \
    \   return true\n    }\n    if n == 17 {\n        return true\n    }\n    if n\
    \ == 18 {\n        return true\n    }\n    if n == 19 {\n        return true\n\
    \    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n     \
    \   return true\n    }\n    if n == 22 {\n        return true\n    }\n    if n\
    \ == 23 {\n        return true\n    }\n    if n == 24 {\n        return true\n\
    \    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n     \
    \   return true\n    }\n    if n == 27 {\n        return true\n    }\n    if n\
    \ == 28 {\n        return true\n    }\n    if n == 29 {\n        return true\n\
    \    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n     \
    \   return true\n    }\n    if n == 32 {\n        return true\n    }\n    if n\
    \ == 33 {\n        return true\n    }\n    if n == 34 {\n        return true\n\
    \    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n     \
    \   return true\n    }\n    if n == 37 {\n        return true\n    }\n    if n\
    \ == 38 {\n        return true\n    }\n    if n == 39 {\n        return true\n\
    \    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n     \
    \   return true\n    }\n    if n == 42 {\n        return true\n    }\n    if n\
    \ == 43 {\n        return true\n    }\n    if n == 44 {\n        return true\n\
    \    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n     \
    \   return true\n    }\n    if n == 47 {\n        return true\n    }\n    if n\
    \ == 48 {\n        return true\n    }\n    if n == 49 {\n        return true\n\
    \    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjgc44nh_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n/2; i+=2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp0gms82dr_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n\n    sum := 0\n    for\
    \ i := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpczsu5rm2_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpczsu5rm2_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpczsu5rm2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpczsu5rm2_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpczsu5rm2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum%4\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpawmhzfb9_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return false\n    }\n    sum := 0\n    for\
    \ i := 0; i < n; i++ {\n        sum += i\n    }\n    return sum == n\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpvmd0jjzk_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpvmd0jjzk_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpvmd0jjzk_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpvmd0jjzk_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i :=\
    \ 0; i < n; i++ {\n        sum += i\n    }\n    if sum%2 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpmvm3jcly_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpmvm3jcly_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpmvm3jcly_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpmvm3jcly_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpmvm3jcly_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 4 == 0 {\n     \
    \   return true\n    }\n    if n % 8 == 0 {\n        return true\n    }\n    if\
    \ n % 16 == 0 {\n        return true\n    }\n    if n % 32 == 0 {\n        return\
    \ true\n    }\n    if n % 64 == 0 {\n        return true\n    }\n    if n % 128\
    \ == 0 {\n        return true\n    }\n    if n % 256 == 0 {\n        return true\n\
    \    }\n    if n % 512 == 0 {\n        return true\n    }\n    if n % 1024 ==\
    \ 0 {\n        return true\n    }\n    if n % 2048 == 0 {\n        return true\n\
    \    }\n    if n % 4096 == 0 {\n        return true\n    }\n    if n % 8192 ==\
    \ 0 {\n        return true\n    }\n    if n % 16384 == 0 {\n        return true\n\
    \    }\n    if n % 32768 == 0 {\n        return true\n    }\n    if n % 65536\
    \ == 0 {\n        return true\n    }\n    if n % 131072 == 0 {\n        return\
    \ true\n    }\n    if n % 262144 == 0 {\n        return true\n    }\n    if n\
    \ % 524288 == 0 {\n        return true\n    }\n    if n % 1048576 == 0 {\n   \
    \     return true\n    }\n    if n % 2097152 == 0 {\n        return true\n   \
    \ }\n    if n % 4194304 == 0 {\n        return true\n    }\n    if n % 8388608\
    \ == 0 {\n        return true\n    }\n    if n % 16777216 == 0 {\n        return\
    \ true\n    }\n    if n % 33554432 == 0 {\n        return true\n    }\n    if\
    \ n % 67108864 == 0 {\n        return true\n    }\n    if n % 134217728 == 0 {\n\
    \        return true\n    }\n    if n % 268435456 == 0 {\n        return true\n\
    \    }\n    if n % 536870912 == 0 {\n        return true\n    }\n    if n % 1073741824\
    \ == 0 {\n        return true\n    }\n    if n % 2147483648 == 0 {\n        return\
    \ true\n    }\n    if n % 4294967296 == 0 {\n        return true\n    }\n    if\
    \ n % 8589934592 == 0 {\n        return true\n    }\n    if n % 17179869184 ==\
    \ 0 {\n        return true\n    }\n    if n % 34359738368 == 0 {\n        return\
    \ true\n    }\n    if n % 68719476736 == 0 {\n        return true\n    }\n   \
    \ if n % 137438953472 == 0 {\n        return true\n    }\n    if n % 274877906944\
    \ == 0 {\n        return true\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfdqvkehy_test.go:133:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum\
    \ == n {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpx50qxq4i_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpx50qxq4i_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpx50qxq4i_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpx50qxq4i_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpx50qxq4i_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n % 2 == 0 && n % 3 == 0 {\n        return true\n    }\n\
    \    if n == 5 || n == 6 || n == 7 || n == 8 || n == 9 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n\
    \  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp026nbch__test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp026nbch__test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp026nbch__test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp026nbch__test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp5ewgqja7_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmp5ewgqja7_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    \n    sum\
    \ := 0\n    \n    for i := 0; i < n; i++ {\n        sum += i\n    }\n    \n  \
    \  if sum%2 == 0 {\n        return true\n    }\n    \n    return false\n}\n\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpa7dx18vy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpa7dx18vy_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpa7dx18vy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        sum += i\n    }\n    if sum%2 == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp69ipm_ul_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp69ipm_ul_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp69ipm_ul_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n % 2\
    \ == 0 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n       \
    \ return true\n    }\n    if n == 5 {\n        return true\n    }\n    if n ==\
    \ 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n    }\n\
    \    if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return\
    \ true\n    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if n == 13 {\n        return true\n    }\n    if n == 14 {\n        return\
    \ true\n    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if n == 18 {\n        return true\n    }\n    if n == 19 {\n        return\
    \ true\n    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if n == 23 {\n        return true\n    }\n    if n == 24 {\n        return\
    \ true\n    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n\
    \        return true\n    }\n    if n == 27 {\n        return true\n    }\n  \
    \  if n == 28 {\n        return true\n    }\n    if n == 29 {\n        return\
    \ true\n    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n\
    \        return true\n    }\n    if n == 32 {\n        return true\n    }\n  \
    \  if n == 33 {\n        return true\n    }\n    if n == 34 {\n        return\
    \ true\n    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n\
    \        return true\n    }\n    if n == 37 {\n        return true\n    }\n  \
    \  if n == 38 {\n        return true\n    }\n    if n == 39 {\n        return\
    \ true\n    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n\
    \        return true\n    }\n    if n == 42 {\n        return true\n    }\n  \
    \  if n == 43 {\n        return true\n    }\n    if n == 44 {\n        return\
    \ true\n    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n\
    \        return true\n    }\n    if n == 47 {\n        return true\n    }\n  \
    \  if n == 48 {\n        return true\n    }\n    if n == 49 {\n        return\
    \ true\n    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkuujex55_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eef4k37_test.go:166:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n % 2\
    \ == 0 {\n        return false\n    }\n    if n % 4 == 0 {\n        return true\n\
    \    }\n    return is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp2nuaytcj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp2nuaytcj_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmp2nuaytcj_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp2nuaytcj_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmp2nuaytcj_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp2nuaytcj_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    sum := 0\n    for i :=\
    \ 3; i <= n; i += 2 {\n        sum += i\n    }\n    if sum == n {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpy_6ctaqs_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpy_6ctaqs_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpy_6ctaqs_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpy_6ctaqs_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 4 == 0 {\n     \
    \   return false\n    }\n    if n % 8 == 0 {\n        return false\n    }\n  \
    \  if n % 16 == 0 {\n        return false\n    }\n    if n % 32 == 0 {\n     \
    \   return false\n    }\n    if n % 64 == 0 {\n        return false\n    }\n \
    \   if n % 128 == 0 {\n        return false\n    }\n    if n % 256 == 0 {\n  \
    \      return false\n    }\n    if n % 512 == 0 {\n        return false\n    }\n\
    \    if n % 1024 == 0 {\n        return false\n    }\n    if n % 2048 == 0 {\n\
    \        return false\n    }\n    if n % 4096 == 0 {\n        return false\n \
    \   }\n    if n % 8192 == 0 {\n        return false\n    }\n    if n % 16384 ==\
    \ 0 {\n        return false\n    }\n    if n % 32768 == 0 {\n        return false\n\
    \    }\n    if n % 65536 == 0 {\n        return false\n    }\n    if n % 131072\
    \ == 0 {\n        return false\n    }\n    if n % 262144 == 0 {\n        return\
    \ false\n    }\n    if n % 524288 == 0 {\n        return false\n    }\n    if\
    \ n % 1048576 == 0 {\n        return false\n    }\n    if n % 2097152 == 0 {\n\
    \        return false\n    }\n    if n % 4194304 == 0 {\n        return false\n\
    \    }\n    if n % 8388608 == 0 {\n        return false\n    }\n    if n % 16777216\
    \ == 0 {\n        return false\n    }\n    if n % 33554432 == 0 {\n        return\
    \ false\n    }\n    if n % 67108864 == 0 {\n        return false\n    }\n    if\
    \ n % 134217728 == 0 {\n        return false\n    }\n    if n % 268435456 == 0\
    \ {\n        return false\n    }\n    if n % 536870912 == 0 {\n        return\
    \ false\n    }\n    if n % 1073741824 == 0 {\n        return false\n    }\n  \
    \  if n % 2147483648 == 0 {\n        return false\n    }\n    if n % 4294967296\
    \ == 0 {\n        return false\n    }\n    if n % 8589934592 == 0 {\n        return\
    \ false\n    }\n    if n % 17179869184 == 0 {\n        return false\n    }\n \
    \   if n % 34359738368 == 0 {\n        return false\n    }\n    if n % 68719476736\
    \ == 0 {\n        return false\n    }\n    if n % 137438953472 == 0 {\n      \
    \  return false\n    }\n    if n % 274877906944 == 0 {\n        return false\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcse0cv09_test.go:133:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    if sum%4 != 0 {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpj8fd_e87_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    sum := 0\n\
    \    for i := 0; i < n; i++ {\n        sum += i\n    }\n    if sum % 2 == 0 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpqt8o2rab_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpqt8o2rab_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6\
    \ (0.00s)\n        tmpqt8o2rab_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 4 == 0 {\n        return false\n    }\n    if n % 8\
    \ == 0 {\n        return false\n    }\n    if n % 16 == 0 {\n        return false\n\
    \    }\n    if n % 32 == 0 {\n        return false\n    }\n    if n % 64 == 0\
    \ {\n        return false\n    }\n    if n % 128 == 0 {\n        return false\n\
    \    }\n    if n % 256 == 0 {\n        return false\n    }\n    if n % 512 ==\
    \ 0 {\n        return false\n    }\n    if n % 1024 == 0 {\n        return false\n\
    \    }\n    if n % 2048 == 0 {\n        return false\n    }\n    if n % 4096 ==\
    \ 0 {\n        return false\n    }\n    if n % 8192 == 0 {\n        return false\n\
    \    }\n    if n % 16384 == 0 {\n        return false\n    }\n    if n % 32768\
    \ == 0 {\n        return false\n    }\n    if n % 65536 == 0 {\n        return\
    \ false\n    }\n    if n % 131072 == 0 {\n        return false\n    }\n    if\
    \ n % 262144 == 0 {\n        return false\n    }\n    if n % 524288 == 0 {\n \
    \       return false\n    }\n    if n % 1048576 == 0 {\n        return false\n\
    \    }\n    if n % 2097152 == 0 {\n        return false\n    }\n    if n % 4194304\
    \ == 0 {\n        return false\n    }\n    if n % 8388608 == 0 {\n        return\
    \ false\n    }\n    if n % 16777216 == 0 {\n        return false\n    }\n    if\
    \ n % 33554432 == 0 {\n        return false\n    }\n    if n % 67108864 == 0 {\n\
    \        return false\n    }\n    if n % 134217728 == 0 {\n        return false\n\
    \    }\n    if n % 268435456 == 0 {\n        return false\n    }\n    if n % 536870912\
    \ == 0 {\n        return false\n    }\n    if n % 1073741824 == 0 {\n        return\
    \ false\n    }\n    if n % 2147483648 == 0 {\n        return false\n    }\n  \
    \  if n % 4294967296 == 0 {\n        return false\n    }\n    if n % 8589934592\
    \ == 0 {\n        return false\n    }\n    if n % 17179869184 == 0 {\n       \
    \ return false\n    }\n    if n % 34359738368 == 0 {\n        return false\n \
    \   }\n    if n % 68719476736 == 0 {\n        return false\n    }\n    if n %\
    \ 137438953472 == 0 {\n        return false\n    }\n    if n % 274\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu7h1kgd__test.go:135:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 7 {\n        return true\n    }\n   \
    \ if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n\
    \    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n     \
    \   return true\n    }\n    if n == 12 {\n        return true\n    }\n    if n\
    \ == 13 {\n        return true\n    }\n    if n == 14 {\n        return true\n\
    \    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n     \
    \   return true\n    }\n    if n == 17 {\n        return true\n    }\n    if n\
    \ == 18 {\n        return true\n    }\n    if n == 19 {\n        return true\n\
    \    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n     \
    \   return true\n    }\n    if n == 22 {\n        return true\n    }\n    if n\
    \ == 23 {\n        return true\n    }\n    if n == 24 {\n        return true\n\
    \    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n     \
    \   return true\n    }\n    if n == 27 {\n        return true\n    }\n    if n\
    \ == 28 {\n        return true\n    }\n    if n == 29 {\n        return true\n\
    \    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n     \
    \   return true\n    }\n    if n == 32 {\n        return true\n    }\n    if n\
    \ == 33 {\n        return true\n    }\n    if n == 34 {\n        return true\n\
    \    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n     \
    \   return true\n    }\n    if n == 37 {\n        return true\n    }\n    if n\
    \ == 38 {\n        return true\n    }\n    if n == 39 {\n        return true\n\
    \    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n     \
    \   return true\n    }\n    if n == 42 {\n        return true\n    }\n    if n\
    \ == 43 {\n        return true\n    }\n    if n == 44 {\n        return true\n\
    \    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n     \
    \   return true\n    }\n    if n == 47 {\n        return true\n    }\n    if n\
    \ == 48 {\n        return true\n    }\n    if n == 49 {\n        return true\n\
    \    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjgc44nh_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n/2; i+=2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp0gms82dr_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    sum := 0\n    for i := 3; i <= n; i += 2 {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpe74ba2my_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpe74ba2my_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpe74ba2my_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpe74ba2my_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n; i += 2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpql3f6o0e_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpql3f6o0e_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpql3f6o0e_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 7 {\n        return true\n    }\n   \
    \ if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return true\n\
    \    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n     \
    \   return true\n    }\n    if n == 12 {\n        return true\n    }\n    if n\
    \ == 13 {\n        return true\n    }\n    if n == 14 {\n        return true\n\
    \    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n     \
    \   return true\n    }\n    if n == 17 {\n        return true\n    }\n    if n\
    \ == 18 {\n        return true\n    }\n    if n == 19 {\n        return true\n\
    \    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n     \
    \   return true\n    }\n    if n == 22 {\n        return true\n    }\n    if n\
    \ == 23 {\n        return true\n    }\n    if n == 24 {\n        return true\n\
    \    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n     \
    \   return true\n    }\n    if n == 27 {\n        return true\n    }\n    if n\
    \ == 28 {\n        return true\n    }\n    if n == 29 {\n        return true\n\
    \    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n     \
    \   return true\n    }\n    if n == 32 {\n        return true\n    }\n    if n\
    \ == 33 {\n        return true\n    }\n    if n == 34 {\n        return true\n\
    \    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n     \
    \   return true\n    }\n    if n == 37 {\n        return true\n    }\n    if n\
    \ == 38 {\n        return true\n    }\n    if n == 39 {\n        return true\n\
    \    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n     \
    \   return true\n    }\n    if n == 42 {\n        return true\n    }\n    if n\
    \ == 43 {\n        return true\n    }\n    if n == 44 {\n        return true\n\
    \    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n     \
    \   return true\n    }\n    if n == 47 {\n        return true\n    }\n    if n\
    \ == 48 {\n        return true\n    }\n    if n == 49 {\n        return true\n\
    \    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjgc44nh_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum%2 == 0 {\n  \
    \      return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpv55gufpo_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpv55gufpo_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpv55gufpo_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpv55gufpo_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 4 == 0 {\n        return true\n    }\n    if n % 8\
    \ == 0 {\n        return true\n    }\n    if n % 16 == 0 {\n        return true\n\
    \    }\n    if n % 32 == 0 {\n        return true\n    }\n    if n % 64 == 0 {\n\
    \        return true\n    }\n    if n % 128 == 0 {\n        return true\n    }\n\
    \    if n % 256 == 0 {\n        return true\n    }\n    if n % 512 == 0 {\n  \
    \      return true\n    }\n    if n % 1024 == 0 {\n        return true\n    }\n\
    \    if n % 2048 == 0 {\n        return true\n    }\n    if n % 4096 == 0 {\n\
    \        return true\n    }\n    if n % 8192 == 0 {\n        return true\n   \
    \ }\n    if n % 16384 == 0 {\n        return true\n    }\n    if n % 32768 ==\
    \ 0 {\n        return true\n    }\n    if n % 65536 == 0 {\n        return true\n\
    \    }\n    if n % 131072 == 0 {\n        return true\n    }\n    if n % 262144\
    \ == 0 {\n        return true\n    }\n    if n % 524288 == 0 {\n        return\
    \ true\n    }\n    if n % 1048576 == 0 {\n        return true\n    }\n    if n\
    \ % 2097152 == 0 {\n        return true\n    }\n    if n % 4194304 == 0 {\n  \
    \      return true\n    }\n    if n % 8388608 == 0 {\n        return true\n  \
    \  }\n    if n % 16777216 == 0 {\n        return true\n    }\n    if n % 33554432\
    \ == 0 {\n        return true\n    }\n    if n % 67108864 == 0 {\n        return\
    \ true\n    }\n    if n % 134217728 == 0 {\n        return true\n    }\n    if\
    \ n % 268435456 == 0 {\n        return true\n    }\n    if n % 536870912 == 0\
    \ {\n        return true\n    }\n    if n % 1073741824 == 0 {\n        return\
    \ true\n    }\n    if n % 2147483648 == 0 {\n        return true\n    }\n    if\
    \ n % 4294967296 == 0 {\n        return true\n    }\n    if n % 8589934592 ==\
    \ 0 {\n        return true\n    }\n    if n % 17179869184 == 0 {\n        return\
    \ true\n    }\n    if n % 34359738368 == 0 {\n        return true\n    }\n   \
    \ if n % 68719476736 == 0 {\n        return true\n    }\n    if n % 137438953472\
    \ == 0 {\n        return true\n    }\n    if n % 274\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuythy_0p_test.go:135:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum%4\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpawmhzfb9_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eef4k37_test.go:166:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpu3zebzsu_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpu3zebzsu_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n/2; i+=2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp0gms82dr_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvvg_h58l_test.go:167:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 4 == 0 {\n        return false\n    }\n    if n % 8\
    \ == 0 {\n        return false\n    }\n    if n % 16 == 0 {\n        return false\n\
    \    }\n    if n % 32 == 0 {\n        return false\n    }\n    if n % 64 == 0\
    \ {\n        return false\n    }\n    if n % 128 == 0 {\n        return false\n\
    \    }\n    if n % 256 == 0 {\n        return false\n    }\n    if n % 512 ==\
    \ 0 {\n        return false\n    }\n    if n % 1024 == 0 {\n        return false\n\
    \    }\n    if n % 2048 == 0 {\n        return false\n    }\n    if n % 4096 ==\
    \ 0 {\n        return false\n    }\n    if n % 8192 == 0 {\n        return false\n\
    \    }\n    if n % 16384 == 0 {\n        return false\n    }\n    if n % 32768\
    \ == 0 {\n        return false\n    }\n    if n % 65536 == 0 {\n        return\
    \ false\n    }\n    if n % 131072 == 0 {\n        return false\n    }\n    if\
    \ n % 262144 == 0 {\n        return false\n    }\n    if n % 524288 == 0 {\n \
    \       return false\n    }\n    if n % 1048576 == 0 {\n        return false\n\
    \    }\n    if n % 2097152 == 0 {\n        return false\n    }\n    if n % 4194304\
    \ == 0 {\n        return false\n    }\n    if n % 8388608 == 0 {\n        return\
    \ false\n    }\n    if n % 16777216 == 0 {\n        return false\n    }\n    if\
    \ n % 33554432 == 0 {\n        return false\n    }\n    if n % 67108864 == 0 {\n\
    \        return false\n    }\n    if n % 134217728 == 0 {\n        return false\n\
    \    }\n    if n % 268435456 == 0 {\n        return false\n    }\n    if n % 536870912\
    \ == 0 {\n        return false\n    }\n    if n % 1073741824 == 0 {\n        return\
    \ false\n    }\n    if n % 2147483648 == 0 {\n        return false\n    }\n  \
    \  if n % 4294967296 == 0 {\n        return false\n    }\n    if n % 8589934592\
    \ == 0 {\n        return false\n    }\n    if n % 17179869184 == 0 {\n       \
    \ return false\n    }\n    if n % 34359738368 == 0 {\n        return false\n \
    \   }\n    if n % 68719476736 == 0 {\n        return false\n    }\n    if n %\
    \ 137438953472 == 0 {\n        return false\n    }\n    if n % 274\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu7h1kgd__test.go:135:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    if\
    \ n%4 == 0 {\n        return true\n    }\n    if n%8 == 0 {\n        return true\n\
    \    }\n    if n%16 == 0 {\n        return true\n    }\n    if n%32 == 0 {\n \
    \       return true\n    }\n    if n%64 == 0 {\n        return true\n    }\n \
    \   if n%128 == 0 {\n        return true\n    }\n    if n%256 == 0 {\n       \
    \ return true\n    }\n    if n%512 == 0 {\n        return true\n    }\n    if\
    \ n%1024 == 0 {\n        return true\n    }\n    if n%2048 == 0 {\n        return\
    \ true\n    }\n    if n%4096 == 0 {\n        return true\n    }\n    if n%8192\
    \ == 0 {\n        return true\n    }\n    if n%16384 == 0 {\n        return true\n\
    \    }\n    if n%32768 == 0 {\n        return true\n    }\n    if n%65536 == 0\
    \ {\n        return true\n    }\n    if n%131072 == 0 {\n        return true\n\
    \    }\n    if n%262144 == 0 {\n        return true\n    }\n    if n%524288 ==\
    \ 0 {\n        return true\n    }\n    if n%1048576 == 0 {\n        return true\n\
    \    }\n    if n%2097152 == 0 {\n        return true\n    }\n    if n%4194304\
    \ == 0 {\n        return true\n    }\n    if n%8388608 == 0 {\n        return\
    \ true\n    }\n    if n%16777216 == 0 {\n        return true\n    }\n    if n%33554432\
    \ == 0 {\n        return true\n    }\n    if n%67108864 == 0 {\n        return\
    \ true\n    }\n    if n%134217728 == 0 {\n        return true\n    }\n    if n%268435456\
    \ == 0 {\n        return true\n    }\n    if n%536870912 == 0 {\n        return\
    \ true\n    }\n    if n%1073741824 == 0 {\n        return true\n    }\n    if\
    \ n%2147483648 == 0 {\n        return true\n    }\n    if n%4294967296 == 0 {\n\
    \        return true\n    }\n    if n%8589934592 == 0 {\n        return true\n\
    \    }\n    if n%17179869184 == 0 {\n        return true\n    }\n    if n%34359738368\
    \ == 0 {\n        return true\n    }\n    if n%68719476736 == 0 {\n        return\
    \ true\n    }\n    if n%\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp98nj3kk7_test.go:126:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum%4\
    \ != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl94i2y6r_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n%2 == 0 {\n        for i := 3; i <= n/2; i+=2 {\n          \
    \  if n%i == 0 {\n                return false\n            }\n        }\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp0gms82dr_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp0gms82dr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 || n == 6 || n ==\
    \ 7 || n == 8 || n == 9 {\n        return true\n    }\n    if n == 10 || n ==\
    \ 11 || n == 12 || n == 13 || n == 14 || n == 15 || n == 16 || n == 17 || n ==\
    \ 18 || n == 19 || n == 20 || n == 21 || n == 22 || n == 23 || n == 24 || n ==\
    \ 25 || n == 26 || n == 27 || n == 28 || n == 29 || n == 30 || n == 31 || n ==\
    \ 32 || n == 33 || n == 34 || n == 35 || n == 36 || n == 37 || n == 38 || n ==\
    \ 39 || n == 40 || n == 41 || n == 42 || n == 43 || n == 44 || n == 45 || n ==\
    \ 46 || n == 47 || n == 48 || n == 49 || n == 50 || n == 51 || n == 52 || n ==\
    \ 53 || n == 54 || n == 55 || n == 56 || n == 57 || n == 58 || n == 59 || n ==\
    \ 60 || n == 61 || n == 62 || n == 63 || n == 64 || n == 65 || n == 66 || n ==\
    \ 67 || n == 68 || n == 69 || n == 70 || n == 71 || n == 72 || n == 73 || n ==\
    \ 74 || n == 75 || n == 76 || n == 77 || n == 78 || n == 79 || n == 80 || n ==\
    \ 81 || n == 82 || n == 83 || n == 84 || n == 85 || n == 86 || n == 87 || n ==\
    \ 88 || n == 89 || n == 90 || n == 91 || n == 92 || n == 93 || n == 94 || n ==\
    \ 95 || n == 96 || n == 97 || n == 98 || n == 99 || n == 100 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpm60ip5as_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpm60ip5as_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpm60ip5as_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpm60ip5as_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate :=\
    \ is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpvdbti7l4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpvdbti7l4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i%2 == 0 {\n            sum += i\n        }\n\
    \    }\n    if sum%4 != 0 {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpj8fd_e87_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1sprv4w_test.go:165:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    if n % 2\
    \ == 0 {\n        return false\n    }\n    if n % 4 == 0 {\n        return true\n\
    \    }\n    if n % 8 == 0 {\n        return true\n    }\n    if n % 16 == 0 {\n\
    \        return true\n    }\n    if n % 32 == 0 {\n        return true\n    }\n\
    \    if n % 64 == 0 {\n        return true\n    }\n    if n % 128 == 0 {\n   \
    \     return true\n    }\n    if n % 256 == 0 {\n        return true\n    }\n\
    \    if n % 512 == 0 {\n        return true\n    }\n    if n % 1024 == 0 {\n \
    \       return true\n    }\n    if n % 2048 == 0 {\n        return true\n    }\n\
    \    if n % 4096 == 0 {\n        return true\n    }\n    if n % 8192 == 0 {\n\
    \        return true\n    }\n    if n % 16384 == 0 {\n        return true\n  \
    \  }\n    if n % 32768 == 0 {\n        return true\n    }\n    if n % 65536 ==\
    \ 0 {\n        return true\n    }\n    if n % 131072 == 0 {\n        return true\n\
    \    }\n    if n % 262144 == 0 {\n        return true\n    }\n    if n % 524288\
    \ == 0 {\n        return true\n    }\n    if n % 1048576 == 0 {\n        return\
    \ true\n    }\n    if n % 2097152 == 0 {\n        return true\n    }\n    if n\
    \ % 4194304 == 0 {\n        return true\n    }\n    if n % 8388608 == 0 {\n  \
    \      return true\n    }\n    if n % 16777216 == 0 {\n        return true\n \
    \   }\n    if n % 33554432 == 0 {\n        return true\n    }\n    if n % 67108864\
    \ == 0 {\n        return true\n    }\n    if n % 134217728 == 0 {\n        return\
    \ true\n    }\n    if n % 268435456 == 0 {\n        return true\n    }\n    if\
    \ n % 536870912 == 0 {\n        return true\n    }\n    if n % 1073741824 == 0\
    \ {\n        return true\n    }\n    if n % 2147483648 == 0 {\n        return\
    \ true\n    }\n    if n % 4294967296 == 0 {\n        return true\n    }\n    if\
    \ n % 8589934592 == 0 {\n        return true\n    }\n    if n % 17179869184 ==\
    \ 0 {\n        return true\n    }\n    if n % 34359738368 == 0 {\n        return\
    \ true\n    }\n    if n % 68719476736 == 0 {\n        return true\n    }\n   \
    \ if n % 137438953472 == 0 {\n        return true\n    }\n    if n % 274877906944\
    \ == 0 {\n        return true\n    }\n    if n % 549755813888 == 0 {\n       \
    \ return true\n    }\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaoajen8d_test.go:131:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    // Write your code here\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum%4\
    \ != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpl94i2y6r_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n\n    if n == 1 {\n   \
    \     return false\n    }\n\n    if n == 2 {\n        return true\n    }\n\n \
    \   if n == 3 {\n        return true\n    }\n\n    if n == 4 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    if n\
    \ % 4 == 0 {\n        return true\n    }\n\n    if n % 8 == 0 {\n        return\
    \ true\n    }\n\n    if n % 16 == 0 {\n        return true\n    }\n\n    if n\
    \ % 32 == 0 {\n        return true\n    }\n\n    if n % 64 == 0 {\n        return\
    \ true\n    }\n\n    if n % 128 == 0 {\n        return true\n    }\n\n    if n\
    \ % 256 == 0 {\n        return true\n    }\n\n    if n % 512 == 0 {\n        return\
    \ true\n    }\n\n    if n % 1024 == 0 {\n        return true\n    }\n\n    if\
    \ n % 2048 == 0 {\n        return true\n    }\n\n    if n % 4096 == 0 {\n    \
    \    return true\n    }\n\n    if n % 8192 == 0 {\n        return true\n    }\n\
    \n    if n % 16384 == 0 {\n        return true\n    }\n\n    if n % 32768 == 0\
    \ {\n        return true\n    }\n\n    if n % 65536 == 0 {\n        return true\n\
    \    }\n\n    if n % 131072 == 0 {\n        return true\n    }\n\n    if n % 262144\
    \ == 0 {\n        return true\n    }\n\n    if n % 524288 == 0 {\n        return\
    \ true\n    }\n\n    if n % 1048576 == 0 {\n        return true\n    }\n\n   \
    \ if n % 2097152 == 0 {\n        return true\n    }\n\n    if n % 4194304 == 0\
    \ {\n        return true\n    }\n\n    if n % 8388608 == 0 {\n        return true\n\
    \    }\n\n    if n % 16777216 == 0 {\n        return true\n    }\n\n    if n %\
    \ 33554432 == 0 {\n        return true\n    }\n\n    if n % 67108864 == 0 {\n\
    \        return true\n    }\n\n    if n % 134217728 == 0 {\n        return true\n\
    \    }\n\n    if n % 268435456 == 0 {\n        return true\n    }\n\n    if n\
    \ % 536870912 == 0 {\n        return true\n    }\n\n    if n % 1073741824 == 0\
    \ {\n        return true\n    }\n\n    if n % 2147483648 == 0 {\n        return\
    \ true\n    }\n\n    if n % 4294967296 == 0 {\n        return true\n    }\n\n\
    \    if n % 8589934592 == 0 {\n        return true\n    }\n\n    if n % 17179869184\
    \ == 0 {\n        return true\n    }\n\n    if n % 34359738368 == 0 {\n      \
    \  return true\n    }\n\n    if n % 68719476736 == 0 {\n        return true\n\
    \    }\n\n    if n % 137438953472 == 0 {\n        return \nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpet9ciykk_test.go:177:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n == 4 {\n        return true\n \
    \   }\n    if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n\
    \        return true\n    }\n    if n == 9 {\n        return true\n    }\n   \
    \ if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n\
    \ == 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n     \
    \   return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n\
    \ == 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n\
    \    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n     \
    \   return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n\
    \ == 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n\
    \    }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n\
    \    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n     \
    \   return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n\
    \ == 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n\
    \    }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n     \
    \   return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n\
    \ == 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n\
    \    }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n     \
    \   return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n\
    \ == 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n\
    \    }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n     \
    \   return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n\
    \ == 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eef4k37_test.go:166:6: expected ''('', found TestIs_Equal_To_Sum_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmpw1fopecb_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7\
    \ (0.00s)\n        tmpw1fopecb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n     \
    \   return true\n    }\n    sum := 0\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            sum += i\n        }\n    }\n    if sum%2 == 0 {\n  \
    \      return true\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpv55gufpo_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpv55gufpo_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__4\
    \ (0.00s)\n        tmpv55gufpo_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__6 (0.00s)\n        tmpv55gufpo_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int)\
    \ bool {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += i\n    }\n\
    \    return sum == n\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpgtq6ylne_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpgtq6ylne_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
