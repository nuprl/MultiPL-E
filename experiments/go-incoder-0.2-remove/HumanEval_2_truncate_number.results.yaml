language: go_test.go
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + float64(decimals)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpn09hpq33_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpn09hpq33_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpn09hpq33_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpl_i55lvy_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number % float64(10)\n    return int_part * float64(10) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lw_3maw_test.go:14:17: invalid operation: operator % not defined on number
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimals := float64(number) - integer\n    if decimals < 0 {\n        decimals\
    \ = 0\n    }\n    return integer + decimals\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpuybb_iu5_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpuybb_iu5_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpuybb_iu5_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimal := float64(number - integer)\n    return integer + decimal\n}\n\n\
    func TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpqab6xz3g_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpqab6xz3g_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpqab6xz3g_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimals := float64(number) - integer\n    return integer + decimals\n}\n\
    \nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpojhkcj0m_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimals := float64(number - integer)\n    return integer + decimals\n}\n\
    \nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp67xvdlph_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp67xvdlph_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp67xvdlph_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimals := float64(number) - integer\n    return integer + decimals\n}\n\
    \nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpojhkcj0m_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal := number - int_part * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpzrgutlgf_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpzrgutlgf_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + float64(decimals)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpn09hpq33_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpn09hpq33_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpn09hpq33_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + float64(decimals)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpn09hpq33_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpn09hpq33_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpn09hpq33_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal < 0 {\n        decimal\
    \ = 0\n    }\n    return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppob_65eu_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal < 0 {\n        decimal\
    \ = 0\n    }\n    return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppob_65eu_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpd8hjmfco_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpd8hjmfco_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal := number - int_part * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpzrgutlgf_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpzrgutlgf_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpd8hjmfco_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimals := float64(number) - integer\n    return integer + decimals\n}\n\
    \nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpojhkcj0m_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number % float64(10)\n    return int_part * float64(10) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lw_3maw_test.go:14:17: invalid operation: operator % not defined on number
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part + decimals\
    \ / float64(10)\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate :=\
    \ truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5), expected:\
    \ 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmps83yeh_a_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmps83yeh_a_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmps83yeh_a_test.go:33: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp747le3ry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal < 0 {\n        decimal\
    \ = 0\n    }\n    return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppob_65eu_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal > 0 {\n        return\
    \ integer\n    }\n    return float64(integer)\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcroe75jw_test.go:16:16: cannot use integer (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number % float64(10)\n    return decimals\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimbgqhgr_test.go:13:5: integer declared but not used

    /tmp/tmpimbgqhgr_test.go:14:17: invalid operation: operator % not defined on number
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal < 0 {\n        decimal\
    \ = 0\n    }\n    return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppob_65eu_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal < 0 {\n        decimal\
    \ = 0\n    }\n    return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppob_65eu_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpl_i55lvy_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer * float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp4gxusvnx_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp4gxusvnx_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075235
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return integer + decimals /\
    \ float64(10)\n}\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpgia6dv7c_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpgia6dv7c_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpgia6dv7c_test.go:33: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075235
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp747le3ry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimals := float64(number) - integer\n    return integer + decimals\n}\n\
    \nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpojhkcj0m_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpojhkcj0m_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return integer\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wttvsxu_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075235
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpj4za_oyw_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpj4za_oyw_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp747le3ry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal := number - int_part * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpzrgutlgf_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpzrgutlgf_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal > 0.5 {\n        decimal\
    \ = 1 - decimal\n    }\n    return decimal\n}\n\nfunc TestTruncate_Number(t *testing.T)\
    \ {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3.5),\
    \ expected: 0.5 },\n     { actual: candidate(1.25), expected: 0.25 },\n     {\
    \ actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number % float64(10)\n    return integer + decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqqv28l90_test.go:14:17: invalid operation: operator % not defined on number
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075235
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 0
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer * float64(10)\n    return decimal\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppzputrry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppzputrry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0.35)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpd8hjmfco_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0.125)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpd8hjmfco_test.go:33: expected '%!s(float64=0)', got '%!s(float64=12.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpl_i55lvy_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimal_part := number - int_part * float64(10)\n    return decimal_part\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpsue83i0h_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpsue83i0h_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    if decimal < 0 {\n        decimal\
    \ = 0\n    }\n    return float64(integer) + decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmppob_65eu_test.go:36:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmppob_65eu_test.go:36: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - float64(integer) * float64(10)\n    return decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmprrsygx9e_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmprrsygx9e_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer) + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp00xrt6fk_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp00xrt6fk_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number - int_part * float64(10)\n    return int_part\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay40_n7g_test.go:14:5: decimals declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimals := number - float64(integer)\n    return float64(integer) + decimals\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp783ynbbz_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp783ynbbz_test.go:33: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 2
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    int_part := number / float64(10)\n\
    \    decimals := number % float64(10)\n    return float64(int_part) + float64(decimals)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzm43k4_g_test.go:14:17: invalid operation: operator % not defined on number
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + float64(decimal)\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmp747le3ry_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmp747le3ry_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := int(number)\n \
    \   decimal := number - float64(integer)\n    return float64(integer)*10 + decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=30.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpl_i55lvy_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=10.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpl_i55lvy_test.go:33: expected '%!s(float64=0)', got '%!s(float64=1230)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - float64(integer) * float64(10)\n    return decimal\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmplo9gbv72_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmplo9gbv72_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimal := number - integer*float64(10)\n    return decimal\n}\n\nfunc TestTruncate_Number(t\
    \ *testing.T) {\n  candidate := truncate_number\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3.5), expected: 0.5 },\n     { actual: candidate(1.25), expected:\
    \ 0.25 },\n     { actual: candidate(123.0), expected: 0.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpnrcqmh0f_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpnrcqmh0f_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := number / float64(10)\n\
    \    decimals := number - integer*float64(10)\n    return decimals\n}\n\nfunc\
    \ TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     { actual:\
    \ candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0), expected:\
    \ 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpm4n613h8_test.go:33: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpm4n613h8_test.go:33:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075234
- exit_code: 1
  program: "package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    func truncate_number(number float64) float64 {\n    integer := float64(number)\n\
    \    decimal := number - integer\n    integer -= decimal\n    return integer\n\
    }\n\nfunc TestTruncate_Number(t *testing.T) {\n  candidate := truncate_number\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3.5), expected: 0.5 },\n     {\
    \ actual: candidate(1.25), expected: 0.25 },\n     { actual: candidate(123.0),\
    \ expected: 0.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTruncate_Number (0.00s)\n    --- FAIL: TestTruncate_Number/test_num__0\
    \ (0.00s)\n        tmpkjao1ia3_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTruncate_Number/test_num__1 (0.00s)\n        tmpkjao1ia3_test.go:34:\
    \ expected '%!s(float64=0.25)', got '%!s(float64=1.25)'\n    --- FAIL: TestTruncate_Number/test_num__2\
    \ (0.00s)\n        tmpkjao1ia3_test.go:34: expected '%!s(float64=0)', got '%!s(float64=123)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075235
