language: go_test.go
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d,\", i)\n    }\n    return\
    \ s[:len(s)-1]\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.string_sequence(0x0)\n\t/tmp/tmplrm_pfhu_test.go:14\
    \ +0xc5\ncommand-line-arguments_test.TestString_Sequence(0x0?)\n\t/tmp/tmplrm_pfhu_test.go:24\
    \ +0x3d\ntesting.tRunner(0xc0001036c0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d,\", i)\n    }\n    return\
    \ s[:len(s)-1]\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.string_sequence(0x0)\n\t/tmp/tmplrm_pfhu_test.go:14\
    \ +0xc5\ncommand-line-arguments_test.TestString_Sequence(0x0?)\n\t/tmp/tmplrm_pfhu_test.go:24\
    \ +0x3d\ntesting.tRunner(0xc0001036c0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d,\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpthoybyh8_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpthoybyh8_test.go:32: expected\
    \ '0 1 2 3', got '0,1,2,'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpthoybyh8_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0,1,2,3,4,5,6,7,8,9,'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d,\", i)\n    }\n    return\
    \ s[:len(s)-1]\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.string_sequence(0x0)\n\t/tmp/tmplrm_pfhu_test.go:14\
    \ +0xc5\ncommand-line-arguments_test.TestString_Sequence(0x0?)\n\t/tmp/tmplrm_pfhu_test.go:24\
    \ +0x3d\ntesting.tRunner(0xc0001036c0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpghchl0r9_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpghchl0r9_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpghchl0r9_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%v\", i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuvbmrsts_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuvbmrsts_test.go:32: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuvbmrsts_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d,\", i)\n    }\n    return\
    \ s[:len(s)-1]\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.string_sequence(0x0)\n\t/tmp/tmplrm_pfhu_test.go:14\
    \ +0xc5\ncommand-line-arguments_test.TestString_Sequence(0x0?)\n\t/tmp/tmplrm_pfhu_test.go:24\
    \ +0x3d\ntesting.tRunner(0xc0001036c0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i\
    \ := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\\n\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3kefwu3c_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3', got '0\n            1\n            2\n            '\n    --- FAIL:\
    \ TestString_Sequence/test_num__2 (0.00s)\n        tmp3kefwu3c_test.go:32: expected\
    \ '0 1 2 3 4 5 6 7 8 9 10', got '0\n            1\n            2\n           \
    \ 3\n            4\n            5\n            6\n            7\n            8\n\
    \            9\n            '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073375
