name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort an array of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  func sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // Write your code here\n    return arr\n}\n", "    // Your code\
    \ here\n}\n", "    // Write your code here\n    return arr\n}\n", "    // Your\
    \ code goes here\n    return arr\n}\n", "    // Your code here\n    return arr\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Your code here\n}\n", "    // Your code goes here\n    return arr\n}\n",
  "    // Your code here\n    return arr\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n\
    \    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    // Write your code here\n    return arr\n}\n", "    //\
    \ Your code here\n    return arr\n}\n", "    // Your code here\n}\n", "    //\
    \ Your code here\n}\n", "    // Write your code here\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code goes here\n    return arr\n}\n", "    // Your code\
    \ here\n}\n", "    // Write your code here\n    return arr\n}\n", "    // Your\
    \ code goes here\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    //\
    \ Write your code here\n    return arr\n}\n", "    // Your code here\n}\n", " \
    \   // Your code here\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n            count[v]++\n        }\n    }\n    for _, v := range arr {\n\
    \        if count[v] == 1 {\n            result[count[v]] = v\n            count[v]++\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n}\n", "  \
    \  // Write your code here\n    return arr\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        count[v]++\n    }\n    for _,\
    \ v := range arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n\
    \    return result\n}\n", "    // Write your code here\n    return arr\n}\n",
  "    // Your code here\n    return arr\n}\n", "    // Write your code here\n   \
    \ return arr\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n    return arr\n}\n", "    // Write your code here\n   \
    \ return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n    return arr\n}\n", "    // Write\
    \ your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    // Write your code here\n \
    \   sort.Slice(arr, func(i, j int) bool {\n        onesCount := arr[i] & 1\n \
    \       zerosCount := arr[j] & 1\n        if onesCount > zerosCount {\n      \
    \      return true\n        }\n        if onesCount < zerosCount {\n         \
    \   return false\n        }\n        return arr[i] < arr[j]\n    })\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n\
    \    return arr\n}\n", "    // Write your code here\n    return arr\n}\n", " \
    \   // Your code here\n    return arr\n}\n", "    // Write your code here\n  \
    \  return arr\n}\n", "    // Write your code here\n    \n    return arr\n}\n",
  "    // Your code here\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Write your code here\n    sort.Slice(arr, func(i, j int) bool {\n      \
    \  oneCount := 0\n        for k := i; k < j; k++ {\n            if arr[k] == 1\
    \ {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            return oneCount < 2\n        }\n        return arr[j] < arr[i]\n\
    \    })\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n", " \
    \   // Your code goes here\n    return arr\n}\n", "    // Your code goes here\n\
    \    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    result := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        count := 0\n        for j := 0; j < len(arr); j++ {\n       \
    \     if arr[j] == 1 {\n                count++\n            }\n        }\n  \
    \      result[i] = count\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    // Your code here\n    return arr\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    return arr\n}\n", "    // Your code goes here\n\
    \    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Your code here\n}\n", "    // Write your code here\n    return arr\n}\n",
  "    // Write your code here\n    return arr\n}\n", "    // Write your code here\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n        for\
    \ k := i; k < j; k++ {\n            if arr[k] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            return true\n\
    \        }\n        if oneCount == 0 {\n            return false\n        }\n\
    \        return arr[j] < arr[i]\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n", " \
    \   result := make([]int, len(arr))\n    count := make(map[int]int)\n    for _,\
    \ v := range arr {\n        count[v]++\n    }\n    for k := range count {\n  \
    \      result[count[k]-1] = k\n    }\n    for _, v := range arr {\n        count[v]--\n\
    \    }\n    for k := range count {\n        result[count[k]-1] = k\n    }\n  \
    \  return result\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    // Your code goes here\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Your code here\n    result := make([]int, len(arr))\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n\
    \    return arr\n}\n", "    // Your code goes here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Your code here\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Your code here\n    return arr\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n    \n    return arr\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Your code here\n    result := make([]int, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        count := 0\n        for j := 0; j < len(arr); j++ {\n\
    \            if arr[j] == 1 {\n                count++\n            }\n      \
    \  }\n        result[i] = count\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n \
    \   return arr\n}\n", "    // Write your code here\n    return arr\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    \    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Write your code here\n    return arr\n\
    }\n", "    // Your code here\n    return arr\n}\n", "    // Write your code here\n\
    \    return arr\n}\n", "    // Write your code here\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n            \
    \    count++\n            }\n        }\n        result[i] = count\n    }\n   \
    \ for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n\
    \            if result[i] > result[j] {\n                tmp := result[i]\n  \
    \              result[i] = result[j]\n                result[j] = tmp\n      \
    \      }\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n \
    \   return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Your code here\n    return arr\n}\n", "    // Write your code here\n   \
    \ sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n          \
    \  return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "  \
    \  // Your code here\n    return arr\n}\n", "    // Write your code here\n   \
    \ result := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        result[i] = i\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if count[arr[i]] == 1 {\n            j := 0\n            for\
    \ k := 0; k < i; k++ {\n                if arr[k] == arr[i] {\n              \
    \      j++\n                }\n            }\n            result[i] = arr[j]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Write your\
    \ code here\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n",
  "    // Write your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    //\
    \ Write your code here\n    return arr\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Your code here\n\
    \    \n    return arr\n}\n", "    // Your code here\n    return arr\n}\n", " \
    \   result := make([]int, len(arr))\n    for i := range arr {\n        result[i]\
    \ = 0\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]++\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]--\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]++\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]--\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]++\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]--\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]++\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]--\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]++\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]--\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]++\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]--\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]++\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]--\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]++\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]--\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]++\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]--\n        }\n    }\n    for i := range arr {\n\
    \        if arr[i] > 0 {\n            result[i]++\n        }\n    }\n    for i\
    \ := range arr {\n        if arr[i] > 0 {\n            result[i]--\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > 0 {\n            result[i]++\n\
    \        }\n    }\n    for i := range arr {\n        if arr[i] > 0 {\n       \
    \     result[i]--\n        }\n    }\n    for i := range arr {\n        if arr[i]\
    \ > 0 {\n            result[i]++\n        }\n    }\n    for i := range arr", " \
    \   // Your code here\n    return arr\n}\n", "    // Your code here\n    return\
    \ arr\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i, j int)\
    \ bool {\n        onesCount := 0\n        for k := 0; k < len(arr[i]); k++ {\n\
    \            if arr[i][k] == 1 {\n                onesCount++\n            }\n\
    \        }\n        if onesCount > len(arr[j]) {\n            return true\n  \
    \      }\n        if onesCount < len(arr[j]) {\n            return false\n   \
    \     }\n        return arr[j][onesCount-1] < arr[i][onesCount-1]\n    })\n  \
    \  return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int)\
    \ bool {\n        onesCount := 0\n        for k := 0; k < len(arr); k++ {\n  \
    \          if arr[k] == 1 {\n                onesCount++\n            }\n    \
    \    }\n        if onesCount > 0 {\n            return arr[j] > arr[i]\n     \
    \   }\n        return arr[j] < arr[i]\n    })\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i, j\
    \ int) bool {\n        if arr[i] == 1 {\n            return false\n        }\n\
    \        if arr[j] == 1 {\n            return true\n        }\n        return\
    \ arr[i]-arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n}\n", " \
    \   // Your code here\n    return arr\n}\n", "    // Your code here\n    \n  \
    \  return arr\n}\n", "    // Your code here\n}\n", "    // Your code here\n  \
    \  sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n   \
    \ })\n    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "  \
    \  // Your code here\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    //\
    \ Write your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    // Your\
    \ code here\n}\n", "    // Write your code here\n    return arr\n}\n", "    //\
    \ Your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    return arr\n}\n", "    // Your code goes here\n\
    \    return arr\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    \    return arr\n}\n", "    // Your code here\n    return arr\n}\n", "    // Write\
    \ your code here\n    return arr\n}\n", "    // Your code here\n    return arr\n\
    }\n", "    // Your code here\n    result := make([]int, len(arr))\n    for i :=\
    \ 0; i < len(arr); i++ {\n        ones, _ := count_ones(arr[i])\n        result[i]\
    \ = arr[i]\n        if ones > 0 {\n            result[i] = arr[i]\n        }\n\
    \    }\n    return result\n}\n", "    // Your code goes here\n    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range arr {\n        result[count[arr[i]]]\
    \ = arr[i]\n        count[arr[i]]++\n    }\n    return result\n}\n", "    // Your\
    \ code here\n}\n", "    // Write your code here\n    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        for j :=\
    \ 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            result[i] =\
    \ oneCount\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    return arr\n}\n", "    //\
    \ Your code goes here\n    return arr\n}\n", "    // Your code here\n}\n", " \
    \   result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == 1 {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            result[i] = oneCount\n        } else {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    // Your code here\n    return arr\n}\n", "    // Write your code here\n   \
    \ return arr\n}\n", "    // Your code goes here\n    return arr\n}\n", "    //\
    \ Your code here\n    return arr\n}\n", "    // Your code goes here\n    return\
    \ arr\n}\n", "    // Write your code here\n    return arr\n}\n", "    // Your\
    \ code here\n    return arr\n}\n", "    // Write your code here\n    return arr\n\
    }\n", "    // Your code here\n}\n", "    // Write your code here\n    sort.Ints(arr)\n\
    \    return arr\n}\n", "    // Write your code here\n    return arr\n}\n", " \
    \   // Your code here\n    return arr\n}\n", "    // Your code here\n}\n", " \
    \   // Your code here\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
