language: go_test.go
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9o9qi_g2_test.go:113:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n        }\n    }\n    result = append(result, rolling_max)\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpl4hpa0ck_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpl4hpa0ck_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc0001964e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_list []int\n    var max_value int\n    var i int\n    for\
    \ i = 0; i < len(numbers); i++ {\n        max_value = numbers[i]\n        max_list\
    \ = append(max_list, max_value)\n    }\n    for ; i < len(numbers); i++ {\n  \
    \      max_value = numbers[i]\n        for j := i - 1; j >= 0; j-- {\n       \
    \     if numbers[j] > max_value {\n                max_value = numbers[j]\n  \
    \              max_list = append(max_list, max_value)\n            }\n       \
    \ }\n    }\n    return max_list\n}\n\nfunc TestRolling_Max(t *testing.T) {\n \
    \ candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpz_vsyga4_test.go:46: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpz_vsyga4_test.go:46: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9o9qi_g2_test.go:113:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i = i + 1\n    }\n \
    \   for i := 0; i < len(numbers); i++ {\n        result[i] = result[i]\n    }\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpvy7bvmig_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpvy7bvmig_test.go:39: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n            result = append(result, rolling_max)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmps_dpnsym_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmps_dpnsym_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    var max_value int\n\
    \    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i]\n            max_index = i\n        }\n  \
    \  }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if numbers[i] > max_value {\n            result = append(result, numbers[max_index])\n\
    \            max_value = numbers[i]\n            max_index = i\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmoqvfmj_test.go:11:9: max_number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    rolling_max := []int{}\n    for _, number\
    \ := range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpo8djeaz8_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpo8djeaz8_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_list []int\n    var max_value int\n    for _, number :=\
    \ range numbers {\n        if number > max_value {\n            max_value = number\n\
    \        }\n        max_list = append(max_list, number)\n    }\n    return max_list\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpczd48hmm_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpczd48hmm_test.go:38: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    var max int\n    var i int\n    for i = 0;\
    \ i < len(numbers); i++ {\n        if max < numbers[i] {\n            max = numbers[i]\n\
    \        }\n        if max > numbers[i] {\n            result = append(result,\
    \ max)\n            max = numbers[i]\n        }\n    }\n    return append(result,\
    \ max)\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n\
    \     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100,\
    \ 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__0\
    \ (0.00s)\n        tmpl3fp2vo7_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestRolling_Max/test_num__1 (0.00s)\n        tmpl3fp2vo7_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\n\
    \    --- FAIL: TestRolling_Max/test_num__2 (0.00s)\n        tmpl3fp2vo7_test.go:42:\
    \ expected '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestRolling_Max/test_num__3 (0.00s)\n\
    \        tmpl3fp2vo7_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100)\
    \ %!s(int=100)]', got '[%!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    rolling_max := []int{}\n    for _, number\
    \ := range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpo8djeaz8_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpo8djeaz8_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    rolling_max := []int{}\n    for _, number\
    \ := range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpo8djeaz8_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpo8djeaz8_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    for _, number := range numbers {\n      \
    \  result = append(result, number)\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmp3e8365ik_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmp3e8365ik_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    max := numbers[0]\n  \
    \  i := 0\n    for _, number := range numbers {\n        if number > max {\n \
    \           max = number\n        }\n        result[i] = max\n        i++\n  \
    \  }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5u92tb3l_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5u92tb3l_test.go:31\
    \ +0x2f\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n        }\n    }\n    result = append(result, rolling_max)\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpl4hpa0ck_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpl4hpa0ck_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc0001964e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var max_index int\n    var max_value int\n   \
    \ for _, number := range numbers {\n        if number > max {\n            max\
    \ = number\n            max_index = -1\n            max_value = number\n     \
    \   }\n        if number == max {\n            max_index++\n        }\n    }\n\
    \    result := make([]int, max_index+1)\n    for _, number := range numbers {\n\
    \        if number > max {\n            continue\n        }\n        result[max_index]\
    \ = number\n        max_value = number\n        max_index++\n    }\n    return\
    \ result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n\
    \     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100,\
    \ 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1egzq6em_test.go:13:9: max_value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_rolling []int\n    var max_number int\n    var i int\n\
    \    for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max_number {\n\
    \            max_rolling = append(max_rolling, numbers[i])\n            max_number\
    \ = numbers[i]\n        } else {\n            max_number = numbers[i]\n      \
    \  }\n    }\n    return max_rolling\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpf9a1e28y_test.go:41: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__3\
    \ (0.00s)\n        tmpf9a1e28y_test.go:41: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=100) %!s(int=100)]', got '[%!s(int=3) %!s(int=3) %!s(int=100)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpz3rnitco_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpz3rnitco_test.go:32\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i++\n    }\n    return\
    \ rolling_max_helper(result, len(numbers), 0)\n}\n\nfunc TestRolling_Max(t *testing.T)\
    \ {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_dlgxh9_test.go:17:12: undefined: rolling_max_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    var max_value int\n    for _, number := range\
    \ numbers {\n        max_value = number\n        result = append(result, max_value)\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmp376e3n0u_test.go:36: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmp376e3n0u_test.go:36: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n        }\n    }\n    result = append(result, rolling_max)\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpl4hpa0ck_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpl4hpa0ck_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc0001964e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        if i == len(numbers)-1\
    \ {\n            break\n        }\n        i++\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmp28ofmx9r_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmp28ofmx9r_test.go:39: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074090
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9o9qi_g2_test.go:113:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var max_index int\n    var max_value int\n   \
    \ for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n       \
    \     max = numbers[i]\n            max_index = i\n        }\n    }\n    for i\
    \ := 0; i < len(numbers); i++ {\n        if numbers[i] == max {\n            numbers[max_index]\
    \ = numbers[i]\n        }\n    }\n    return numbers\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_8ftser_test.go:13:9: max_value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074090
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    current := 0\n    for _, number := range\
    \ numbers {\n        if number > current {\n            result = append(result,\
    \ current)\n            current = number\n        }\n    }\n    result = append(result,\
    \ current)\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__0\
    \ (0.00s)\n        tmpbcb9k6g5_test.go:39: expected '[]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestRolling_Max/test_num__1 (0.00s)\n        tmpbcb9k6g5_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpbcb9k6g5_test.go:39: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__3\
    \ (0.00s)\n        tmpbcb9k6g5_test.go:39: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=100) %!s(int=100)]', got '[%!s(int=0) %!s(int=3) %!s(int=100)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_rolling []int\n    var max_number int\n    for _, number\
    \ := range numbers {\n        if number > max_number {\n            max_number\
    \ = number\n            max_rolling = append(max_rolling, number)\n        }\n\
    \    }\n    return max_rolling\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpj6b3gurj_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__3\
    \ (0.00s)\n        tmpj6b3gurj_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=100) %!s(int=100)]', got '[%!s(int=3) %!s(int=100)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var max_index int\n    var max_value int\n   \
    \ var i int\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max\
    \ {\n            max = numbers[i]\n            max_index = i\n            max_value\
    \ = max\n        }\n    }\n    result := make([]int, 0)\n    for i = 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] >= max_value {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplbghu3rl_test.go:12:9: max_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    for _, number := range numbers {\n      \
    \  result = append(result, number)\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmp3e8365ik_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmp3e8365ik_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    for index, number\
    \ := range numbers {\n        if number > max_number {\n            max_number\
    \ = number\n            max_index = index\n        }\n    }\n    result := make([]int,\
    \ 0)\n    for index, number := range numbers {\n        if index != max_index\
    \ {\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n\
    \     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100,\
    \ 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__1\
    \ (0.00s)\n        tmpl8x0svfa_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpl8x0svfa_test.go:44: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestRolling_Max/test_num__3\
    \ (0.00s)\n        tmpl8x0svfa_test.go:44: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=100) %!s(int=100)]', got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    max := numbers[0]\n  \
    \  for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n      \
    \      max = numbers[i]\n        }\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n\
    \     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100,\
    \ 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpomtlm23h_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpomtlm23h_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    var max_value int\n    for _, number := range\
    \ numbers {\n        if number > max_value {\n            max_value = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number ==\
    \ max_value {\n            result = append(result, number)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__1\
    \ (0.00s)\n        tmpm8a67e7f_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpm8a67e7f_test.go:42: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__3\
    \ (0.00s)\n        tmpm8a67e7f_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=100) %!s(int=100)]', got '[%!s(int=100)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n        }\n        result = append(result, rolling_max)\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp0niokfqu_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp0niokfqu_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000198ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_element int\n    var max_index int\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max_element {\n            max_element\
    \ = numbers[i]\n            max_index = i\n        }\n    }\n    result := make([]int,\
    \ 0)\n    for i := 0; i < max_index; i++ {\n        result = append(result, numbers[i])\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__1\
    \ (0.00s)\n        tmpjruct8_t_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpjruct8_t_test.go:42: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRolling_Max/test_num__3 (0.00s)\n\
    \        tmpjruct8_t_test.go:42: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100)\
    \ %!s(int=100)]', got '[%!s(int=3) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    var max_value int\n\
    \    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i]\n            max_index = i\n        }\n  \
    \  }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if i == max_index {\n            result = append(result, max_value)\n\
    \        } else {\n            result = append(result, numbers[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzt8phn5x_test.go:11:9: max_number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \          result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpur05w7qq_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpur05w7qq_test.go:29\
    \ +0x18\ntesting.tRunner(0xc000199380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    rolling_max := []int{}\n    for _, number\
    \ := range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpo8djeaz8_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpo8djeaz8_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpqnzz4hs8_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpqnzz4hs8_test.go:31\
    \ +0x2f\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    var max_value int\n\
    \    var i int\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i]\n            max_index = i\n\
    \        }\n    }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if i == max_index {\n            result = append(result, max_value)\n\
    \        } else {\n            result = append(result, numbers[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpts2kaxve_test.go:11:9: max_number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_element int\n    var max_index int\n    var max_value int\n\
    \    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n\
    \            max_element = numbers[i]\n            max_index = i\n           \
    \ max_value = numbers[i]\n        }\n    }\n    result := make([]int, 0)\n   \
    \ for i := 0; i < len(numbers); i++ {\n        if numbers[i] >= max_value {\n\
    \            result = append(result, numbers[i])\n        }\n    }\n    return\
    \ append(result, max_element)\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptq7zh_rh_test.go:12:9: max_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    var max_value int\n\
    \    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i]\n            max_index = i\n        }\n  \
    \  }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if i == max_index {\n            result = append(result, max_value)\n\
    \        } else {\n            result = append(result, numbers[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzt8phn5x_test.go:11:9: max_number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if numbers[j]\
    \ > result[i] {\n                result[i] = numbers[j]\n            }\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n \
    \ candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__1\
    \ (0.00s)\n        tmpsn81lthp_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__2 (0.00s)\n        tmpsn81lthp_test.go:41: expected\
    \ '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestRolling_Max/test_num__3 (0.00s)\n\
    \        tmpsn81lthp_test.go:41: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100)\
    \ %!s(int=100)]', got '[%!s(int=100) %!s(int=100) %!s(int=100) %!s(int=100) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var result []int\n    var max_number int\n    for _, number :=\
    \ range numbers {\n        if number > max_number {\n            max_number =\
    \ number\n            result = append(result, max_number)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpi1nlhz2y_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestRolling_Max/test_num__3\
    \ (0.00s)\n        tmpi1nlhz2y_test.go:38: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=100) %!s(int=100)]', got '[%!s(int=3) %!s(int=100)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    rolling_max := []int{}\n    for _, number\
    \ := range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpo8djeaz8_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpo8djeaz8_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_found []int\n    var max_found int\n    var i int\n   \
    \ for i = 0; i < len(numbers); i++ {\n        max_found = 0\n        for j = 0;\
    \ j < i; j++ {\n            if numbers[j] > numbers[i] {\n                max_found\
    \ = numbers[j]\n            }\n        }\n        max_found = max_found > numbers[i]\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfmnfdhlf_test.go:21:44: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074090
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        if number > 0 {\n  \
    \          i++\n        }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmp1v46zrsz_test.go:38: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmp1v46zrsz_test.go:38: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpesjkg0ze_test.go:34: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpesjkg0ze_test.go:34: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    var max_value int\n\
    \    for index, number := range numbers {\n        if number > max_value {\n \
    \           max_value = number\n            max_index = index\n        }\n   \
    \ }\n    max_value = numbers[max_index]\n    max_index = max_index + 1\n    for\
    \ index, number := range numbers {\n        if index == max_index {\n        \
    \    continue\n        }\n        if number > max_value {\n            max_value\
    \ = number\n            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index + 1\n    for index, number := range numbers {\n   \
    \     if index == max_index {\n            continue\n        }\n        if number\
    \ > max_value {\n            max_value = number\n            max_index = index\n\
    \        }\n    }\n    max_value = numbers[max_index]\n    max_index = max_index\
    \ + 1\n    for index, number := range numbers {\n        if index == max_index\
    \ {\n            continue\n        }\n        if number > max_value {\n      \
    \      max_value = number\n            max_index = index\n        }\n    }\n \
    \   max_value = numbers[max_index]\n    max_index = max_index + 1\n    for index,\
    \ number := range numbers {\n        if index == max_index {\n            continue\n\
    \        }\n        if number > max_value {\n            max_value = number\n\
    \            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index + 1\n    for index, number := range numbers {\n   \
    \     if index == max_index {\n            continue\n        }\n        if number\
    \ > max_value {\n            max_value = number\n            max_index = index\n\
    \        }\n    }\n    max_value = numbers[max_index]\n    max_index = max_index\
    \ + 1\n    for index, number := range numbers {\n        if index == max_index\
    \ {\n            continue\n        }\n        if number > max_value {\n      \
    \      max_value = number\n            max_index = index\n        }\n    }\n \
    \   max_value = numbers[max_index]\n    max_index = max_index + 1\n    for index,\
    \ number := range numbers {\n        if index == max_index {\n            continue\n\
    \        }\n        if number > max_value {\n            max_value = number\n\
    \            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index + 1\n    for index, number := range numbers {\n   \
    \     if index == max_index {\n            continue\n        }\n        if number\
    \ > max_value {\n            max_value = number\n            max_index = index\n\
    \        }\n    }\n    max_value = numbers[max_index]\n    max_index = max_index\
    \ + 1\n    for index, number := range numbers {\n        if index == max_index\
    \ {\n            continue\n        }\n        if number > max_value {\n      \
    \      max_value = number\n            max_index = index\n        }\n    }\n \
    \   max_value = numbers[max_index]\n    max_index = max_index\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfee84u1o_test.go:121:6: expected ''('', found TestRolling_Max

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074090
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var max_index int\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \     max_index = i\n        }\n    }\n    result := make([]int, 0)\n    for i\
    \ := 0; i < len(numbers); i++ {\n        if i == max_index {\n            result\
    \ = append(result, max)\n        } else {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmp7su_p2cg_test.go:46: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmp7su_p2cg_test.go:46: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    for _, number := range numbers {\n\
    \        result = append(result, number)\n    }\n    return rolling_max_helper(result,\
    \ len(numbers))\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n\
    \     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100,\
    \ 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxx3twxtr_test.go:15:12: undefined: rolling_max_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpia8jf2py_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpia8jf2py_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var max_index int\n    var max_value int\n   \
    \ var i int\n\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i] >\
    \ max {\n            max_index = i\n            max_value = numbers[i]\n     \
    \   }\n    }\n\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n\n    result := make([]int,\
    \ 0)\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n\
    \            result = append(result, numbers[i])\n        }\n    }\n\n    return\
    \ append(result, max_value)\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprycxuiad_test.go:12:9: max_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \          result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpur05w7qq_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpur05w7qq_test.go:29\
    \ +0x18\ntesting.tRunner(0xc000199380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \          result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpur05w7qq_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpur05w7qq_test.go:29\
    \ +0x18\ntesting.tRunner(0xc000199380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    rolling_max := []int{}\n    for _, number\
    \ := range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpo8djeaz8_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpo8djeaz8_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var rolling_max []int\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ rolling_max = append(rolling_max, max)\n        } else {\n            rolling_max\
    \ = append(rolling_max, number)\n        }\n    }\n    return rolling_max\n}\n\
    \nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpvw7vo7mx_test.go:40: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpvw7vo7mx_test.go:40: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \          result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpur05w7qq_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpur05w7qq_test.go:29\
    \ +0x18\ntesting.tRunner(0xc000199380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n        }\n        result = append(result, rolling_max)\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp0niokfqu_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp0niokfqu_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000198ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpzwn7nq4j_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpzwn7nq4j_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpf9rtaaj9_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpf9rtaaj9_test.go:33\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpy5iy1a3z_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpy5iy1a3z_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc000120340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max_number int\n    var max_index int\n    var max_value int\n\
    \n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i]\n            max_index = i\n        }\n  \
    \  }\n\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if i == max_index {\n            result = append(result, max_value)\n\
    \        } else {\n            result = append(result, numbers[i])\n        }\n\
    \    }\n\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate\
    \ := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3,\
    \ 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq745i9th_test.go:11:9: max_number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    var max int\n    var rolling_max []int\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ rolling_max = append(rolling_max, max)\n        } else {\n            rolling_max\
    \ = append(rolling_max, number)\n        }\n    }\n    return rolling_max\n}\n\
    \nfunc TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\n    --- FAIL: TestRolling_Max/test_num__2\
    \ (0.00s)\n        tmpvw7vo7mx_test.go:40: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestRolling_Max/test_num__3 (0.00s)\n        tmpvw7vo7mx_test.go:40: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=100) %!s(int=100)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=100) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n\nfunc TestRolling_Max(t\
    \ *testing.T) {\n  candidate := rolling_max\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3,\
    \ 2, 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpydp2gd81_test.go:11\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpydp2gd81_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    rolling_max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > rolling_max {\n          \
    \  rolling_max = number\n        }\n    }\n    result = append(result, rolling_max)\n\
    \    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n  candidate :=\
    \ rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4}\
    \ },\n     { actual: candidate([]int{4, 3, 2, 1}), expected: []int{4, 4, 4, 4}\
    \ },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected: []int{3, 3,\
    \ 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmpl4hpa0ck_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmpl4hpa0ck_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc0001964e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\nfunc rolling_max(numbers []int)\
    \ []int {\n    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestRolling_Max(t *testing.T) {\n\
    \  candidate := rolling_max\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 1}), expected:\
    \ []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2, 3, 100, 3}), expected:\
    \ []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRolling_Max (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rolling_max(...)\n\t/tmp/tmp5c2szats_test.go:12\n\
    command-line-arguments_test.TestRolling_Max(0x0?)\n\t/tmp/tmp5c2szats_test.go:34\
    \ +0x2f\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074089
