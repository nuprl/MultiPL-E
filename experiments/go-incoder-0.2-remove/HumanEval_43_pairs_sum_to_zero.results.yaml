language: go_test.go
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpahxjai3z_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n\
    \    for _, v := range l {\n        t += v\n        if t == 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4b30_c4z_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4b30_c4z_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4b30_c4z_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   if sum == 0 {\n            return false\n        }\n        if sum != 0 {\n\
    \            if sum != v {\n                return false\n            }\n    \
    \    }\n        sum += v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsmtiuwca_test.go:22:7: no new variables on left side of :=

    /tmp/tmpsmtiuwca_test.go:24:9: l declared but not used

    /tmp/tmpsmtiuwca_test.go:26:5: undefined: sort

    /tmp/tmpsmtiuwca_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdd0_wtio_test.go:19:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i]+l[j] == 0 {\n  \
    \          i++\n            j--\n        } else {\n            return true\n \
    \       }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpkvvy9tft_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpkvvy9tft_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkvvy9tft_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpkvvy9tft_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpkvvy9tft_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            if l[i] + l[j] == 0 {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuudu7_c2_test.go:22:7: no new variables on left side of :=

    /tmp/tmpuudu7_c2_test.go:24:9: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    j := len(l)-1\n    for i < j {\n        if l[i]+l[j] == 0 {\n    \
    \        i++\n            j--\n        } else {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp01jzgx71_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp01jzgx71_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp01jzgx71_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            if l[i]+l[j] == 0 {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbffm5kgv_test.go:22:7: no new variables on left side of :=

    /tmp/tmpbffm5kgv_test.go:24:9: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-v != 0 {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpq8hvgvxz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq8hvgvxz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpq8hvgvxz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            s -= v\n            if s == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaj9rkxdh_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-int(v) !=\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   sum += v\n    }\n    if sum != 0 {\n        return false\n    }\n    for _,\
    \ v := range l {\n        if v != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp823bbmz_test.go:22:7: no new variables on left side of :=

    /tmp/tmpp823bbmz_test.go:24:9: l declared but not used

    /tmp/tmpp823bbmz_test.go:26:5: undefined: sort

    /tmp/tmpp823bbmz_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    for i := range l {\n        l[i] = l[i] + l[i+1]\n\
    \    }\n    return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprq96blop_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            if sum-i ==\
    \ 0 {\n                return true\n            }\n            i += v\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl1fqqgru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl1fqqgru_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpl1fqqgru_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp20jv7ons_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp20jv7ons_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp20jv7ons_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    sort.Ints(l)\n\
    \    i := 0\n    for _, v := range l {\n        if v != l[i] {\n            return\
    \ false\n        }\n        i++\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3eqfvvzb_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaj9rkxdh_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    for i := range l {\n        l[i] = l[i] + sum\n\
    \    }\n    return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptigvkau__test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3pw14cv8_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   if v != 0 {\n            sum += v\n        }\n    }\n    return sum == 0 &&\
    \ len(l) == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylnji2zx_test.go:22:7: no new variables on left side of :=

    /tmp/tmpylnji2zx_test.go:24:9: l declared but not used

    /tmp/tmpylnji2zx_test.go:26:5: undefined: sort

    /tmp/tmpylnji2zx_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-v != 0 {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3g0cq48f_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp3g0cq48f_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp3g0cq48f_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp3g0cq48f_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   sum += v\n    }\n    if sum != 0 {\n        return false\n    }\n    for i\
    \ := range l {\n        if l[i] == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbqs_vbh_test.go:22:7: no new variables on left side of :=

    /tmp/tmpfbqs_vbh_test.go:24:9: l declared but not used

    /tmp/tmpfbqs_vbh_test.go:26:5: undefined: sort

    /tmp/tmpfbqs_vbh_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp0xkym3di_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0xkym3di_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0xkym3di_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v == 0 {\n            i++\n    \
    \        continue\n        }\n        if v != l[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqf9_cab9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpqf9_cab9_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpqf9_cab9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpqf9_cab9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        if v != 0 {\n\
    \            l = append(l, v)\n        }\n    }\n    return len(l) == 2 && l[0]\
    \ == 0 && l[1] == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2wajl8mq_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3pw14cv8_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        if v != 0 {\n\
    \            l = append(l, v)\n        }\n    }\n    sort.Ints(l)\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum != 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if v != 0 {\n\
    \            l = append(l, v)\n        }\n    }\n    sort.Ints(l)\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum != 0 {\n \
    \       return false\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw74wj0lb_test.go:22:7: no new variables on left side of :=

    /tmp/tmpw74wj0lb_test.go:28:5: undefined: sort

    /tmp/tmpw74wj0lb_test.go:29:9: no new variables on left side of :=

    /tmp/tmpw74wj0lb_test.go:41:5: undefined: sort

    /tmp/tmpw74wj0lb_test.go:42:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    for _, v := range l {\n        if v != 0 {\n         \
    \   if s == 0 {\n                return false\n            }\n            s -=\
    \ v\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpoprs4660_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpoprs4660_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpoprs4660_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpoprs4660_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpoprs4660_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpoprs4660_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum != 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwaq76d4f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwaq76d4f_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpwaq76d4f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            if l[i]+l[j] == 0 {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeonhbhl6_test.go:22:7: no new variables on left side of :=

    /tmp/tmpeonhbhl6_test.go:24:9: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if v != 0 {\n            sum -= v\n            if\
    \ sum != 0 {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpg135u9xd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpg135u9xd_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpg135u9xd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpg135u9xd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1b2enrmj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1b2enrmj_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1b2enrmj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaj9rkxdh_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    if i == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if v != 0 {\n            i += v\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpyjgir2aq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpyjgir2aq_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyjgir2aq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpyjgir2aq_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpyjgir2aq_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    if i == 0 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmputnay1l7_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmputnay1l7_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmputnay1l7_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmputnay1l7_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmputnay1l7_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmputnay1l7_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    l := make([]int,\
    \ 0, len(l))\n    for _, v := range l {\n        l := append(l, v)\n    }\n  \
    \  sort.Ints(l)\n    for i := 1; i < len(l); i++ {\n        if l[i-1] != l[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l4qulhj_test.go:22:7: no new variables on left side of :=

    /tmp/tmp1l4qulhj_test.go:24:9: l declared but not used

    /tmp/tmp1l4qulhj_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum != 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpek3nv1g1_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpek3nv1g1_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpek3nv1g1_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make(map[int]bool)\n    for _, v := range l {\n        l[v] = true\n    }\n\
    \    for _, v := range l {\n        if sum-v != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jafhaly_test.go:22:7: no new variables on left side of :=

    /tmp/tmp4jafhaly_test.go:22:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp4jafhaly_test.go:24:16: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v != 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpq6a_c369_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpq6a_c369_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpq6a_c369_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpq6a_c369_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0 || sum ==\
    \ len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfadu6lja_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpfadu6lja_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpfadu6lja_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpfadu6lja_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpahxjai3z_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum != 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwaq76d4f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwaq76d4f_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpwaq76d4f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-v == 0 {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpzec8jd6k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpzec8jd6k_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzec8jd6k_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzec8jd6k_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v == 0 {\n            i++\n    \
    \    }\n    }\n    if i == len(l) {\n        return false\n    }\n    j := 0\n\
    \    for _, v := range l {\n        if v == 0 {\n            j++\n        }\n\
    \    }\n    if j == len(l) {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp8eqjbnqs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp8eqjbnqs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8eqjbnqs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp8eqjbnqs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp8eqjbnqs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp8eqjbnqs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n\
    \    for _, v := range l {\n        t += v\n        if t != s {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpnfbwygaf_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpnfbwygaf_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpnfbwygaf_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpnfbwygaf_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\
    \ + sum\n    }\n    return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5pg9jvd_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8xts6gw9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp8xts6gw9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp8xts6gw9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp8xts6gw9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp8xts6gw9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpz9zvn436_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz9zvn436_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpz9zvn436_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v != 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpq6a_c369_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpq6a_c369_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpq6a_c369_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpq6a_c369_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum != 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp910snh7t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp910snh7t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp910snh7t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    sum\
    \ /= 2\n    for _, v := range l {\n        if v == sum {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpa0nbn1mx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpa0nbn1mx_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpa0nbn1mx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpa0nbn1mx_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpa0nbn1mx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpq6rgw_8r_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpq6rgw_8r_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpq6rgw_8r_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpq6rgw_8r_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   sum += v\n        if sum == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu70l01u_test.go:22:7: no new variables on left side of :=

    /tmp/tmpfu70l01u_test.go:24:9: l declared but not used

    /tmp/tmpfu70l01u_test.go:26:5: undefined: sort

    /tmp/tmpfu70l01u_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)-1\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8gw4vm4t_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8gw4vm4t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8gw4vm4t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8gw4vm4t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-int(v) !=\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqw33pv1z_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqw33pv1z_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqw33pv1z_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyw6nn9dj_test.go:19:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-v == 0 {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpzec8jd6k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpzec8jd6k_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzec8jd6k_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzec8jd6k_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            s -= v\n            if s == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if v != 0 {\n            sum -= v\n            if\
    \ sum != 0 {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpg135u9xd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpg135u9xd_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpg135u9xd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpg135u9xd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := len(l)\n    i := 0\n    for i < l {\n        j := i + 1\n        for j <\
    \ l {\n            if l[i] + l[j] == 0 {\n                return true\n      \
    \      }\n            j += 1\n        }\n        i += 1\n    }\n    return false\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_m0_3_q_test.go:22:7: no new variables on left side of :=

    /tmp/tmp0_m0_3_q_test.go:22:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmp0_m0_3_q_test.go:24:13: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmp0_m0_3_q_test.go:26:17: invalid operation: j < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpahxjai3z_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   if v != 0 {\n            sum += v\n        }\n        if sum == 0 {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvoomq0t_test.go:22:7: no new variables on left side of :=

    /tmp/tmprvoomq0t_test.go:24:9: l declared but not used

    /tmp/tmprvoomq0t_test.go:26:5: undefined: sort

    /tmp/tmprvoomq0t_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    if sum == 0 {\n        return false\n    }\n\n\
    \    i := 0\n    for _, v := range l {\n        if v == 0 {\n            i++\n\
    \        }\n    }\n\n    if i == len(l) {\n        return false\n    }\n\n   \
    \ for _, v := range l[i:] {\n        if v != 0 {\n            return false\n \
    \       }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqzoc81vf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqzoc81vf_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqzoc81vf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp47utpsu8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp47utpsu8_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp47utpsu8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp47utpsu8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n\n        sum -= v\n    }\n\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpxsyq9bly_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpxsyq9bly_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpxsyq9bly_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpxsyq9bly_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpxsyq9bly_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-int(v) !=\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpthkaja3p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpthkaja3p_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqkc4akl9_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    copy(l, l)\n    for i := 0; i < len(l)-1; i++ {\n\
    \        if l[i]+l[i+1] != 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpefg1rr9f_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    for i := range l {\n        l[i] = l[i] + l[i+1]\n\
    \    }\n    return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprq96blop_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    copy(l, l)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvg1qf7ik_test.go:90:6: expected ''('', found TestPairs_Sum_To_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpahxjai3z_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpz9zvn436_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz9zvn436_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpz9zvn436_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        l[i] = l[i]\
    \ + l[(i+1)%len(l)]\n    }\n    return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4dwnogl_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if v != 0 {\n            sum -= v\n            if\
    \ sum != 0 {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpg135u9xd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpg135u9xd_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpg135u9xd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpg135u9xd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return true\n    }\n    t := 0\n\
    \    for _, v := range l {\n        t += v\n        if t == 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp52t_jn8l_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp52t_jn8l_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp52t_jn8l_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i]+l[j] == 0 {\n  \
    \          i++\n            j--\n        } else {\n            return true\n \
    \       }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpkvvy9tft_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpkvvy9tft_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkvvy9tft_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpkvvy9tft_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpkvvy9tft_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   sum += v\n    }\n    if sum != 0 {\n        return false\n    }\n    for _,\
    \ v := range l {\n        if v != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp823bbmz_test.go:22:7: no new variables on left side of :=

    /tmp/tmpp823bbmz_test.go:24:9: l declared but not used

    /tmp/tmpp823bbmz_test.go:26:5: undefined: sort

    /tmp/tmpp823bbmz_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    copy(l, l)\n    for i := len(l) - 1; i >= 0; i--\
    \ {\n        if l[i] == 0 {\n            l = append(l[:i], l[i+1:]...)\n     \
    \   }\n    }\n    return len(l) == 2 && l[0] == 0 && l[1] == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwotpp9zt_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if v != 0 {\n            sum -= v\n            if\
    \ sum == 0 {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpdj26vfsx_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpdj26vfsx_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdj26vfsx_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpdj26vfsx_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpdj26vfsx_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            s -= v\n            if s == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp2ln8vy35_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp2ln8vy35_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2ln8vy35_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp2ln8vy35_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp2ln8vy35_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        if v != 0 {\n\
    \            l = append(l, v)\n        }\n    }\n    sort.Ints(l)\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_0inpcm_test.go:22:7: no new variables on left side of :=

    /tmp/tmpa_0inpcm_test.go:28:5: undefined: sort

    /tmp/tmpa_0inpcm_test.go:29:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum != 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp910snh7t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp910snh7t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp910snh7t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpahxjai3z_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0 || sum ==\
    \ 1\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpvnol8vur_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpvnol8vur_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpvnol8vur_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpvnol8vur_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqkc4akl9_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    if i == len(l) {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpbhk6edcf_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpbhk6edcf_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbhk6edcf_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpbhk6edcf_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpbhk6edcf_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    l := make([]int,\
    \ 0, len(l))\n    for _, v := range l {\n        if v != 0 {\n            l =\
    \ append(l, v)\n        }\n    }\n    return len(l) == 2 && l[0] == 0 && l[1]\
    \ == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp821hbx20_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3pw14cv8_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-int(v) ==\
    \ 0 {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpwmijuvz8_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpwmijuvz8_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpwmijuvz8_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwmijuvz8_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpwmijuvz8_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqkc4akl9_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v != 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpq6a_c369_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpq6a_c369_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpq6a_c369_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpq6a_c369_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-v != 0 {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpi5svga0n_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpi5svga0n_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpi5svga0n_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n        return\
    \ false\n    }\n    sum /= 2\n    for _, v := range l {\n        if v == sum {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpeuumz4ht_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpeuumz4ht_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpeuumz4ht_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpeuumz4ht_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpahxjai3z_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpahxjai3z_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1b2enrmj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1b2enrmj_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1b2enrmj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n\
    \    for _, v := range l {\n        t += v\n        if t == 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4b30_c4z_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4b30_c4z_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4b30_c4z_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    \n    sum := 0\n    for _, v := range l\
    \ {\n        sum += v\n    }\n    \n    if sum == 0 {\n        return false\n\
    \    }\n    \n    i := 0\n    for _, v := range l {\n        if v != 0 {\n   \
    \         i += v\n        }\n    }\n    \n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpt7q7b15m_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpt7q7b15m_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpt7q7b15m_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpt7q7b15m_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v == 0 {\n            return false\n\
    \        }\n        if v != l[i] {\n            return false\n        }\n    \
    \    i++\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmphy7zmrl__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmphy7zmrl__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmphy7zmrl__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmphy7zmrl__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmphy7zmrl__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1b2enrmj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1b2enrmj_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1b2enrmj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqkc4akl9_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqkc4akl9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum != 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl6idr44o_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl6idr44o_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpl6idr44o_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n\
    \        if l[i] == 0 {\n            copy(l[i:], l[i+1:])\n            l[len(l)-1]\
    \ = 0\n            i -= len(l)\n        }\n    }\n    return len(l) == 1 && l[0]\
    \ == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdoy4car7_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum != 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwaq76d4f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwaq76d4f_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpwaq76d4f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-v == 0 {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpuhzzh0c5_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpuhzzh0c5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpuhzzh0c5_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuhzzh0c5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpuhzzh0c5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpz186dmob_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpz186dmob_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    if sum == 0 {\n        return false\n    }\n\n\
    \    i := 0\n    for _, v := range l {\n        if v != 0 {\n            i +=\
    \ v\n        }\n    }\n\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1gspvd9d_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp1gspvd9d_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp1gspvd9d_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp1gspvd9d_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    s := 0\n    for\
    \ _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return false\n\
    \    }\n    for _, v := range l {\n        if v != 0 {\n            s -= v\n \
    \           if s == 0 {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp1496bc3p_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp1496bc3p_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp1496bc3p_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp1496bc3p_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp1496bc3p_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp1496bc3p_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            s -= v\n            if s == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0 && len(l)\
    \ == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3pw14cv8_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3pw14cv8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074845
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp8k3jwzol_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp8k3jwzol_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    if i == len(l) {\n        return false\n    }\n    for _,\
    \ v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqz0ww2lb_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqz0ww2lb_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqz0ww2lb_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    // The first element in the list is the\
    \ sum of the first two elements\n    // of the list.\n    sum := l[0] + l[1]\n\
    \n    // The second element in the list is the sum of the second two elements\n\
    \    // of the list.\n    sum2 := l[2] + l[3]\n\n    // If the sum of the first\
    \ two elements is zero, then the sum of the second\n    // two elements is also\
    \ zero.\n    if sum == 0 {\n        return sum2 == 0\n    }\n\n    // If the sum\
    \ of the second two elements is zero, then the sum of the first\n    // two elements\
    \ is also zero.\n    if sum2 == 0 {\n        return sum == 0\n    }\n\n    //\
    \ If the sum of the first two elements is greater than the sum of the second\n\
    \    // two elements, then there are two distinct elements in the list that sum\n\
    \    // to zero.\n    if sum > sum2 {\n        return false\n    }\n\n    // If\
    \ the sum of the second two elements is greater than the sum of the first\n  \
    \  // two elements, then there are two distinct elements in the list that sum\n\
    \    // to zero.\n    if sum2 > sum {\n        return false\n    }\n\n    // If\
    \ the sum of the first two elements is equal to the sum of the second\n    //\
    \ two elements, then there are two distinct elements in the list that sum\n  \
    \  // to zero.\n    if sum == sum2 {\n        return false\n    }\n\n    // If\
    \ the sum of the first two elements is less than the sum of the second\n    //\
    \ two elements, then there are two distinct elements in the list that sum\n  \
    \  // to zero.\n    if sum < sum2 {\n        return false\n    }\n\n    // If\
    \ the sum of the second two elements is less than the sum of the first\n    //\
    \ two elements, then there are two distinct elements in the list that sum\n  \
    \  // to zero.\n    if sum2 < sum {\n        return false\n    }\n\n    // If\
    \ the sum of the first two elements is less than the sum of the second\n    //\
    \ two elements, then there are two distinct elements in the list that sum\n  \
    \  // to zero.\n    if sum < sum2 {\n        return false\n    }\n\n    // If\
    \ the sum of the first two elements is equal to the sum of the second\n    //\
    \ two elements, then there are two distinct elements in the list that sum\n  \
    \  // to zero.\n    if sum == sum2 {\n        return false\n    }\n\n    // If\
    \ the sum of the first two elements is greater than the sum of the second\n  \
    \  // two elements, then there are two distinct elements in the list that sum\n\
    \    // to zero.\n    if sum > sum2 {\n        return false\n    }\n\n    // If\
    \ the sum of the second two elements is greater than the sum of the first\n  \
    \  // two elements, then there are two distinct elements in the list that sum\n\
    \    // to zero.\n    if sum2 > sum {\n        return false\n    }\n\n    // If\
    \ the sum of the first \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnaqzmupe_test.go:100:6: expected ''('', found TestPairs_Sum_To_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum != 0 && len(l)\
    \ == 3\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp910snh7t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp910snh7t_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp910snh7t_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-int(v) !=\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp48iit5b_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp48iit5b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    if sum == 0 {\n        return false\n    }\n\n\
    \    i := 0\n    j := len(l) - 1\n    for i < j {\n        if l[i]+l[j] == 0 {\n\
    \            return true\n        }\n        if l[i]+l[j] > 0 {\n            i++\n\
    \        } else {\n            j--\n        }\n    }\n\n    return false\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpda_tyr_d_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpda_tyr_d_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpda_tyr_d_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n\n    for _, v := range l {\n        if sum-int(v) !=\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp48o75zex_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp48o75zex_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpl_obupav_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpl_obupav_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    \n    sum := 0\n    for _, v := range l\
    \ {\n        sum += v\n    }\n    \n    for _, v := range l {\n        if sum\
    \ != 0 {\n            if sum != v {\n                return false\n          \
    \  }\n        }\n        sum -= v\n    }\n    \n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpyp5jqkbp_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpyp5jqkbp_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpyp5jqkbp_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpyp5jqkbp_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for\
    \ _, v := range l {\n        if sum-v == 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0x4oeu5v_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0x4oeu5v_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            s += v\n        }\n        if\
    \ s == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpetv9yqxw_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpetv9yqxw_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpetv9yqxw_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp8xts6gw9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp8xts6gw9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp8xts6gw9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp8xts6gw9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp8xts6gw9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp47utpsu8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp47utpsu8_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp47utpsu8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp47utpsu8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Sort(l)\n    for i := 0; i < len(l); i++ {\n        if i\
    \ > 0 && l[i] == l[i-1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_sovr7z_test.go:22:7: no new variables on left side of :=

    /tmp/tmp9_sovr7z_test.go:24:9: l declared but not used

    /tmp/tmp9_sovr7z_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-int(v) == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmppiley1pn_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmppiley1pn_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    s := 0\n    for _, v := range l {\n    \
    \    s += v\n    }\n    if s == 0 {\n        return false\n    }\n    for _, v\
    \ := range l {\n        if v != 0 {\n            s -= v\n            if s == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9146x22e_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9146x22e_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        if v == 0 {\n\
    \            l = append(l, v)\n        }\n    }\n    if len(l) == 0 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum != 0 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9mfele7__test.go:22:7: no new variables on left side of :=

    /tmp/tmp9mfele7__test.go:31:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, 0, len(l))\n    for _, v := range l {\n        l := append(l,\
    \ v)\n    }\n    sort.Sort(l)\n    sum := 0\n    for _, v := range l {\n     \
    \   sum += v\n        if sum == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuhf003o3_test.go:22:7: no new variables on left side of :=

    /tmp/tmpuhf003o3_test.go:24:9: l declared but not used

    /tmp/tmpuhf003o3_test.go:26:5: undefined: sort

    /tmp/tmpuhf003o3_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v != 0 {\n            i += v\n \
    \       }\n    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaj9rkxdh_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpaj9rkxdh_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpq6rgw_8r_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpq6rgw_8r_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpq6rgw_8r_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpq6rgw_8r_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n   \
    \         return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp20jv7ons_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp20jv7ons_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp20jv7ons_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l\
    \ := make([]int, len(l))\n    for i := range l {\n        l[i] = l[i] + sum\n\
    \    }\n    return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptigvkau__test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    for _, v := range l {\n        if sum-v == 0 {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpuhzzh0c5_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpuhzzh0c5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpuhzzh0c5_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuhzzh0c5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpuhzzh0c5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n   \
    \ for _, v := range l {\n        sum += v\n    }\n    return sum != 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9z2zz30t_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9z2zz30t_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9z2zz30t_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9z2zz30t_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9z2zz30t_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9z2zz30t_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    return sum == 0 && len(l) == 2 || sum > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp9y794ibx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp9y794ibx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
