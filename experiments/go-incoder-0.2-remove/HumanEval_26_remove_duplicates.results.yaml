language: go_test.go
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpys6yg13y_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[number] = number\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmprgolp8nb_test.go:18\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmprgolp8nb_test.go:31\
    \ +0x60f\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        result[n] = true\n        seen[n] = true\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmfce6g4e_test.go:17:21: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result[len(result)-1] = num\n  \
    \  }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmploix22pw_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmploix22pw_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result[len(result)-1] = n\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp4h20e82e_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmp4h20e82e_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpys6yg13y_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; ok {\n\
    \            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpz9ld3fzp_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result[len(result)-1] = num\n  \
    \  }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmploix22pw_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmploix22pw_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpys6yg13y_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for i := range numbers {\n        if seen[numbers[i]] == true {\n       \
    \     continue\n        }\n        seen[numbers[i]] = true\n        result[i]\
    \ = numbers[i]\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp9fedp2jx_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result[len(result)-1] = num\n  \
    \  }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmploix22pw_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmploix22pw_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpys6yg13y_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for i := range numbers {\n        if seen[numbers[i]] == true {\n       \
    \     continue\n        }\n        seen[numbers[i]] = true\n        result[i]\
    \ = numbers[i]\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp9fedp2jx_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result[len(result)-1] = num\n  \
    \  }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmploix22pw_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmploix22pw_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; !ok {\n\
    \            seen[number] = true\n            result = append(result, number)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpeshho9b8_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result[len(result)-1] = num\n  \
    \  }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmploix22pw_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmploix22pw_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result[len(result)-1] = num\n  \
    \  }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmploix22pw_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmploix22pw_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for i := range numbers {\n        if seen[numbers[i]] == true {\n       \
    \     continue\n        }\n        seen[numbers[i]] = true\n        result[i]\
    \ = numbers[i]\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp9fedp2jx_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprx_qhypb_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi8ju0rip_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpi6xbmfdu_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\nfunc remove_duplicates(numbers\
    \ []int) []int {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result[len(result)-1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkw__af8p_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkw__af8p_test.go:38: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073957
