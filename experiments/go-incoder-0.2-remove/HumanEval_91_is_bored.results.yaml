language: go_test.go
name: HumanEval_91_is_bored
results:
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    i := 0\n    for i < len(S) {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            bored += 1\n        }\n   \
    \     i += 1\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpaoxgezeg_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    bored_words := []string{\"I\"}\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if strings.Contains(word,\
    \ bored_words) {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomh8x6gh_test.go:15:26: undefined: strings

    /tmp/tmpomh8x6gh_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored += 1\n       \
    \ }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnywmbttv_test.go:14:26: undefined: strings

    /tmp/tmpnywmbttv_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored += 1\n       \
    \ }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnywmbttv_test.go:14:26: undefined: strings

    /tmp/tmpnywmbttv_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored += 1\n       \
    \ }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnywmbttv_test.go:14:26: undefined: strings

    /tmp/tmpnywmbttv_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsy0mfaf_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jh1vm3a_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    bored_count += count_bored_words(S, []string{\"\
    I\"})\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1e7jl9yv_test.go:14:20: undefined: count_bored_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    i := 0\n    for i < len(S) {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            bored += 1\n        }\n   \
    \     i += 1\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpaoxgezeg_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsy0mfaf_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnidxhfvo_test.go:14:26: undefined: strings

    /tmp/tmpnidxhfvo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdfz3q2h_test.go:13:5: bored_words declared but not used

    /tmp/tmppdfz3q2h_test.go:15:26: undefined: strings

    /tmp/tmppdfz3q2h_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored += 1\n       \
    \ }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnywmbttv_test.go:14:26: undefined: strings

    /tmp/tmpnywmbttv_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsy0mfaf_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if bored_words[0] == word\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiilc3h44_test.go:15:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnidxhfvo_test.go:14:26: undefined: strings

    /tmp/tmpnidxhfvo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnidxhfvo_test.go:14:26: undefined: strings

    /tmp/tmpnidxhfvo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsy0mfaf_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jh1vm3a_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored += 1\n       \
    \ }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnywmbttv_test.go:14:26: undefined: strings

    /tmp/tmpnywmbttv_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jh1vm3a_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdfz3q2h_test.go:13:5: bored_words declared but not used

    /tmp/tmppdfz3q2h_test.go:15:26: undefined: strings

    /tmp/tmppdfz3q2h_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    bored_count += count_bored_words(S, []string{\"\
    I\"})\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1e7jl9yv_test.go:14:20: undefined: count_bored_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if strings.Contains(word,\
    \ bored_words) {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphuzkxq4_test.go:15:26: undefined: strings

    /tmp/tmpphuzkxq4_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    i := 0\n    for ; i < len(S); i++ {\n        if S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!' {\n            bored += 1\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp9fg7c66x_test.go:41: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    i := 0\n    for ; i < len(S); i++ {\n        if S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!' {\n            bored += 1\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp9fg7c66x_test.go:41: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if strings.Contains(word,\
    \ bored_words) {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphuzkxq4_test.go:15:26: undefined: strings

    /tmp/tmpphuzkxq4_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq5w6t2sq_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if strings.Contains(word,\
    \ bored_words) {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphuzkxq4_test.go:15:26: undefined: strings

    /tmp/tmpphuzkxq4_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    bored += count_bored(S, []string{\"I\"})\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaqwr9gx6_test.go:14:14: undefined: count_bored

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored += 1\n       \
    \ }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnywmbttv_test.go:14:26: undefined: strings

    /tmp/tmpnywmbttv_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    i := 0\n    for i < len(S) {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            bored += 1\n        }\n   \
    \     i += 1\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpaoxgezeg_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnidxhfvo_test.go:14:26: undefined: strings

    /tmp/tmpnidxhfvo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if bored_words[0] == word\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiilc3h44_test.go:15:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".,?!\") {\n        if strings.Contains(word,\
    \ bored_words) {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphuzkxq4_test.go:15:26: undefined: strings

    /tmp/tmpphuzkxq4_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    words := strings.Split(S, \".\")\n    for _, word\
    \ := range words {\n        if strings.HasPrefix(word, \"I\") {\n            bored++\n\
    \        }\n    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8b10acy5_test.go:14:14: undefined: strings

    /tmp/tmp8b10acy5_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprat85e16_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsy0mfaf_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    bored_count += count_boredom(S, 0)\n    return\
    \ bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd_fbgpon_test.go:14:20: undefined: count_boredom

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdfz3q2h_test.go:13:5: bored_words declared but not used

    /tmp/tmppdfz3q2h_test.go:15:26: undefined: strings

    /tmp/tmppdfz3q2h_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored += 1\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsy0mfaf_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, \"\
    ?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ bored_words[0]) {\n            bored_count++\n        }\n    }\n    return bored_count\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeyjdra3u_test.go:15:26: undefined: strings

    /tmp/tmpeyjdra3u_test.go:16:12: undefined: strings

    /tmp/tmpeyjdra3u_test.go:19:12: undefined: strings

    /tmp/tmpeyjdra3u_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, \"\
    ?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"!\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \".\") {\n            bored_count++\n        }\n        if strings.Contains(word,\
    \ \"?\") {\n            bored_count++\n        }\n        if strings.Contains(word\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bqzly34_test.go:100:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    words := strings.Split(S, \".\")\n    for _, word\
    \ := range words {\n        if word == \"I\" {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_55zy5db_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_words := []string{\"I\"}\n    bored_count := 0\n    for _,\
    \ word := range strings.Split(S, \".\") {\n        if strings.Contains(word, bored_words)\
    \ {\n            bored_count++\n        }\n    }\n    return bored_count\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0tseomr_test.go:15:26: undefined: strings

    /tmp/tmph0tseomr_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    bored = bored + count_bored(S, \".\")\n    bored\
    \ = bored + count_bored(S, \"?\")\n    bored = bored + count_bored(S, \"!\")\n\
    \    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9fn2c8gi_test.go:14:21: undefined: count_bored

    /tmp/tmp9fn2c8gi_test.go:15:21: undefined: count_bored

    /tmp/tmp9fn2c8gi_test.go:16:21: undefined: count_bored

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".,?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wfhxv3u_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4au60by_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6xsuy09_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".\") {\n\
    \        if strings.HasPrefix(word, \"I\") {\n            bored++\n        }\n\
    \    }\n    return bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvzrgheo_test.go:14:26: undefined: strings

    /tmp/tmpbvzrgheo_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".,?!\"\
    ) {\n        if word == \"I\" {\n            bored_count++\n        }\n    }\n\
    \    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3amqoh_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored_count := 0\n    for _, word := range strings.Split(S, \".\"\
    ) {\n        if strings.HasPrefix(word, \"I\") {\n            bored_count++\n\
    \        }\n    }\n    return bored_count\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14idsvy_test.go:14:26: undefined: strings

    /tmp/tmpc14idsvy_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string)\
    \ int {\n    bored := 0\n    for _, word := range strings.Split(S, \".?!\") {\n\
    \        if word == \"I\" {\n            bored++\n        }\n    }\n    return\
    \ bored\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n    \
    \ { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"\
    I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0\
    \ },\n     { actual: candidate(\"I feel good today. I will be productive. will\
    \ kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going for\
    \ a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpig6ey5ue_test.go:14:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
