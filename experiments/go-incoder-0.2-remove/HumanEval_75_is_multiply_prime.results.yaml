language: go_test.go
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 127\n  \
    \  primes[31] = 131\n    primes[32] = 137\n    primes[33] = 139\n    primes[34]\
    \ = 149\n    primes[35] = 151\n    primes[36] = 157\n    primes[37] = 163\n  \
    \  primes[38] = 167\n    primes[39] = 173\n    primes[40] = 179\n    primes[41]\
    \ = 181\n    primes[42] = 191\n    primes[43] = 193\n    primes[44] = 197 \n \
    \   primes[45] = 199\n    primes[46] = 211\n    primes[47] = 223\n    primes[48]\
    \ = 227\n    primes[49] = 229\n    primes[50] = 241\n    primes[51] = 247\n  \
    \  primes[52] = 251\n    primes[53] = 257\n    primes[54] = 263\n    primes[55]\
    \ = 269\n    primes[56] = 271\n    primes[57] = 277\n    primes[58] = 281\n  \
    \  primes[59] = 283\n    primes[60] = 293\n    primes[61] = 307\n    primes[62]\
    \ = 311\n    primes[63] = 317\n    primes[64] = 323\n    primes[65] = 329\n  \
    \  primes[66] = 331\n    primes[67]\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm74wibuw_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < b; i++ {\n        if b%i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    prime := make([]int,\
    \ 100)\n    prime[0] = true\n    prime[1] = true\n    prime[2] = true\n    \n\
    \    for i := 3; i <= a; i++ {\n        if prime[i] == true {\n            continue\n\
    \        }\n        \n        for j := 2; j < i; j++ {\n            if i*j ==\
    \ a {\n                prime[i] = false\n                break\n            }\n\
    \        }\n    }\n    \n    return prime[a]\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxv26xa86_test.go:19:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpxv26xa86_test.go:20:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpxv26xa86_test.go:21:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpxv26xa86_test.go:24:24: invalid operation: prime[i] == true (mismatched
    types int and untyped bool)

    /tmp/tmpxv26xa86_test.go:30:28: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmpxv26xa86_test.go:36:12: cannot use prime[a] (variable of type int) as
    type bool in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i\
    \ < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n \
    \   }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt5kjyjt2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt5kjyjt2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt5kjyjt2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt5kjyjt2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt5kjyjt2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // The first prime number\
    \ that divides 3 is 2\n    if a % 3 == 0 {\n        return false\n    }\n    \n\
    \    // The second prime number that divides 3 is 3\n    if a % 5 == 0 {\n   \
    \     return false\n    }\n    \n    // The third prime number that divides 3\
    \ is 5\n    if a % 7 == 0 {\n        return false\n    }\n    \n    // The fourth\
    \ prime number that divides 3 is 7\n    if a % 11 == 0 {\n        return false\n\
    \    }\n    \n    // The fifth prime number that divides 3 is 11\n    if a % 13\
    \ == 0 {\n        return false\n    }\n    \n    // The sixth prime number that\
    \ divides 3 is 13\n    if a % 17 == 0 {\n        return false\n    }\n    \n \
    \   // The seventh prime number that divides 3 is 17\n    if a % 19 == 0 {\n \
    \       return false\n    }\n    \n    // The eighth prime number that divides\
    \ 3 is 19\n    if a % 23 == 0 {\n        return false\n    }\n    \n    // The\
    \ ninth prime number that divides 3 is 23\n    if a % 29 == 0 {\n        return\
    \ false\n    }\n    \n    // The tenth prime number that divides 3 is 29\n   \
    \ if a % 31 == 0 {\n        return false\n    }\n    \n    // The eleventh prime\
    \ number that divides 3 is 31\n    if a % 37 == 0 {\n        return false\n  \
    \  }\n    \n    // The twelfth prime number that divides 3 is 37\n    if a % 41\
    \ == 0 {\n        return false\n    }\n    \n    // The thirteenth prime number\
    \ that divides 3 is 41\n    if a % 43 == 0 {\n        return false\n    }\n  \
    \  \n    // The fourteenth prime number that divides 3 is 43\n    if a % 47 ==\
    \ 0 {\n        return false\n    }\n    \n    // The fifteenth prime number that\
    \ divides 3 is 47\n    if a % 53 == 0 {\n        return false\n    }\n    \n \
    \   // The sixteenth prime number that divides 3 is 53\n    if a % 59 == 0 {\n\
    \        return false\n    }\n    \n    // The seventeenth prime number that divides\
    \ 3 is 59\n    if a % 61 == 0 {\n        return false\n    }\n    \n    // The\
    \ eighteenth prime number that divides 3 is 61\n    if a % 67 == 0 {\n       \
    \ return false\n    }\n    \n    // The n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpns637kfd_test.go:109:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    c := a\n    d := a\n    e := a\n    f := a\n    g := a\n    h\
    \ := a\n    i := a\n    j := a\n    k := a\n    l := a\n    m := a\n    n := a\n\
    \    o := a\n    p := a\n    q := a\n    r := a\n    s := a\n    t := a\n    u\
    \ := a\n    v := a\n    w := a\n    x := a\n    y := a\n    z := a\n\n    switch\
    \ {\n    case b == c && c == d && d == e && e == f && f == g && g == h && h ==\
    \ i && i == j && j == k && k == l && l == m && m == n && n == o && o == p && p\
    \ == q && q == r && r == s && s == t && t == u && u == v && v == w && w == x &&\
    \ x == y && y == z && z == a:\n        return true\n    default:\n        return\
    \ false\n    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp31xmd4jw_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp31xmd4jw_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp31xmd4jw_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp31xmd4jw_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp31xmd4jw_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjvq6in7_test.go:161:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    \n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpvyt32qef_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpvyt32qef_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpvyt32qef_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpvyt32qef_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpvyt32qef_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2]\
    \ = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6]\
    \ = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10]\
    \ = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14]\
    \ = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18]\
    \ = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21] = 301\n    primes[22]\
    \ = 303\n    primes[23] = 317\n    primes[24] = 359\n    primes[25] = 371\n  \
    \  primes[26] = 373\n    primes[27] = 379\n    primes[28] = 389\n    primes[29]\
    \ = 391\n    primes[30] = 397\n    primes[31] = 419\n    primes[32] = 429\n  \
    \  primes[33] = 439\n    primes[34] = 443\n    primes[35] = 449\n    primes[36]\
    \ = 457\n    primes[37] = 467\n    primes[38] = 479\n    primes[39] = 487\n  \
    \  primes[40] = 499\n    primes[41] = 511\n    primes[42] = 521\n    primes[43]\
    \ = 523\n    primes[44] = 529\n    primes[45] = 531\n    primes[46] = 537\n  \
    \  primes[47] = 539\n    primes[48] = 541\n    primes[49] = 547\n    primes[50]\
    \ = 557\n    primes[51] = 561\n    primes[52] = 563\n    primes[53] = 569\n  \
    \  primes[54] = 571\n    primes[55] = 577\n    primes[56] = 579\n    primes[57]\
    \ = 587\n    primes[58] = 593\n    primes[59] = 599\n    primes[60] = 617\n  \
    \  primes[61] = 619\n    primes[62] = 623\n    primes[63] = 627\n    primes[64]\
    \ = 629\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi7hr6jnt_test.go:85:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    if a < 100 {\n        return false\n \
    \   }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1]\
    \ = 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]\
    \ != 0 {\n            for j := 2; j < i; j++ {\n                if primes[j]*primes[i]\
    \ == i {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpw5g6ejh3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpw5g6ejh3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpw5g6ejh3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpw5g6ejh3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpw5g6ejh3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 121\n    primes[32] = 123\n    primes[33] = 127\n    primes[34]\
    \ = 131\n    primes[35] = 137\n    primes[36] = 139\n    primes[37] = 142\n  \
    \  primes[38] = 147\n    primes[39] = 151\n    primes[40] = 157\n    primes[41]\
    \ = 163\n    primes[42] = 167\n    primes[43] = 173\n    primes[44] = 179\n  \
    \  primes[45] = 181\n    primes[46] = 191\n    primes[47] = 193\n    primes[48]\
    \ = 197\n    primes[49] = 199\n    primes[50] = 201\n    primes[51] = 207\n  \
    \  primes[52] = 211\n    primes[53] = 217\n    primes[54] = 223\n    primes[55]\
    \ = 229\n    primes[56] = 233\n    primes[57] = 301\n    primes[58] = 307\n  \
    \  primes[59] = 313\n    primes[60] = 319\n    primes[61] = 329\n    primes[62]\
    \ = 331\n    primes[63] = 333\n    primes[64] = 357\n    primes[65] = 359\n  \
    \  primes[66] = 361\n    primes[67] = 3\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0ko3urom_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Find all prime numbers\
    \ less than a\n    primes := make([]int, 0, 100)\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            primes = append(primes, i)\n        }\n\
    \    }\n    \n    // Check if a is multiple of any prime number\n    for _, prime\
    \ := range primes {\n        if a % prime == 0 {\n            return false\n \
    \       }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq7ch5ed6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq7ch5ed6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq7ch5ed6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq7ch5ed6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq7ch5ed6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    // return true if the given number is\
    \ the multiplication of 3 prime numbers and false otherwise.\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaz3i9ll7_test.go:262:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 149\n    primes[42] = 151\n  \
    \  primes[43] = 154\n    primes[44] = 157\n    primes[45] = 159\n    primes[46]\
    \ = 162\n    primes[47] = 165\n    primes[48] = 168\n    primes[49] = 171\n  \
    \  primes[50] = 173\n    primes[51] = 177\n    primes[52] = 179\n    primes[53]\
    \ = 181\n    primes[54] = 183\n    primes[55] = 186\n    primes[56] = 189\n  \
    \  primes[57] = 191\n    primes[58] = 194\n    primes[59] = 197\n    primes[60]\
    \ = 200\n    primes[61] = 202\n    primes[62] = 205\n    primes[63] = 208\n  \
    \  primes[64] = 211\n    primes[65] = 213\n    primes[66] = 216\n    primes[67]\
    \ = 219\n    primes[68\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpipbs67_f_test.go:88:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a / 2\n    c := a / 3\n    d := a / 5\n    e := a / 7\n    f := a /\
    \ 11\n    g := a / 13\n    h := a / 17\n    i := a / 19\n    j := a / 23\n   \
    \ k := a / 29\n    l := a / 31\n    m := a / 37\n    n := a / 41\n    o := a /\
    \ 43\n    p := a / 47\n    q := a / 53\n    r := a / 59\n    s := a / 61\n   \
    \ t := a / 67\n    u := a / 71\n    v := a / 73\n    w := a / 79\n    x := a /\
    \ 83\n    y := a / 89\n    z := a / 97\n    \n    if a == 1 {\n        return\
    \ true\n    }\n    \n    if a == 2 {\n        return true\n    }\n    \n    if\
    \ a == 3 {\n        return true\n    }\n    \n    if a == 5 {\n        return\
    \ true\n    }\n    \n    if a == 7 {\n        return true\n    }\n    \n    if\
    \ a == 11 {\n        return true\n    }\n    \n    if a == 13 {\n        return\
    \ true\n    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if\
    \ a == 19 {\n        return true\n    }\n    \n    if a == 23 {\n        return\
    \ true\n    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if\
    \ a == 31 {\n        return true\n    }\n    \n    if a == 37 {\n        return\
    \ true\n    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if\
    \ a == 43 {\n        return true\n    }\n    \n    if a == 47 {\n        return\
    \ true\n    }\n    \n    if a == 53 {\n        return true\n    }\n    \n    if\
    \ a == 59 {\n        return true\n    }\n    \n    if a == 61 {\n        return\
    \ true\n    }\n    \n    if a == 67 {\n        return true\n    }\n    \n    if\
    \ a == 71 {\n        return true\n    }\n    \n    if a == 73 {\n        return\
    \ true\n    }\n    \n    if a == 79 {\n        return true\n    }\n    \n    if\
    \ a == 83{\n        return true\n    }\n    \n    if a == 89{\n        return\
    \ true\n    }\n    \n    if a == 97{\n        return true\n    }\n    \n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mcm3qrs_test.go:14:5: b declared but not used

    /tmp/tmp2mcm3qrs_test.go:15:5: c declared but not used

    /tmp/tmp2mcm3qrs_test.go:16:5: d declared but not used

    /tmp/tmp2mcm3qrs_test.go:17:5: e declared but not used

    /tmp/tmp2mcm3qrs_test.go:18:5: f declared but not used

    /tmp/tmp2mcm3qrs_test.go:19:5: g declared but not used

    /tmp/tmp2mcm3qrs_test.go:20:5: h declared but not used

    /tmp/tmp2mcm3qrs_test.go:21:5: i declared but not used

    /tmp/tmp2mcm3qrs_test.go:22:5: j declared but not used

    /tmp/tmp2mcm3qrs_test.go:23:5: k declared but not used

    /tmp/tmp2mcm3qrs_test.go:23:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // a is prime if and\
    \ only if all prime factors are less than 100\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return false\n        }\n    }\n    \n \
    \   return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5e00_gal_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5e00_gal_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5e00_gal_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5e00_gal_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5e00_gal_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: null
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for {\n        if b%2 == 0 {\n            break\n        }\n\
    \        for {\n            if b%3 == 0 {\n                break\n           \
    \ }\n            if b%5 == 0 {\n                break\n            }\n       \
    \     b += 2\n        }\n    }\n    return b > 100\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073776
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 168\n    primes[49] = 171\n    primes[50] = 173\n    primes[51] = 177\n  \
    \  primes[52] = 179\n    primes[53] = 181\n    primes[54] = 183\n    primes[55]\
    \ = 186\n    primes[56] = 189\n    primes[57] = 192\n    primes[58] = 195\n  \
    \  primes[59] = 198\n    primes[60] = 201\n    primes[61] = 204\n    primes[62]\
    \ = 207\n    primes[63] = 209\n    primes[64] = 212\n    primes[65] = 215\n  \
    \  primes[66] = 217\n    primes[67] = 220\n    primes[68] = 223\n    primes[\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1urdqtj0_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    \n    if a < 100 {\n        return false\n    }\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5lf25gtp_test.go:268:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 151\n    primes[42] = 157\n  \
    \  primes[43] = 163\n    primes[44] = 167\n    primes[45] = 173\n    primes[46]\
    \ = 179\n    primes[47] = 181\n    primes[48] = 191\n    primes[49] = 197\n  \
    \  primes[50] = 201\n    primes[51] = 207\n    primes[52] = 211\n    primes[53]\
    \ = 217\n    primes[54] = 223\n    primes[55] = 229\n    primes[56] = 233\n  \
    \  primes[57] = 301\n    primes[58] = 307\n    primes[59] = 313\n    primes[60]\
    \ = 319\n    primes[61] = 327\n    primes[62] = 331\n    primes[63] = 333\n  \
    \  primes[64] = 359\n    primes[65] = 377\n    primes[66] = 381\n    primes[\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpts8ny2cf_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 167\n    primes[49] = 169\n    primes[50] = 173\n    primes[51] = 177\n  \
    \  primes[52] = 181\n    primes[53] = 191\n    primes[54] = 193\n    primes[55]\
    \ = 197\n    primes[56] = 199\n    primes[57] = 201\n    primes[58] = 205\n  \
    \  primes[59] = 209\n    primes[60] = 213\n    primes[61] = 217\n    primes[62]\
    \ = 223\n    primes[63] = 227\n    primes[64] = 229\n    primes[65] = 233\n  \
    \  primes[66] = 239\n    primes[67] = 241\n    primes[68] = 243\n    \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpetm1lvv0_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for {\n        if b%2 == 0 {\n            break\n        }\n\
    \        if b%3 == 0 {\n            break\n        }\n        if b%5 == 0 {\n\
    \            break\n        }\n        b += 2\n    }\n    return b > 100\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpgf9egu5z_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpgf9egu5z_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpgf9egu5z_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpgf9egu5z_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpgf9egu5z_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpi2egen_p_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpi2egen_p_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpi2egen_p_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpi2egen_p_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpi2egen_p_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = 1\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i*j == a {\n               \
    \ return false\n            }\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpe1c442x0_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpe1c442x0_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpe1c442x0_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpe1c442x0_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpe1c442x0_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 167\n    primes[49] = 169\n    primes[50] = 173\n    primes[51] = 177\n  \
    \  primes[52] = 181\n    primes[53] = 191\n    primes[54] = 193\n    primes[55]\
    \ = 197\n    primes[56] = 199\n    primes[57] = 202\n    primes[58] = 205\n  \
    \  primes[59] = 209\n    primes[60] = 212\n    primes[61] = 215\n    primes[62]\
    \ = 217\n    primes[63] = 223\n    primes[64] = 227\n    primes[65] = 229\n  \
    \  primes[66] = 233\n    primes[67] = 239\n    primes[68] = 241\n    prime\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpucjayn50_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073765
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    \n    for i := 4; i < 100;\
    \ i++ {\n        if primes[i]*primes[i+1]*primes[i+2] == a {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpzoehghi3_test.go:31\
    \ +0x133\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpzoehghi3_test.go:49\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi6a531yd_test.go:271:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for {\n        if b%2 == 0 {\n            if b%3 == 0 {\n   \
    \             if b%5 == 0 {\n                    return true\n               \
    \ }\n            }\n        }\n        b /= 2\n    }\n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpwsoc0_t0_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpwsoc0_t0_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpwsoc0_t0_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpwsoc0_t0_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpwsoc0_t0_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmps4kspjgy_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmps4kspjgy_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i < 100; i++ {\n        if primes[i]*primes[i] > a {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpn0ezckh7_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpn0ezckh7_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpn0ezckh7_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpn0ezckh7_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpn0ezckh7_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Find all prime numbers\
    \ less than a\n    primes := make([]int, 0, 100)\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            primes = append(primes, i)\n        }\n\
    \    }\n    \n    // Check if a is multiple of any prime number\n    for _, p\
    \ := range primes {\n        if a % p == 0 {\n            return false\n     \
    \   }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxk3xvfet_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxk3xvfet_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxk3xvfet_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxk3xvfet_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxk3xvfet_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i < 100; i++ {\n        if primes[i]*primes[i] > a {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpn0ezckh7_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpn0ezckh7_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpn0ezckh7_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpn0ezckh7_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpn0ezckh7_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 31\n    primes[22] = 37\n    primes[23]\
    \ = 41\n    primes[24] = 43\n    primes[25] = 47\n    primes[26] = 53\n    primes[27]\
    \ = 59\n    primes[28] = 61\n    primes[29] = 67\n    primes[30] = 71 \n    primes[31]\
    \ = 73\n    primes[32] = 79\n    primes[33] = 83\n    primes[34] = 89\n    primes[35]\
    \ = 97\n    primes[36] = 101\n    primes[37] = 103\n    primes[38] = 107\n   \
    \ primes[39] = 109\n    primes[40] = 133\n    primes[41] = 147\n    primes[42]\
    \ = 157\n    primes[43] = 173\n    primes[44] = 179\n    primes[45] = 181\n  \
    \  primes[46] = 191\n    primes[47] = 193\n    primes[48] = 197\n    primes[49]\
    \ = 199\n    primes[50] = 227\n    primes[51] = 231\n    primes[52] = 233\n  \
    \  primes[53] = 239\n    primes[54] = 241\n    primes[55] = 251\n    primes[56]\
    \ = 263\n    primes[57] = 269\n    primes[58] = 271\n    primes[59] = 277\n  \
    \  primes[60] = 283\n    primes[61] = 289\n    primes[62] = 293\n    primes[63]\
    \ = 301\n    primes[64] = 311\n    primes[65] = 313\n    primes[66] = 317\n  \
    \  primes[67] = 3\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprrg4szus_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    if a < 100 {\n        return false\n \
    \   }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] == 0 {\n           \
    \ for j := 2; j < i; j++ {\n                if i*j > a {\n                   \
    \ break\n                }\n                if primes[j] == 0 {\n            \
    \        primes[j] = 1\n                }\n            }\n        }\n    }\n \
    \   \n    for i := 0; i < 100; i++ {\n        if primes[i] == 1 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp8l9dwum__test.go:29\
    \ +0x13e\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp8l9dwum__test.go:61\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 168\n    primes[49] = 173\n    primes[50] = 177\n    primes[51] = 181\n  \
    \  primes[52] = 186\n    primes[53] = 191\n    primes[54] = 194\n    primes[55]\
    \ = 198\n    primes[56] = 202\n    primes[57] = 205\n    primes[58] = 208\n  \
    \  primes[59] = 211\n    primes[60] = 213\n    primes[61] = 217\n    primes[62]\
    \ = 220\n    primes[63] = 223\n    primes[64] = 227\n    primes[65] = 229\n  \
    \  primes[66] = 233\n    primes[67] = 239\n    primes[68] = 242\n    primes[\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwjrsd2gj_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i <= 100; i++ {\n        if b%i == 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpftupomsl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpftupomsl_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpftupomsl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpftupomsl_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpftupomsl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    if a < 100 {\n        return false\n\
    \    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4snthwx__test.go:267:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++ {\n\
    \        if primes[i] == 0 {\n            for j := 2; j < i; j++ {\n         \
    \       if i*j % a == 0 {\n                    primes[i] = 1\n               \
    \     break\n                }\n            }\n        }\n    }\n    \n    for\
    \ i := 0; i < 100; i++ {\n        if primes[i] == 1 {\n            return true\n\
    \        }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5d1ol1u1_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5d1ol1u1_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp5d1ol1u1_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp5d1ol1u1_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp5d1ol1u1_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i < 100; i++ {\n        if a % primes[i] == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpt2e2swio_test.go:24\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a0340?)\n\t/tmp/tmpt2e2swio_test.go:42\
    \ +0x71e\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < b; i++ {\n        if b%i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpi2egen_p_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpi2egen_p_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpi2egen_p_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpi2egen_p_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpi2egen_p_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // The first prime number\
    \ is 2\n    p := 2\n    \n    // The second prime number is 3\n    q := 3\n  \
    \  \n    // The third prime number is 5\n    r := 5\n    \n    // The fourth prime\
    \ number is 7\n    s := 7\n    \n    // The fifth prime number is 11\n    t :=\
    \ 11\n    \n    // The sixth prime number is 13\n    u := 13\n    \n    // The\
    \ seventh prime number is 17\n    v := 17\n    \n    // The eighth prime number\
    \ is 19\n    w := 19\n    \n    // The ninth prime number is 23\n    x := 23\n\
    \    \n    // The tenth prime number is 29\n    y := 29\n    \n    // The eleventh\
    \ prime number is 31\n    z := 31\n    \n    // The twelfth prime number is 37\n\
    \    0 := 37\n    \n    // The thirteenth prime number is 41\n    1 := 41\n  \
    \  \n    // The fourteenth prime number is 43\n    2 := 43\n    \n    // The fifteenth\
    \ prime number is 47\n    3 := 47\n    \n    // The sixteenth prime number is\
    \ 53\n    4 := 53\n    \n    // The seventeenth prime number is 59\n    5 := 59\n\
    \    \n    // The eighteenth prime number is 61\n    6 := 61\n    \n    // The\
    \ nineteenth prime number is 67\n    7 := 67\n    \n    // The twentieth prime\
    \ number is 71\n    8 := 71\n    \n    // The twenty-first prime number is 73\n\
    \    9 := 73\n    \n    // The twenty-second prime number is 79\n    10 := 79\n\
    \    \n    // The twenty-third prime number is 83\n    11 := 83\n    \n    //\
    \ The twenty-fourth prime number is 89\n    12 := 89\n    \n    // The twenty-fifth\
    \ prime number is 97\n    13 := 97\n    \n    // The twenty-sixth prime number\
    \ is 101\n    14 := 101\n    \n    // The twenty-seventh prime number is 103\n\
    \    15 := 103\n    \n    // The twenty-eighth prime number is 107\n    16 :=\
    \ 107\n    \n    // The twenty-ninth prime number is 113\n    17 := 113\n    \n\
    \    // The thirtieth prime number is 127\n    18 := 127\n    \n    // The thirty\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8jq16ryc_test.go:52:5: expected identifier on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = 1\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        if primes[a%i] == 0 {\n            return false\n        }\n    }\n \
    \   \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [119] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [119] with length 100\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmp5o0r74px_test.go:27\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000103860?)\n\t/tmp/tmp5o0r74px_test.go:49\
    \ +0x712\ntesting.tRunner(0xc000103860, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i < 100; i++ {\n        if a % primes[i] == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpt2e2swio_test.go:24\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a0340?)\n\t/tmp/tmpt2e2swio_test.go:42\
    \ +0x71e\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    if a < 100 {\n        return false\n    }\n\n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 167\n    primes[49] = 169\n    primes[50] = 173\n    primes[51] = 177\n  \
    \  primes[52] = 181\n    primes[53] = 191\n    primes[54] = 193\n    primes[55]\
    \ = 197\n    primes[56] = 199\n    primes[57] = 202\n    primes[58] = 205\n  \
    \  primes[59] = 209\n    primes[60] = 213\n    primes[61] = 217\n    primes[62]\
    \ = 223\n    primes[63] = 227\n    primes[64] = 229\n    primes[65] = 233\n  \
    \  primes[66] = 239\n    primes[67] = 241\n    primes[68] = 243\n    \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkng5p9xd_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a / 2\n    c := a / 3\n    d := a / 5\n    e := a / 7\n    f := a /\
    \ 11\n    g := a / 13\n    h := a / 17\n    i := a / 19\n    j := a / 23\n   \
    \ k := a / 29\n    l := a / 31\n    m := a / 37\n    n := a / 41\n    o := a /\
    \ 43\n    p := a / 47\n    q := a / 53\n    r := a / 59\n    s := a / 61\n   \
    \ t := a / 67\n    u := a / 71\n    v := a / 73\n    w := a / 79\n    x := a /\
    \ 83\n    y := a / 89\n    z := a / 97\n    \n    if a == 1 {\n        return\
    \ true\n    }\n    \n    if a == 2 {\n        return true\n    }\n    \n    if\
    \ a == 3 {\n        return true\n    }\n    \n    if a == 5 {\n        return\
    \ true\n    }\n    \n    if a == 7 {\n        return true\n    }\n    \n    if\
    \ a == 11 {\n        return true\n    }\n    \n    if a == 13 {\n        return\
    \ true\n    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if\
    \ a == 19 {\n        return true\n    }\n    \n    if a == 23 {\n        return\
    \ true\n    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if\
    \ a == 31 {\n        return true\n    }\n    \n    if a == 37 {\n        return\
    \ true\n    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if\
    \ a == 43 {\n        return true\n    }\n    \n    if a == 47 {\n        return\
    \ true\n    }\n    \n    if a == 53 {\n        return true\n    }\n    \n    if\
    \ a == 59 {\n        return true\n    }\n    \n    if a == 61 {\n        return\
    \ true\n    }\n    \n    if a == 67 {\n        return true\n    }\n    \n    if\
    \ a == 71 {\n        return true\n    }\n    \n    if a == 73 {\n        return\
    \ true\n    }\n    \n    if a == 79 {\n        return true\n    }\n    \n    if\
    \ a == 83{\n        return true\n    }\n    \n    if a == 89 {\n        return\
    \ true\n    }\n    \n    if a == 97 {\n        return true\n    }\n    \n    if\
    \ a == 103 {\n        return true\n    }\n    \n    if a == 109 {\n        return\
    \ true\n    }\n    \n    if a == \nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgfum81cs_test.go:153:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 156\n    primes[44] = 159\n  \
    \  primes[45] = 162\n    primes[46] = 165\n    primes[47] = 168\n    primes[48]\
    \ = 171\n    primes[49] = 174\n    primes[50] = 177\n    primes[51] = 180\n  \
    \  primes[52] = 183\n    primes[53] = 186\n    primes[54] = 189\n    primes[55]\
    \ = 192\n    primes[56] = 195\n    primes[57] = 198\n    primes[58] = 201\n  \
    \  primes[59] = 204\n    primes[60] = 207\n    primes[61] = 210\n    primes[62]\
    \ = 213\n    primes[63] = 216\n    primes[64] = 219\n    primes[65] = 222\n  \
    \  primes[66] = 225\n    primes[67] = 228\n    primes[68] = 231\n    primes[69\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp620atpcg_test.go:88:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 149\n    primes[42] = 152\n  \
    \  primes[43] = 155\n    primes[44] = 157\n    primes[45] = 159\n    primes[46]\
    \ = 162\n    primes[47] = 165\n    primes[48] = 167\n    primes[49] = 169\n  \
    \  primes[50] = 173\n    primes[51] = 177\n    primes[52] = 181\n    primes[53]\
    \ = 191\n    primes[54] = 193\n    primes[55] = 197\n    primes[56] = 199\n  \
    \  primes[57] = 202\n    primes[58] = 205\n    primes[59] = 209\n    primes[60]\
    \ = 212\n    primes[61] = 215\n    primes[62] = 217\n    primes[63] = 223\n  \
    \  primes[64] = 227\n    primes[65] = 229\n    primes[66] = 233\n    primes[67]\
    \ = 239\n    primes[68] = \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzkmpx58v_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for {\n        if b%2 == 0 {\n            break\n        }\n\
    \        for i := 3; i <= 100; i += 2 {\n            if b%i == 0 {\n         \
    \       break\n            }\n        }\n        if i == 100 {\n            return\
    \ false\n        }\n        b++\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5539b31_test.go:24:12: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi6a531yd_test.go:271:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmps4kspjgy_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmps4kspjgy_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 168\n    primes[49] = 171\n    primes[50] = 173\n    primes[51] = 177\n  \
    \  primes[52] = 179\n    primes[53] = 181\n    primes[54] = 183\n    primes[55]\
    \ = 186\n    primes[56] = 189\n    primes[57] = 192\n    primes[58] = 195\n  \
    \  primes[59] = 198\n    primes[60] = 201\n    primes[61] = 203\n    primes[62]\
    \ = 205\n    primes[63] = 208\n    primes[64] = 209\n    primes[65] = 211\n  \
    \  primes[66] = 213\n    primes[67] = 215\n    primes[68] = 217\n    primes[\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4tcyf07t_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp62h1xki__test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp62h1xki__test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++ {\n\
    \        if primes[i] == 0 {\n            for j := 2; j < i; j++ {\n         \
    \       if i*j == a {\n                    primes[i] = 1\n                   \
    \ break\n                }\n            }\n        }\n    }\n    \n    for i :=\
    \ 0; i < 100; i++ {\n        if primes[i] == 1 {\n            return true\n  \
    \      }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmppzvk5kgt_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmppzvk5kgt_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmppzvk5kgt_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmppzvk5kgt_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmppzvk5kgt_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // We know that all\
    \ prime numbers are greater than 2\n    if a < 2 {\n        return false\n   \
    \ }\n\n    // We know that all prime numbers are greater than 3\n    if a < 3\
    \ {\n        return false\n    }\n\n    // We know that all prime numbers are\
    \ greater than 5\n    if a < 5 {\n        return false\n    }\n\n    // We know\
    \ that all prime numbers are greater than 7\n    if a < 7 {\n        return false\n\
    \    }\n\n    // We know that all prime numbers are greater than 11\n    if a\
    \ < 11 {\n        return false\n    }\n\n    // We know that all prime numbers\
    \ are greater than 13\n    if a < 13 {\n        return false\n    }\n\n    //\
    \ We know that all prime numbers are greater than 17\n    if a < 17 {\n      \
    \  return false\n    }\n\n    // We know that all prime numbers are greater than\
    \ 19\n    if a < 19 {\n        return false\n    }\n\n    // We know that all\
    \ prime numbers are greater than 23\n    if a < 23 {\n        return false\n \
    \   }\n\n    // We know that all prime numbers are greater than 29\n    if a <\
    \ 29 {\n        return false\n    }\n\n    // We know that all prime numbers are\
    \ greater than 31\n    if a < 31 {\n        return false\n    }\n\n    // We know\
    \ that all prime numbers are greater than 37\n    if a < 37 {\n        return\
    \ false\n    }\n\n    // We know that all prime numbers are greater than 41\n\
    \    if a < 41 {\n        return false\n    }\n\n    // We know that all prime\
    \ numbers are greater than 43\n    if a < 43 {\n        return false\n    }\n\n\
    \    // We know that all prime numbers are greater than 47\n    if a < 47 {\n\
    \        return false\n    }\n\n    // We know that all prime numbers are greater\
    \ than 53\n    if a < 53 {\n        return false\n    }\n\n    // We know that\
    \ all prime numbers are greater than 59\n    if a < 59 {\n        return false\n\
    \    }\n\n    // We know that all prime numbers are greater than 61\n    if a\
    \ < 61 {\n        return false\n    }\n\n    // We know that all prime numbers\
    \ are greater than 67\n    if a < 67 {\n        return false\n    }\n\n    //\
    \ We know that all prime numbers are greater than 71\n    if a < 71 {\n      \
    \  return false\n    }\n\n    // We know that all prime numbers are greater than\
    \ 73\n    if a < 73 {\n        return false\n    }\n\n    // We know that all\
    \ prime numbers are greater than 79\n    if a < 79 {\n        return false\n \
    \   }\n\n    // We know that all prime numbers are greater than 83\n    if a <\
    \ 83 {\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb7it_pq0_test.go:131:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i <= a; i++ {\n        for j := 2; j < i; j++ {\n            if i*j\
    \ == a {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpy0jrzafy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpy0jrzafy_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpy0jrzafy_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpy0jrzafy_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpy0jrzafy_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjvq6in7_test.go:161:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   b = b / i\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp0r3arixx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp0r3arixx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp0r3arixx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp0r3arixx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp0r3arixx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // We know that if a\
    \ is divisible by 3, then a is divisible by 5\n    // and if a is divisible by\
    \ 5, then a is divisible by 7\n    // and if a is divisible by 7, then a is divisible\
    \ by 11\n    // and if a is divisible by 11, then a is divisible by 13\n    //\
    \ and if a is divisible by 13, then a is divisible by 17\n    // and if a is divisible\
    \ by 17, then a is divisible by 19\n    // and if a is divisible by 19, then a\
    \ is divisible by 23\n    // and if a is divisible by 23, then a is divisible\
    \ by 29\n    // and if a is divisible by 29, then a is divisible by 31\n    //\
    \ and if a is divisible by 31, then a is divisible by 37\n    // and if a is divisible\
    \ by 37, then a is divisible by 41\n    // and if a is divisible by 41, then a\
    \ is divisible by 43\n    // and if a is divisible by 43, then a is divisible\
    \ by 47\n    // and if a is divisible by 47, then a is divisible by 53\n    //\
    \ and if a is divisible by 53, then a is divisible by 59\n    // and if a is divisible\
    \ by 59, then a is divisible by 61\n    // and if a is divisible by 61, then a\
    \ is divisible by 67\n    // and if a is divisible by 67, then a is divisible\
    \ by 71\n    // and if a is divisible by 71, then a is divisible by 73\n    //\
    \ and if a is divisible by 73, then a is divisible by 79\n    // and if a is divisible\
    \ by 79, then a is divisible by 83\n    // and if a is divisible by 83, then a\
    \ is divisible by 89\n    // and if a is divisible by 89, then a is divisible\
    \ by 97\n    // and if a is divisible by 97, then a is divisible by 101\n    //\
    \ and if a is divisible by 101, then a is divisible by 103\n    // and if a is\
    \ divisible by 103, then a is divisible by 107\n    // and if a is divisible by\
    \ 107, then a is divisible by 109\n    // and if a is divisible by 109, then a\
    \ is divisible by 113\n    // and if a is divisible by 113, then a is divisible\
    \ by 127\n    // and if a is divisible by 127, then a is divisible by 131\n  \
    \  // and if a \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp81dm2xm_test.go:49:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \    primes[10] = 31\n    primes[11] = 31\n    primes[12] = 37\n    primes[13]\
    \ = 39\n    primes[14] = 41\n    primes[15] = 43\n    primes[16] = 47\n    primes[17]\
    \ = 53\n    primes[18] = 59\n    primes[19] = 61\n    primes[20] = 67\n    primes[21]\
    \ = 71\n    primes[22] = 73\n    primes[23] = 79\n    primes[24] = 83\n    primes[25]\
    \ = 89\n    primes[26] = 97\n    primes[27] = 101\n    primes[28] = 103\n    primes[29]\
    \ = 107\n    primes[30] = 101\n    primes[31] = 103\n    primes[32] = 107\n  \
    \  primes[33] = 109\n    primes[34] = 313\n    primes[35] = 317\n    primes[36]\
    \ = 319\n    primes[37] = 331\n    primes[38] = 333\n    primes[39] = 359\n  \
    \  primes[40] = 371\n    primes[41] = 373\n    primes[42] = 379\n    primes[43]\
    \ = 389\n    primes[44] = 401\n    primes[45] = 403\n    primes[46] = 407\n  \
    \  primes[47] = 409\n    primes[48] = 419\n    primes[49] = 421\n    primes[50]\
    \ = 423\n    primes[51] = 439\n    primes[52] = 443\n    primes[53] = 449\n  \
    \  primes[54] = 457\n    primes[55] = 461\n    primes[56] = 463\n    primes[57]\
    \ = 467\n    primes[58] = 479\n    primes[59] = 487\n    primes[60] = 499\n  \
    \  primes[61] = 511\n    primes[62] = 521\n    primes[63] = 523\n    primes[64]\
    \ = 529\n    primes[65] = \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsp4msncr_test.go:86:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i <= a; i++ {\n        for _, prime := range primes {\n            if\
    \ i*prime > a {\n                break\n            }\n            if i*prime\
    \ == a {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmprrwc88gn_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmprrwc88gn_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmprrwc88gn_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmprrwc88gn_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmprrwc88gn_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmprrwc88gn_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]*primes[i]\
    \ > a {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp7wu35_4f_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7wu35_4f_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp7wu35_4f_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp7wu35_4f_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp7wu35_4f_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    \n    for i := 4; i < 100;\
    \ i++ {\n        if primes[i]*primes[i] > a {\n            return false\n    \
    \    }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpql3cihbp_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpql3cihbp_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpql3cihbp_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpql3cihbp_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpql3cihbp_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          continue\n        }\n        \n        for j := 0; j < i; j++ {\n \
    \           if primes[i]*primes[j] == a {\n                return true\n     \
    \       }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmphl8_slff_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphl8_slff_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmphl8_slff_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphl8_slff_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmphl8_slff_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    primes := make([]int, 100)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n\
    \    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\
    \    primes[8] = 23\n    primes[9] = 29\n\n    for i := 2; i < a; i++ {\n    \
    \    for _, prime := range primes {\n            if a % prime == 0 {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwt2lpz73_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwt2lpz73_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwt2lpz73_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwt2lpz73_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwt2lpz73_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    primes := make([]int, 100)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n\n    for i := 3; i\
    \ < 100; i++ {\n        if primes[i]*primes[i] > a {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp4mc3h2ex_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp4mc3h2ex_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp4mc3h2ex_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp4mc3h2ex_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp4mc3h2ex_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    c := a\n    d := a\n    e := a\n    f := a\n    g := a\n    h\
    \ := a\n    i := a\n    j := a\n    k := a\n    l := a\n    m := a\n    n := a\n\
    \    o := a\n    p := a\n    q := a\n    r := a\n    s := a\n    t := a\n    u\
    \ := a\n    v := a\n    w := a\n    x := a\n    y := a\n    z := a\n\n    for\
    \ {\n        if b == c {\n            return true\n        }\n        if d ==\
    \ e {\n            return true\n        }\n        if f == g {\n            return\
    \ true\n        }\n        if h == i {\n            return true\n        }\n \
    \       if j == k {\n            return true\n        }\n        if l == m {\n\
    \            return true\n        }\n        if n == o {\n            return true\n\
    \        }\n        if p == q {\n            return true\n        }\n        if\
    \ r == s {\n            return true\n        }\n        if t == u {\n        \
    \    return true\n        }\n        if v == w {\n            return true\n  \
    \      }\n        if x == y {\n            return true\n        }\n        if\
    \ z == x {\n            return true\n        }\n    }\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpk8x0m3bc_test.go:105: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpk8x0m3bc_test.go:105:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpk8x0m3bc_test.go:105: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpk8x0m3bc_test.go:105:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpk8x0m3bc_test.go:105: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    // return false\n    \n    // return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp8km8xi_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = 1\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        if primes[i] == 0 {\n            return false\n        }\n        \n\
    \        for j := i + i; j < 100; j += i {\n            if primes[j] == 0 {\n\
    \                primes[j] = 1\n            }\n        }\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpihiy48xk_test.go:27\
    \ +0x112\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpihiy48xk_test.go:52\
    \ +0xa7\ntesting.tRunner(0xc000192680, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        primes[i] = i\n    }\n \
    \   \n    for i := 2; i < a; i++ {\n        for j := 0; j < i; j++ {\n       \
    \     if primes[j] == i {\n                primes[j] = 0\n                break\n\
    \            }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n     \
    \   if primes[i] == 0 {\n            return false\n        }\n    }\n    \n  \
    \  return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp75c7k63n_test.go:26\
    \ +0xff\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp75c7k63n_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc00011aea0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // a is divisible by 2\n\
    \    if a % 2 == 0 {\n        return false\n    }\n\n    // a is divisible by\
    \ 3\n    if a % 3 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 5\n    if a % 5 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 7\n    if a % 7 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 11\n    if a % 11 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 13\n    if a % 13 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 17\n    if a % 17 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 19\n    if a % 19 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 23\n    if a % 23 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 29\n    if a % 29 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 31\n    if a % 31 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 37\n    if a % 37 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 41\n    if a % 41 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 43\n    if a % 43 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 47\n    if a % 47 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 53\n    if a % 53 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 59\n    if a % 59 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 61\n    if a % 61 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 67\n    if a % 67 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 71\n    if a % 71 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 73\n    if a % 73 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 79\n    if a % 79 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 83\n    if a % 83 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 89\n    if a % 89 == 0 {\n        return false\n    }\n\n    // a is divisible\
    \ by 97\n    if a % 97 == 0 {\n        return false\n    }\n\n    // a is \nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_t1urb2v_test.go:144:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // write your logic\
    \ here\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpisgp0mb6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpisgp0mb6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpisgp0mb6_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpisgp0mb6_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpisgp0mb6_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          continue\n        }\n        \n        for j := 2; j < i; j++ {\n \
    \           if i*j > 100 {\n                break\n            }\n           \
    \ if primes[i*j] == 0 {\n                continue\n            }\n           \
    \ \n            if a % i == 0 && a % j == 0 {\n                return false\n\
    \            }\n        }\n        \n        primes[i] = 1\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpzhg4l5u4_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpzhg4l5u4_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpzhg4l5u4_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpzhg4l5u4_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpzhg4l5u4_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 301\n    primes[22] = 303\n    primes[23]\
    \ = 317\n    primes[24] = 359\n    primes[25] = 371\n    primes[26] = 373\n  \
    \  primes[27] = 379\n    primes[28] = 381\n    primes[29] = 383\n    primes[30]\
    \ = 389\n    primes[31] = 391\n    primes[32] = 397\n    primes[33] = 401\n  \
    \  primes[34] = 409\n    primes[35] = 421\n    primes[36] = 431\n    primes[37]\
    \ = 433\n    primes[38] = 439\n    primes[39] = 443\n    primes[40] = 449\n  \
    \  primes[41] = 451\n    primes[42] = 453\n    primes[43] = 455\n    primes[44]\
    \ = 457\n    primes[45] = 461\n    primes[46] = 463\n    primes[47] = 467\n  \
    \  primes[48] = 479\n    primes[49] = 487\n    primes[50] = 491\n    primes[51]\
    \ = 493\n    primes[52] = 499\n    primes[53] = 501\n    primes[54] = 503\n  \
    \  primes[55] = 507\n    primes[56] = 509\n    primes[57] = 511\n    primes[58]\
    \ = 521\n    primes[59] = 523\n    primes[60] = 541\n    primes[61] = 547\n  \
    \  primes[62] = 557\n    primes[63] = 563\n    primes[64] = 569\n    primes[65]\
    \ = \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp54h8xqj6_test.go:85:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpdm6pkpvb_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpdm6pkpvb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5z0f2h1p_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5z0f2h1p_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i <= 100; i++ {\n        if b%i == 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpftupomsl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpftupomsl_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpftupomsl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpftupomsl_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpftupomsl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi6a531yd_test.go:271:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i < 100; i++ {\n        if a % primes[i] == 0 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpqcs7d16w_test.go:24\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a01a0?)\n\t/tmp/tmpqcs7d16w_test.go:43\
    \ +0x71e\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp709ho9p6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp709ho9p6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp709ho9p6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp709ho9p6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp709ho9p6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 31\n    primes[12] = 31\n    primes[13] = 31\n    primes[14] = 31\n    primes[15]\
    \ = 31\n    primes[16] = 31\n    primes[17] = 31\n    primes[18] = 31\n    primes[19]\
    \ = 31\n    primes[20] = 31\n    primes[21] = 31\n    primes[22] = 31\n    primes[23]\
    \ = 31\n    primes[24] = 31\n    primes[25] = 31\n    primes[26] = 31\n    primes[27]\
    \ = 31\n    primes[28] = 31\n    primes[29] = 31\n    primes[30] = 31\n    primes[31]\
    \ = 31\n    primes[32] = 31\n    primes[33] = 31\n    primes[34] = 31\n    primes[35]\
    \ = 31\n    primes[36] = 31\n    primes[37] = 31\n    primes[38] = 31\n    primes[39]\
    \ = 31\n    primes[40] = 31\n    primes[41] = 31\n    primes[42] = 31\n    primes[43]\
    \ = 31\n    primes[44] = 31\n    primes[45] = 31\n    primes[46] = 31\n    primes[47]\
    \ = 31\n    primes[48] = 31\n    primes[49] = 31\n    primes[50] = 31\n    primes[51]\
    \ = 31\n    primes[52] = 31\n    primes[53] = 31\n    primes[54] = 31\n    primes[55]\
    \ = 31\n    primes[56] = 31\n    primes[57] = 31\n    primes[58] = 31\n    primes[59]\
    \ = 31\n    primes[60] = 31\n    primes[61] = 31\n    primes[62] = 31\n    primes[63\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9bbiht0b_test.go:82:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // We know that all\
    \ prime numbers are less than 100\n    // So we can start by checking if they\
    \ are divisible by 3\n    if a % 3 == 0 {\n        return false\n    }\n    \n\
    \    // Now we know that all prime numbers are divisible by 3\n    // So we can\
    \ start by checking if they are divisible by 5\n    if a % 5 == 0 {\n        return\
    \ false\n    }\n    \n    // Now we know that all prime numbers are divisible\
    \ by 5\n    // So we can start by checking if they are divisible by 7\n    if\
    \ a % 7 == 0 {\n        return false\n    }\n    \n    // Now we know that all\
    \ prime numbers are divisible by 7\n    // So we can start by checking if they\
    \ are divisible by 11\n    if a % 11 == 0 {\n        return false\n    }\n   \
    \ \n    // Now we know that all prime numbers are divisible by 11\n    // So we\
    \ can start by checking if they are divisible by 13\n    if a % 13 == 0 {\n  \
    \      return false\n    }\n    \n    // Now we know that all prime numbers are\
    \ divisible by 13\n    // So we can start by checking if they are divisible by\
    \ 17\n    if a % 17 == 0 {\n        return false\n    }\n    \n    // Now we know\
    \ that all prime numbers are divisible by 17\n    // So we can start by checking\
    \ if they are divisible by 19\n    if a % 19 == 0 {\n        return false\n  \
    \  }\n    \n    // Now we know that all prime numbers are divisible by 19\n  \
    \  // So we can start by checking if they are divisible by 23\n    if a % 23 ==\
    \ 0 {\n        return false\n    }\n    \n    // Now we know that all prime numbers\
    \ are divisible by 23\n    // So we can start by checking if they are divisible\
    \ by 29\n    if a % 29 == 0 {\n        return false\n    }\n    \n    // Now we\
    \ know that all prime numbers are divisible by 29\n    // So we can start by checking\
    \ if they are divisible by 31\n    if a % 31 == 0 {\n        return false\n  \
    \  }\n    \n    // Now we know that all prime numbers are divisible by 31\n  \
    \  // So we can start by checking if they are divisible by 37\n    if a % 37 ==\
    \ 0 {\n        return false\n    }\n    \n    // Now we know that all prime numbers\
    \ are divisible by 37\n    // So we can start by checking if they are divisible\
    \ by 41\n    if a % 41 == 0 {\n        return false\n    }\n    \n    // Now we\
    \ know that all prime numbers are divisible \nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv32ozsx8_test.go:91:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for\
    \ i := 3; i <= a; i++ {\n        if primes[i] != 0 {\n            for j := 2;\
    \ j < i; j++ {\n                if primes[j] == 0 {\n                    break\n\
    \                }\n                if primes[i]%primes[j] == 0 {\n          \
    \          return false\n                }\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpgs6vtmu0_test.go:24\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000199040?)\n\t/tmp/tmpgs6vtmu0_test.go:49\
    \ +0x89e\ntesting.tRunner(0xc000199040, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 31\n    primes[12] = 31\n    primes[13] = 31\n    primes[14] = 31\n    primes[15]\
    \ = 31\n    primes[16] = 31\n    primes[17] = 31\n    primes[18] = 31\n    primes[19]\
    \ = 31\n    primes[20] = 31\n    primes[21] = 31\n    primes[22] = 31\n    primes[23]\
    \ = 31\n    primes[24] = 31\n    primes[25] = 31\n    primes[26] = 31\n    primes[27]\
    \ = 31\n    primes[28] = 31\n    primes[29] = 31\n    primes[30] = 31\n    primes[31]\
    \ = 31\n    primes[32] = 31\n    primes[33] = 31\n    primes[34] = 31\n    primes[35]\
    \ = 31\n    primes[36] = 31\n    primes[37] = 31\n    primes[38] = 31\n    primes[39]\
    \ = 31\n    primes[40] = 31\n    primes[41] = 31\n    primes[42] = 31\n    primes[43]\
    \ = 31\n    primes[44] = 31\n    primes[45] = 31\n    primes[46] = 31\n    primes[47]\
    \ = 31\n    primes[48] = 31\n    primes[49] = 31\n    primes[50] = 31\n    primes[51]\
    \ = 31\n    primes[52] = 31\n    primes[53] = 31\n    primes[54] = 31\n    primes[55]\
    \ = 31\n    primes[56] = 31\n    primes[57] = 31\n    primes[58] = 31\n    primes[59]\
    \ = 31\n    primes[60] = 31\n    primes[61] = 31\n    primes[62] = 31\n    primes[63\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9bbiht0b_test.go:82:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 31\n    primes[12] = 31\n    primes[13] = 31\n    primes[14] = 31\n    primes[15]\
    \ = 31\n    primes[16] = 31\n    primes[17] = 31\n    primes[18] = 31\n    primes[19]\
    \ = 31\n    primes[20] = 31\n    primes[21] = 31\n    primes[22] = 31\n    primes[23]\
    \ = 31\n    primes[24] = 31\n    primes[25] = 31\n    primes[26] = 31\n    primes[27]\
    \ = 31\n    primes[28] = 31\n    primes[29] = 31\n    primes[30] = 31\n    primes[31]\
    \ = 31\n    primes[32] = 31\n    primes[33] = 31\n    primes[34] = 31\n    primes[35]\
    \ = 31\n    primes[36] = 31\n    primes[37] = 31\n    primes[38] = 31\n    primes[39]\
    \ = 31\n    primes[40] = 31\n    primes[41] = 31\n    primes[42] = 31\n    primes[43]\
    \ = 31\n    primes[44] = 31\n    primes[45] = 31\n    primes[46] = 31\n    primes[47]\
    \ = 31\n    primes[48] = 31\n    primes[49] = 31\n    primes[50] = 31\n    primes[51]\
    \ = 31\n    primes[52] = 31\n    primes[53] = 31\n    primes[54] = 31\n    primes[55]\
    \ = 31\n    primes[56] = 31\n    primes[57] = 31\n    primes[58] = 31\n    primes[59]\
    \ = 31\n    primes[60] = 31\n    primes[61] = 31\n    primes[62] = 31\n    primes[63\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9bbiht0b_test.go:82:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjvq6in7_test.go:161:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073763
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 167\n    primes[49] = 169\n    primes[50] = 172\n    primes[51] = 175\n  \
    \  primes[52] = 177\n    primes[53] = 179\n    primes[54] = 181\n    primes[55]\
    \ = 183\n    primes[56] = 186\n    primes[57] = 189\n    primes[58] = 192\n  \
    \  primes[59] = 195\n    primes[60] = 197\n    primes[61] = 200\n    primes[62]\
    \ = 202\n    primes[63] = 205\n    primes[64] = 208\n    primes[65] = 211\n  \
    \  primes[66] = 213\n    primes[67] = 216\n    primes[68] = 219\n    primes[69]\
    \ = \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbi6ozge3_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 127\n  \
    \  primes[31] = 131\n    primes[32] = 137\n    primes[33] = 139\n    primes[34]\
    \ = 149\n    primes[35] = 151\n    primes[36] = 157\n    primes[37] = 163\n  \
    \  primes[38] = 167\n    primes[39] = 173\n    primes[40] = 179\n    primes[41]\
    \ = 181\n    primes[42] = 191\n    primes[43] = 193\n    primes[44] = 197 \n \
    \   primes[45] = 199\n    primes[46] = 211\n    primes[47] = 223\n    primes[48]\
    \ = 229\n    primes[49] = 233\n    primes[50] = 241\n    primes[51] = 247\n  \
    \  primes[52] = 251\n    primes[53] = 257\n    primes[54] = 263\n    primes[55]\
    \ = 269\n    primes[56] = 271\n    primes[57] = 277\n    primes[58] = 281\n  \
    \  primes[59] = 283\n    primes[60] = 293\n    primes[61] = 307\n    primes[62]\
    \ = 311\n    primes[63] = 317\n    primes[64] = 323\n    primes[65] = 329\n  \
    \  primes[66] = 331\n    primes[67]\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4vy0v7a_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 7\n    primes[22] = 79\n    primes[23]\
    \ = 83\n    primes[24] = 89\n    primes[25] = 97\n    primes[26] = 101\n    primes[27]\
    \ = 103\n    primes[28] = 107\n    primes[29] = 109\n    primes[30] = 110\n  \
    \  primes[31] = 111\n    primes[32] = 127\n    primes[33] = 131\n    primes[34]\
    \ = 137\n    primes[35] = 139\n    primes[36] = 149\n    primes[37] = 151\n  \
    \  primes[38] = 157\n    primes[39] = 163\n    primes[40] = 173\n    primes[41]\
    \ = 177\n    primes[42] = 179\n    primes[43] = 181\n    primes[44] = 191\n  \
    \  primes[45] = 193\n    primes[46] = 193\n    primes[47] = 193\n    primes[48]\
    \ = 193\n    primes[49] = 193\n    primes[50] = 193\n    primes[51] = 193\n  \
    \  primes[52] = 193\n    primes[53] = 193\n    primes[54] = 193\n    primes[55]\
    \ = 193\n    primes[56] = 193\n    primes[57] = 193\n    primes[58] = 193\n  \
    \  primes[59] = 193\n    primes[60] = 193\n    primes[61] = 193\n    primes[62]\
    \ = 193\n    primes[63] = 193\n    primes[64] = 193\n    primes[65] = 193\n  \
    \  primes[66] = 193\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xtuuley_test.go:86:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   b = b / i\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp0r3arixx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp0r3arixx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp0r3arixx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp0r3arixx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp0r3arixx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073768
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++ {\n\
    \        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n  \
    \  \n    for i := 2; i < a; i++ {\n        for j := 2; j < i; j++ {\n        \
    \    if i*j == a {\n                return true\n            }\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpro423v2z_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpro423v2z_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpro423v2z_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpro423v2z_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpro423v2z_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmps4kspjgy_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmps4kspjgy_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmps4kspjgy_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = i\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        for j := 0; j < i; j++ {\n            if primes[j] == 0 {\n         \
    \       primes[j] = i\n            }\n        }\n    }\n    \n    for i := 0;\
    \ i < 100; i++ {\n        if primes[i]*primes[i] == a{\n            return true\n\
    \        }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp1c4nprk2_test.go:28\
    \ +0x109\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp1c4nprk2_test.go:54\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    \n    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpnnxhzf54_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpnnxhzf54_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073767
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++ {\n \
    \       prime[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n        for j\
    \ := 2; j < i; j++ {\n            if prime[j] == i {\n                prime[j]\
    \ = -1\n            }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n\
    \        if prime[i] != -1 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmp3oaj90zm_test.go:23\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a0340?)\n\t/tmp/tmp3oaj90zm_test.go:49\
    \ +0x9f7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpc8ha95ua_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpc8ha95ua_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 121\n  \
    \  primes[31] = 123\n    primes[32] = 127\n    primes[33] = 131\n    primes[34]\
    \ = 137\n    primes[35] = 139\n    primes[36] = 149\n    primes[37] = 151\n  \
    \  primes[38] = 157\n    primes[39] = 163\n    primes[40] = 173\n    primes[41]\
    \ = 179\n    primes[42] = 181\n    primes[43] = 191\n    primes[44] = 193\n  \
    \  primes[45] = 197\n    primes[46] = 199\n    primes[47] = 211\n    primes[48]\
    \ = 223\n    primes[49] = 229\n    primes[50] = 241\n    primes[51] = 251\n  \
    \  primes[52] = 263\n    primes[53] = 269\n    primes[54] = 271\n    primes[55]\
    \ = 277\n    primes[56] = 281\n    primes[57] = 283\n    primes[58] = 293\n  \
    \  primes[59] = 307\n    primes[60] = 317\n    primes[61] = 319\n    primes[62]\
    \ = 323\n    primes[63] = 329\n    primes[64] = 331\n    primes[65] = 333\n  \
    \  primes[66] = 389\n    primes[\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppffhwq_j_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    prime := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        prime[i] = i\n    }\n  \
    \  \n    for i := 2; i < a; i++ {\n        for j := 0; j < i; j++ {\n        \
    \    if prime[j] == i {\n                prime[j] = -1\n            }\n      \
    \  }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if prime[i] == -1 {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpzw7juxl8_test.go:26\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpzw7juxl8_test.go:52\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // The first prime number\
    \ is 2\n    var p1 int = 2\n\n    // The second prime number is 3\n    var p2\
    \ int = 3\n\n    // The third prime number is 5\n    var p3 int = 5\n\n    //\
    \ The fourth prime number is 7\n    var p4 int = 7\n\n    // The fifth prime number\
    \ is 11\n    var p5 int = 1\n\n    // The sixth prime number is 13\n    var p6\
    \ int = 1\n\n    // The seventh prime number is 17\n    var p7 int = 1\n\n   \
    \ // The eighth prime number is 19\n    var p8 int = 1\n\n    // The ninth prime\
    \ number is 23\n    var p9 int = 1\n\n    // The tenth prime number is 29\n  \
    \  var p10 int = 1\n\n    // The eleventh prime number is 31\n    var p11 int\
    \ = 1\n\n    // The twelfth prime number is 37\n    var p12 int = 1\n\n    //\
    \ The thirteenth prime number is 41\n    var p13 int = 1\n\n    // The fourteenth\
    \ prime number is 43\n    var p14 int = 1\n\n    // The fifteenth prime number\
    \ is 47\n    var p15 int = 1\n\n    // The sixteenth prime number is 53\n    var\
    \ p16 int = 1\n\n    // The seventeenth prime number is 59\n    var p17 int =\
    \ 1\n\n    // The eighteenth prime number is 61\n    var p18 int = 1\n\n    //\
    \ The nineteenth prime number is 67\n    var p19 int = 1\n\n    // The twentieth\
    \ prime number is 71\n    var p20 int = 1\n\n    // The twenty-first prime number\
    \ is 73\n    var p21 int = 1\n\n    // The twenty-second prime number is 79\n\
    \    var p22 int = 1\n\n    // The twenty-third prime number is 83\n    var p23\
    \ int = 1\n\n    // The twenty-fourth prime number is 89\n    var p24 int = 1\n\
    \n    // The twenty-fifth prime number is 97\n    var p25 int = 1\n\n    // The\
    \ twenty-sixth prime number is 101\n    var p26 int = 1\n\n    // The twenty-seventh\
    \ prime number is 103\n    var p27 int = 1\n\n    // The twenty-eighth prime number\
    \ is 107\n    var p28 int = 1\n\n    // The twenty-ninth prime number is 113\n\
    \    var p29 int = 1\n\n    // The thirtieth prime number is 127\n    var p30\
    \ int = 1\n\n    // The thirty-first prime number is 131\n    var p31 int = 1\n\
    \n    // The thirty-second prime number is 137\n    var p32 int = 1\n\n    //\
    \ The thirty\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprigc6xlk_test.go:115:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 31\n    primes[22] = 33\n    primes[23]\
    \ = 37\n    primes[24] = 41\n    primes[25] = 43\n    primes[26] = 47\n    primes[27]\
    \ = 53\n    primes[28] = 59\n    primes[29] = 61\n    primes[30] = 71 \n    primes[31]\
    \ = 73\n    primes[32] = 79\n    primes[33] = 83\n    primes[34] = 89\n    primes[35]\
    \ = 97\n    primes[36] = 101\n    primes[37] = 103\n    primes[38] = 107\n   \
    \ primes[39] = 113\n    primes[40] = 119\n    primes[41] = 121\n    primes[42]\
    \ = 127\n    primes[43] = 131\n    primes[44] = 137\n    primes[45] = 139\n  \
    \  primes[46] = 147\n    primes[47] = 151\n    primes[48] = 157\n    primes[49]\
    \ = 163\n    primes[50] = 169\n    primes[51] = 173\n    primes[52] = 179\n  \
    \  primes[53] = 181\n    primes[54] = 191\n    primes[55] = 193\n    primes[56]\
    \ = 197 \n    primes[57] = 199\n    primes[58] = 211\n    primes[59] = 223\n \
    \   primes[60] = 229\n    primes[61] = 241\n    primes[62] = 251\n    primes[63]\
    \ = 263\n    primes[64] = 269\n    primes[65] = 301\n    primes[66] = 311\n  \
    \  primes[67] = 327\n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3_9jksim_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 31\n    primes[12] = 31\n    primes[13] = 31\n    primes[14] = 31\n    primes[15]\
    \ = 31\n    primes[16] = 31\n    primes[17] = 31\n    primes[18] = 31\n    primes[19]\
    \ = 31\n    primes[20] = 31\n    primes[21] = 31\n    primes[22] = 31\n    primes[23]\
    \ = 31\n    primes[24] = 31\n    primes[25] = 31\n    primes[26] = 31\n    primes[27]\
    \ = 31\n    primes[28] = 31\n    primes[29] = 31\n    primes[30] = 31\n    primes[31]\
    \ = 31\n    \n    for i := 2; i < a; i++ {\n        for j := 0; j < i; j++ {\n\
    \            if primes[j] == 0 {\n                continue\n            }\n  \
    \          if primes[j] == i {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcc0kxpd4_test.go:87: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcc0kxpd4_test.go:87:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpcc0kxpd4_test.go:87: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpcc0kxpd4_test.go:87:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcc0kxpd4_test.go:87: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a / 2\n    c := a / 3\n    d := a / 5\n    e := a / 7\n    f := a /\
    \ 11\n    g := a / 13\n    h := a / 17\n    i := a / 19\n    j := a / 23\n   \
    \ k := a / 29\n    l := a / 31\n    m := a / 37\n    n := a / 41\n    o := a /\
    \ 43\n    p := a / 47\n    q := a / 53\n    r := a / 59\n    s := a / 61\n   \
    \ t := a / 67\n    u := a / 71\n    v := a / 73\n    w := a / 79\n    x := a /\
    \ 83\n    y := a / 89\n    z := a / 97\n    \n    if a == 1 {\n        return\
    \ true\n    }\n    \n    if a == 2 {\n        return true\n    }\n    \n    if\
    \ a == 3 {\n        return true\n    }\n    \n    if a == 5 {\n        return\
    \ true\n    }\n    \n    if a == 7 {\n        return true\n    }\n    \n    if\
    \ a == 11 {\n        return true\n    }\n    \n    if a == 13 {\n        return\
    \ true\n    }\n    \n    if a == 17 {\n        return true\n    }\n    \n    if\
    \ a == 19 {\n        return true\n    }\n    \n    if a == 23 {\n        return\
    \ true\n    }\n    \n    if a == 29 {\n        return true\n    }\n    \n    if\
    \ a == 31 {\n        return true\n    }\n    \n    if a == 37 {\n        return\
    \ true\n    }\n    \n    if a == 41 {\n        return true\n    }\n    \n    if\
    \ a == 43 {\n        return true\n    }\n    \n    if a == 47 {\n        return\
    \ true\n    }\n    \n    if a == 53 {\n        return true\n    }\n    \n    if\
    \ a == 59 {\n        return true\n    }\n    \n    if a == 61 {\n        return\
    \ true\n    }\n    \n    if a == 67 {\n        return true\n    }\n    \n    if\
    \ a == 71 {\n        return true\n    }\n    \n    if a == 73 {\n        return\
    \ true\n    }\n    \n    if a == 79 {\n        return true\n    }\n    \n    if\
    \ a == 83{\n        return true\n    }\n    \n    if a == 89{\n        return\
    \ true\n    }\n    \n    if a == 97{\n        return true\n    }\n    \n    if\
    \ a == 101{\n        return true\n    }\n    \n    if a == 103{\n        return\
    \ true\n    }\n    \n    if a == \nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpni986diq_test.go:153:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 121\n    primes[32] = 123\n    primes[33] = 127\n    primes[34]\
    \ = 131\n    primes[35] = 137\n    primes[36] = 139\n    primes[37] = 142\n  \
    \  primes[38] = 147\n    primes[39] = 151\n    primes[40] = 157\n    primes[41]\
    \ = 163\n    primes[42] = 167\n    primes[43] = 173\n    primes[44] = 179\n  \
    \  primes[45] = 181\n    primes[46] = 191\n    primes[47] = 193\n    primes[48]\
    \ = 193\n    primes[49] = 197\n    primes[50] = 201\n    primes[51] = 207\n  \
    \  primes[52] = 211\n    primes[53] = 217\n    primes[54] = 223\n    primes[55]\
    \ = 229\n    primes[56] = 233\n    primes[57] = 301\n    primes[58] = 307\n  \
    \  primes[59] = 313\n    primes[60] = 319\n    primes[61] = 329\n    primes[62]\
    \ = 331\n    primes[63] = 333\n    primes[64] = 357\n    primes[65] = 359\n  \
    \  primes[66] = 377\n    primes[67]\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzjre7w8u_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = 1\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        if primes[i] == 0 {\n            return false\n        }\n        for\
    \ j := i + i; j < 100; j += i {\n            if primes[j] == 0 {\n           \
    \     primes[j] = 1\n            }\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpqo5vdzg0_test.go:27\
    \ +0x112\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpqo5vdzg0_test.go:51\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    primes := make([]int, 100)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n\
    \    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n\
    \    primes[8] = 23\n    primes[9] = 29\n\n    for i := 2; i < a; i++ {\n    \
    \    if primes[i]*primes[i] > a {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpzllfgw_3_test.go:31\
    \ +0x119\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpzllfgw_3_test.go:54\
    \ +0x10d\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 127\n  \
    \  primes[31] = 131\n    primes[32] = 137\n    primes[33] = 139\n    primes[34]\
    \ = 149\n    primes[35] = 151\n    primes[36] = 157\n    primes[37] = 163\n  \
    \  primes[38] = 167\n    primes[39] = 173\n    primes[40] = 179\n    primes[41]\
    \ = 181\n    primes[42] = 191\n    primes[43] = 193\n    primes[44] = 197 \n \
    \   primes[45] = 199\n    primes[46] = 211\n    primes[47] = 223\n    primes[48]\
    \ = 227\n    primes[49] = 229\n    primes[50] = 231\n    primes[51] = 233\n  \
    \  primes[52] = 239\n    primes[53] = 241\n    primes[54] = 247\n    primes[55]\
    \ = 251\n    primes[56] = 257\n    primes[57] = 263\n    primes[58] = 269\n  \
    \  primes[59] = 271\n    primes[60] = 277\n    primes[61] = 281\n    primes[62]\
    \ = 283\n    primes[63] = 293\n    primes[64] = 307\n    primes[65] = 311\n  \
    \  primes[66] = 317\n    primes[67] = 319\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgj8gaus7_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 7\n    primes[22] = 79\n    primes[23]\
    \ = 83\n    primes[24] = 89\n    primes[25] = 97\n    primes[26] = 101\n    primes[27]\
    \ = 103\n    primes[28] = 107\n    primes[29] = 109\n    primes[30] = 110\n  \
    \  primes[31] = 111\n    primes[32] = 113\n    primes[33] = 117\n    primes[34]\
    \ = 121\n    primes[35] = 123\n    primes[36] = 127\n    primes[37] = 131\n  \
    \  primes[38] = 137\n    primes[39] = 139\n    primes[40] = 133\n    primes[41]\
    \ = 139\n    primes[42] = 147\n    primes[43] = 153\n    primes[44] = 157\n  \
    \  primes[45] = 161\n    primes[46] = 163\n    primes[47] = 165\n    primes[48]\
    \ = 173\n    primes[49] = 179\n    primes[50] = 181\n    primes[51] = 183\n  \
    \  primes[52] = 191\n    primes[53] = 193\n    primes[54] = 193\n    primes[55]\
    \ = 197\n    primes[56] = 199\n    primes[57] = 211\n    primes[58] = 223\n  \
    \  primes[59] = 229\n    primes[60] = 241\n    primes[61] = 251\n    primes[62]\
    \ = 261\n    primes[63] = 263\n    primes[64] = 263\n    primes[65] = 263\n  \
    \  primes[66] = 263\n    primes[67] = 26\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe2zsxk_s_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 120\n    primes[32] = 124\n    primes[33] = 127\n    primes[34]\
    \ = 130\n    primes[35] = 133\n    primes[36] = 137\n    primes[37] = 139\n  \
    \  primes[38] = 142\n    primes[39] = 145\n    primes[40] = 147\n    primes[41]\
    \ = 149\n    primes[42] = 152\n    primes[43] = 155\n    primes[44] = 157\n  \
    \  primes[45] = 159\n    primes[46] = 162\n    primes[47] = 165\n    primes[48]\
    \ = 168\n    primes[49] = 171\n    primes[50] = 173\n    primes[51] = 177\n  \
    \  primes[52] = 179\n    primes[53] = 181\n    primes[54] = 183\n    primes[55]\
    \ = 186\n    primes[56] = 189\n    primes[57] = 191\n    primes[58] = 193\n  \
    \  primes[59] = 196\n    primes[60] = 198\n    primes[61] = 199\n    primes[62]\
    \ = 202\n    primes[63] = 205\n    primes[64] = 207\n    primes[65] = 209\n  \
    \  primes[66] = 212\n    primes[67] = 215\n    primes[68] = 217\n    \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzq7616ej_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi6a531yd_test.go:271:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        primes[i] = i\n    }\n \
    \   \n    for i := 2; i < a; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if primes[j] == i {\n                primes[j] = -1\n            }\n   \
    \     }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] ==\
    \ -1 {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp3uywxjpf_test.go:26\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp3uywxjpf_test.go:52\
    \ +0xa7\ntesting.tRunner(0xc0001924e0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < len(primes); i++ {\n        primes[i] = i\n\
    \    }\n    \n    for i := 2; i < a; i++ {\n        for _, j := range primes {\n\
    \            if i*j == a {\n                primes[j] = i\n                break\n\
    \            }\n        }\n    }\n    \n    for _, i := range primes {\n     \
    \   if i == 3 {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9ktlg7fy_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9ktlg7fy_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp9ktlg7fy_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \    \n    for i := 5; i <= a; i++ {\n        if primes[i%10] == 0 {\n       \
    \     return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp_1mmf5gu_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp_1mmf5gu_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp_1mmf5gu_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp_1mmf5gu_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp_1mmf5gu_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 127\n  \
    \  primes[31] = 131\n    primes[32] = 137\n    primes[33] = 139\n    primes[34]\
    \ = 149\n    primes[35] = 151\n    primes[36] = 157\n    primes[37] = 163\n  \
    \  primes[38] = 167\n    primes[39] = 173\n    primes[40] = 179\n    primes[41]\
    \ = 181\n    primes[42] = 191\n    primes[43] = 193\n    primes[44] = 197 \n \
    \   primes[45] = 199 \n    primes[46] = 203 \n    primes[47] = 209 \n    primes[48]\
    \ = 211 \n    primes[49] = 223 \n    primes[50] = 229 \n    primes[51] = 233 \n\
    \    primes[52] = 239 \n    primes[53] = 241 \n    primes[54] = 247 \n    primes[55]\
    \ = 251 \n    primes[56] = 257 \n    primes[57] = 263 \n    primes[58] = 269 \n\
    \    primes[59] = 271 \n    primes[60] = 277\n    primes[61] = 285\n    primes[62]\
    \ = 291\n    primes[63] = 297\n    primes[64] = 303\n    primes[65] = 311\n  \
    \  primes[66] = 3\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9u3_8y20_test.go:86:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n\n    // Write your code here\n\
    \    \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpyc_xutuy_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpyc_xutuy_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpyc_xutuy_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpyc_xutuy_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpyc_xutuy_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    prime := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        prime[i] = i\n    }\n  \
    \  \n    for i := 2; i < a; i++ {\n        for j := 0; j < i; j++ {\n        \
    \    if prime[j] == 0 {\n                break\n            }\n            if\
    \ a % prime[j] == 0 {\n                return false\n            }\n        }\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpv0drke2x_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpv0drke2x_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpv0drke2x_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpv0drke2x_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpv0drke2x_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    for i := 2; i < b; i++ {\n        if b%i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpongxdy45_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpongxdy45_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    if a < 100 {\n        return false\n    }\n\
    \    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 37\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 121\n    primes[32]\
    \ = 123\n    primes[33] = 127\n    primes[34] = 131\n    primes[35] = 137\n  \
    \  primes[36] = 139\n    primes[37] = 142\n    primes[38] = 147\n    primes[39]\
    \ = 151\n    primes[40] = 157\n    primes[41] = 163\n    primes[42] = 167\n  \
    \  primes[43] = 173\n    primes[44] = 179\n    primes[45] = 181\n    primes[46]\
    \ = 191\n    primes[47] = 193\n    primes[48] = 199\n    primes[49] = 209\n  \
    \  primes[50] = 219\n    primes[51] = 223\n    primes[52] = 227\n    primes[53]\
    \ = 229\n    primes[54] = 233\n    primes[55] = 239\n    primes[56] = 243\n  \
    \  primes[57] = 247\n    primes[58] = 251\n    primes[59] = 257\n    primes[60]\
    \ = 263\n    primes[61] = 269\n    primes[62] = 271\n    primes[63] = 277\n  \
    \  primes[64] = 283\n    primes[65] = 289\n    primes[66] = 293\n    prime\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_132_yul_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpnelu_bvt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpnelu_bvt_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          continue\n        }\n        \n        for j := i + 1; j < 100; j++\
    \ {\n            if primes[j] == 0 {\n                continue\n            }\n\
    \            \n            if a % primes[i] == 0 && a % primes[j] == 0 {\n   \
    \             return true\n            }\n        }\n    }\n    \n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpb1282gef_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpb1282gef_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpb1282gef_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpb1282gef_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpb1282gef_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    b := a\n    c := a\n    d := a\n    e := a\n    f := a\n    g := a\n    h\
    \ := a\n    i := a\n    j := a\n    k := a\n    l := a\n    m := a\n    n := a\n\
    \    o := a\n    p := a\n    q := a\n    r := a\n    s := a\n    t := a\n    u\
    \ := a\n    v := a\n    w := a\n    x := a\n    y := a\n    z := a\n\n    for\
    \ {\n        if b%2 == 1 {\n            break\n        }\n        b = b/2\n  \
    \  }\n\n    for {\n        if c%2 == 1 {\n            break\n        }\n     \
    \   c = c/2\n    }\n\n    for {\n        if d%2 == 1 {\n            break\n  \
    \      }\n        d = d/2\n    }\n\n    for {\n        if e%2 == 1 {\n       \
    \     break\n        }\n        e = e/2\n    }\n\n    for {\n        if f%2 ==\
    \ 1 {\n            break\n        }\n        f = f/2\n    }\n\n    for {\n   \
    \     if g%2 == 1 {\n            break\n        }\n        g = g/2\n    }\n\n\
    \    for {\n        if h%2 == 1 {\n            break\n        }\n        h = h/2\n\
    \    }\n\n    for {\n        if i%2 == 1 {\n            break\n        }\n   \
    \     i = i/2\n    }\n\n    for {\n        if j%2 == 1 {\n            break\n\
    \        }\n        j = j/2\n    }\n\n    for {\n        if k%2 == 1 {\n     \
    \       break\n        }\n        k = k/2\n    }\n\n    for {\n        if l%2\
    \ == 1 {\n            break\n        }\n        l = l/2\n    }\n\n    for {\n\
    \        if m%2 == 1 {\n            break\n        }\n        m = m/2\n    }\n\
    \n    for {\n        if n%2 == 1 {\n            break\n        }\n        n =\
    \ n/2\n    }\n\n    for {\n        if o%2 == 1 {\n            break\n        }\n\
    \        o = o/2\n    }\n\n    for {\n        if p%2 == 1 {\n            break\n\
    \        }\n        p = p/2\n    }\n\n    for {\n        if q%2 == 1 {\n     \
    \       break\n        }\n        q = q/2\n    }\n\n    for {\n        if r%2\
    \ == 1 {\n            break\n        }\n        r = r/2\n    }\n\n    for {\n\
    \        if s%2 == 1 {\n            break\n        }\n        s = s/2\n    }\n\
    \n    for {\n        if t%2 == 1 {\n            break\n        }\n        t =\
    \ t/2\n    }\n\n    for {\n        if u%2 == 1 {\n            break\n        }\n\
    \        u = u/2\n    }\n\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjblbnuoa_test.go:181:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3]\
    \ = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7]\
    \ = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11]\
    \ = 37\n    primes[12] = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15]\
    \ = 53\n    primes[16] = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19]\
    \ = 71\n    primes[20] = 73\n    primes[21] = 79\n    primes[22] = 83\n    primes[23]\
    \ = 89\n    primes[24] = 97\n    primes[25] = 101\n    primes[26] = 103\n    primes[27]\
    \ = 107\n    primes[28] = 109\n    primes[29] = 113\n    primes[30] = 116\n  \
    \  primes[31] = 121\n    primes[32] = 123\n    primes[33] = 127\n    primes[34]\
    \ = 131\n    primes[35] = 137\n    primes[36] = 142\n    primes[37] = 147\n  \
    \  primes[38] = 153\n    primes[39] = 157\n    primes[40] = 162\n    primes[41]\
    \ = 167\n    primes[42] = 173\n    primes[43] = 179\n    primes[44] = 181\n  \
    \  primes[45] = 191\n    primes[46] = 193\n    primes[47] = 197\n    primes[48]\
    \ = 201\n    primes[49] = 207\n    primes[50] = 209\n    primes[51] = 218\n  \
    \  primes[52] = 223\n    primes[53] = 229\n    primes[54] = 233\n    primes[55]\
    \ = 239\n    primes[56] = 243\n    primes[57] = 247\n    primes[58] = 251\n  \
    \  primes[59] = 257\n    primes[60] = 263\n    primes[61] = 269\n    primes[62]\
    \ = 271\n    primes[63] = 277\n    primes[64] = 283\n    primes[65] = 289\n  \
    \  primes[66] = 293\n    primes[67] = 301\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4fc8vvwh_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 100 {\n        return false\n    }\n    \n    // Write your code here\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpa6e5p8g5_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpa6e5p8g5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    \n    // Write your code here\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9rfq6e4a_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9rfq6e4a_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073764
