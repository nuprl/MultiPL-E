name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\nfunc rolling_max(numbers []int) []int\
  \ {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_",
  "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    result = append(result, max)\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    return append(result, max)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    rolling_max := numbers[0]\n    for _, number := range numbers {\n  \
    \      if number > rolling_max {\n            rolling_max = number\n        }\n\
    \    }\n    result = append(result, rolling_max)\n    return result\n}\n", " \
    \   max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    return append(result, max)\n}\n", "    max := numbers[0]\n  \
    \  result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        } else {\n            max = number\n        }\n    }\n    return\
    \ append(result, max)\n}\n", "    var max_list []int\n    var max_value int\n\
    \    var i int\n    for i = 0; i < len(numbers); i++ {\n        max_value = numbers[i]\n\
    \        max_list = append(max_list, max_value)\n    }\n    for ; i < len(numbers);\
    \ i++ {\n        max_value = numbers[i]\n        for j := i - 1; j >= 0; j-- {\n\
    \            if numbers[j] > max_value {\n                max_value = numbers[j]\n\
    \                max_list = append(max_list, max_value)\n            }\n     \
    \   }\n    }\n    return max_list\n}\n", "    result := make([]int, 0)\n    for\
    \ _, number := range numbers {\n        result = append(result, number)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_",
  "    result := make([]int, 0)\n    for _, number := range numbers {\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, len(numbers))\n   \
    \ i := 0\n    for _, number := range numbers {\n        result[i] = number\n \
    \       i = i + 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = result[i]\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    rolling_max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > rolling_max\
    \ {\n            rolling_max = number\n            result = append(result, rolling_max)\n\
    \        }\n    }\n    return result\n}\n", "    var max_number int\n    var max_index\
    \ int\n    var max_value int\n    for i := 0; i < len(numbers); i++ {\n      \
    \  if numbers[i] > max_value {\n            max_value = numbers[i]\n         \
    \   max_index = i\n        }\n    }\n    result := make([]int, 0)\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n          \
    \  result = append(result, numbers[max_index])\n            max_value = numbers[i]\n\
    \            max_index = i\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    max := numbers[0]\n    rolling_max := []int{}\n    for _,\
    \ number := range numbers {\n        if number > max {\n            rolling_max\
    \ = append(rolling_max, max)\n            max = number\n        } else {\n   \
    \         max = number\n        }\n    }\n    rolling_max = append(rolling_max,\
    \ max)\n    return rolling_max\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    var max_list []int\n    var max_value int\n    for _, number := range\
    \ numbers {\n        if number > max_value {\n            max_value = number\n\
    \        }\n        max_list = append(max_list, number)\n    }\n    return max_list\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n        }\n        max = number\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    var result []int\n    var max int\n\
    \    var i int\n    for i = 0; i < len(numbers); i++ {\n        if max < numbers[i]\
    \ {\n            max = numbers[i]\n        }\n        if max > numbers[i] {\n\
    \            result = append(result, max)\n            max = numbers[i]\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    max := numbers[0]\n\
    \    rolling_max := []int{}\n    for _, number := range numbers {\n        if\
    \ number > max {\n            rolling_max = append(rolling_max, max)\n       \
    \     max = number\n        } else {\n            max = number\n        }\n  \
    \  }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n}\n",
  "    result := make([]int, 0)\n    for _, number := range numbers {\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n        }\n        max = number\n    }\n    return result\n}\n", "   \
    \ max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    result = append(result, max)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number ==\
    \ max {\n            result = append(result, max)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    max := numbers[0]\n    rolling_max\
    \ := []int{}\n    for _, number := range numbers {\n        if number > max {\n\
    \            rolling_max = append(rolling_max, max)\n            max = number\n\
    \        } else {\n            max = number\n        }\n    }\n    rolling_max\
    \ = append(rolling_max, max)\n    return rolling_max\n}\n", "    var result []int\n\
    \    for _, number := range numbers {\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    result = append(result, max)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    result = append(result, max)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n        }\n        max = number\n    }\n    return result\n}\n", "   \
    \ result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, len(numbers))\n   \
    \ max := numbers[0]\n    i := 0\n    for _, number := range numbers {\n      \
    \  if number > max {\n            max = number\n        }\n        result[i] =\
    \ max\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    rolling_max := numbers[0]\n    for _, number := range numbers {\n  \
    \      if number > rolling_max {\n            rolling_max = number\n        }\n\
    \    }\n    result = append(result, rolling_max)\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number > max {\n    \
    \        result = append(result, max)\n            max = number\n        }\n \
    \   }\n    return result\n}\n", "    var max int\n    var max_index int\n    var\
    \ max_value int\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n            max_index = -1\n            max_value\
    \ = number\n        }\n        if number == max {\n            max_index++\n \
    \       }\n    }\n    result := make([]int, max_index+1)\n    for _, number :=\
    \ range numbers {\n        if number > max {\n            continue\n        }\n\
    \        result[max_index] = number\n        max_value = number\n        max_index++\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n        }\n \
    \       max = number\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        } else {\n            max = number\n        }\n    }\n    return\
    \ append(result, max)\n}\n", "    var max_rolling []int\n    var max_number int\n\
    \    var i int\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max_number {\n            max_rolling = append(max_rolling, numbers[i])\n\
    \            max_number = numbers[i]\n        } else {\n            max_number\
    \ = numbers[i]\n        }\n    }\n    return max_rolling\n}\n", "    result :=\
    \ make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number > max {\n            result = append(result, max)\n       \
    \     max = number\n        } else {\n            max = number\n        }\n  \
    \  }\n    result = append(result, max)\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i++\n    }\n    return rolling_max_helper(result, len(numbers), 0)\n\
    }\n", "    var result []int\n    var max_value int\n    for _, number := range\
    \ numbers {\n        max_value = number\n        result = append(result, max_value)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    rolling_max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > rolling_max\
    \ {\n            rolling_max = number\n        }\n    }\n    result = append(result,\
    \ rolling_max)\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        if i == len(numbers)-1 {\n            break\n        }\n        i++\n\
    \    }\n    return result\n}\n", "    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_number int\n    var max_number int\n    var max_number int\n    var\
    \ max_number int\n    var max_number int\n    var max_number int\n    var max_number\
    \ int\n    var max_number int\n    var max_number int\n    var max_number int\n\
    \    var max_", "    max := numbers[0]\n    result := make([]int, 0)\n    for\
    \ _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        } else {\n        \
    \    max = number\n        }\n    }\n    result = append(result, max)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number ==\
    \ max {\n            result = append(result, max)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   var max int\n    var max_index int\n    var max_value int\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \            max_index = i\n        }\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] == max {\n            numbers[max_index] = numbers[i]\n\
    \        }\n    }\n    return numbers\n}\n", "    var result []int\n    current\
    \ := 0\n    for _, number := range numbers {\n        if number > current {\n\
    \            result = append(result, current)\n            current = number\n\
    \        }\n    }\n    result = append(result, current)\n    return result\n}\n",
  "    var max_rolling []int\n    var max_number int\n    for _, number := range numbers\
    \ {\n        if number > max_number {\n            max_number = number\n     \
    \       max_rolling = append(max_rolling, number)\n        }\n    }\n    return\
    \ max_rolling\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number > max {\n            max\
    \ = number\n        }\n    }\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   var max int\n    var max_index int\n    var max_value int\n    var i int\n\
    \    for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n     \
    \       max = numbers[i]\n            max_index = i\n            max_value = max\n\
    \        }\n    }\n    result := make([]int, 0)\n    for i = 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] >= max_value {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        } else {\n            max = number\n        }\n    }\n    return\
    \ append(result, max)\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    var result []int\n    for _, number := range numbers {\n  \
    \      result = append(result, number)\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    return append(result, max)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    var max_number int\n    var max_index\
    \ int\n    for index, number := range numbers {\n        if number > max_number\
    \ {\n            max_number = number\n            max_index = index\n        }\n\
    \    }\n    result := make([]int, 0)\n    for index, number := range numbers {\n\
    \        if index != max_index {\n            result = append(result, number)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n        result[i] = max\n\
    \    }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    var result []int\n    var max_value\
    \ int\n    for _, number := range numbers {\n        if number > max_value {\n\
    \            max_value = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number == max_value {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        } else {\n            max = number\n        }\n    }\n    return\
    \ append(result, max)\n}\n", "    result := make([]int, 0)\n    rolling_max :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number > rolling_max\
    \ {\n            rolling_max = number\n        }\n        result = append(result,\
    \ rolling_max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    var max_element\
    \ int\n    var max_index int\n    for i := 0; i < len(numbers); i++ {\n      \
    \  if numbers[i] > max_element {\n            max_element = numbers[i]\n     \
    \       max_index = i\n        }\n    }\n    result := make([]int, 0)\n    for\
    \ i := 0; i < max_index; i++ {\n        result = append(result, numbers[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    var max_number int\n\
    \    var max_index int\n    var max_value int\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max_value {\n            max_value = numbers[i]\n\
    \            max_index = i\n        }\n    }\n    result := make([]int, 0)\n \
    \   for i := 0; i < len(numbers); i++ {\n        if i == max_index {\n       \
    \     result = append(result, max_value)\n        } else {\n            result\
    \ = append(result, numbers[i])\n        }\n    }\n    return result\n}\n", " \
    \   max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   max := numbers[0]\n    rolling_max := []int{}\n    for _, number := range\
    \ numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   var max_number int\n    var max_index int\n    var max_value int\n    var\
    \ i int\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max_value\
    \ {\n            max_value = numbers[i]\n            max_index = i\n        }\n\
    \    }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if i == max_index {\n            result = append(result, max_value)\n\
    \        } else {\n            result = append(result, numbers[i])\n        }\n\
    \    }\n    return result\n}\n", "    var max_element int\n    var max_index int\n\
    \    var max_value int\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max_value {\n            max_element = numbers[i]\n            max_index =\
    \ i\n            max_value = numbers[i]\n        }\n    }\n    result := make([]int,\
    \ 0)\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] >= max_value\
    \ {\n            result = append(result, numbers[i])\n        }\n    }\n    return\
    \ append(result, max_element)\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    var max_number int\n    var max_index int\n    var max_value int\n\
    \    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i]\n            max_index = i\n        }\n  \
    \  }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if i == max_index {\n            result = append(result, max_value)\n\
    \        } else {\n            result = append(result, numbers[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n   \
    \ }\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] > result[i] {\n                result[i] =\
    \ numbers[j]\n            }\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max_number int\n    for _, number := range numbers {\n\
    \        if number > max_number {\n            max_number = number\n         \
    \   result = append(result, max_number)\n        }\n    }\n    return result\n\
    }\n", "    max := numbers[0]\n    rolling_max := []int{}\n    for _, number :=\
    \ range numbers {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    var max_found []int\n    var max_found int\n    var i int\n    for i = 0; i\
    \ < len(numbers); i++ {\n        max_found = 0\n        for j = 0; j < i; j++\
    \ {\n            if numbers[j] > numbers[i] {\n                max_found = numbers[j]\n\
    \            }\n        }\n        max_found = max_found > numbers[i] ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]\n        max_found\
    \ = max_found > max_found ? max_found : numbers[i]\n        max_found = max_found\
    \ > max_found ? max_found : numbers[i]\n        max_found = max_found > max_found\
    \ ? max_found : numbers[i]\n        max_found = max_found > max_found ? max_found\
    \ : numbers[i]\n        max_found = max_found > max_found ? max_found : numbers[i]\n\
    \        max_found = max_found > max_found ? max_found : numbers[i]", "    result\
    \ := make([]int, 0)\n    for _, number := range numbers {\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result\
    \ := make([]int, 0)\n    for _, number := range numbers {\n        if number >\
    \ max {\n            result = append(result, max)\n            max = number\n\
    \        } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        if number > 0 {\n            i++\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    max :=\
    \ numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    result = append(result, max)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, number := range numbers {\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result\
    \ := make([]int, 0)\n    for _, number := range numbers {\n        if number >\
    \ max {\n            result = append(result, max)\n            max = number\n\
    \        } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number ==\
    \ max {\n            result = append(result, max)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \     }\n        max = number\n    }\n    return result\n}\n", "    var max_number\
    \ int\n    var max_index int\n    var max_value int\n    for index, number :=\
    \ range numbers {\n        if number > max_value {\n            max_value = number\n\
    \            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index + 1\n    for index, number := range numbers {\n   \
    \     if index == max_index {\n            continue\n        }\n        if number\
    \ > max_value {\n            max_value = number\n            max_index = index\n\
    \        }\n    }\n    max_value = numbers[max_index]\n    max_index = max_index\
    \ + 1\n    for index, number := range numbers {\n        if index == max_index\
    \ {\n            continue\n        }\n        if number > max_value {\n      \
    \      max_value = number\n            max_index = index\n        }\n    }\n \
    \   max_value = numbers[max_index]\n    max_index = max_index + 1\n    for index,\
    \ number := range numbers {\n        if index == max_index {\n            continue\n\
    \        }\n        if number > max_value {\n            max_value = number\n\
    \            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index + 1\n    for index, number := range numbers {\n   \
    \     if index == max_index {\n            continue\n        }\n        if number\
    \ > max_value {\n            max_value = number\n            max_index = index\n\
    \        }\n    }\n    max_value = numbers[max_index]\n    max_index = max_index\
    \ + 1\n    for index, number := range numbers {\n        if index == max_index\
    \ {\n            continue\n        }\n        if number > max_value {\n      \
    \      max_value = number\n            max_index = index\n        }\n    }\n \
    \   max_value = numbers[max_index]\n    max_index = max_index + 1\n    for index,\
    \ number := range numbers {\n        if index == max_index {\n            continue\n\
    \        }\n        if number > max_value {\n            max_value = number\n\
    \            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index + 1\n    for index, number := range numbers {\n   \
    \     if index == max_index {\n            continue\n        }\n        if number\
    \ > max_value {\n            max_value = number\n            max_index = index\n\
    \        }\n    }\n    max_value = numbers[max_index]\n    max_index = max_index\
    \ + 1\n    for index, number := range numbers {\n        if index == max_index\
    \ {\n            continue\n        }\n        if number > max_value {\n      \
    \      max_value = number\n            max_index = index\n        }\n    }\n \
    \   max_value = numbers[max_index]\n    max_index = max_index + 1\n    for index,\
    \ number := range numbers {\n        if index == max_index {\n            continue\n\
    \        }\n        if number > max_value {\n            max_value = number\n\
    \            max_index = index\n        }\n    }\n    max_value = numbers[max_index]\n\
    \    max_index = max_index", "    var max int\n    var max_index int\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n            max_index = i\n        }\n    }\n    result :=\
    \ make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n        if i == max_index\
    \ {\n            result = append(result, max)\n        } else {\n            result\
    \ = append(result, numbers[i])\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    return append(result, max)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \     }\n        max = number\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        result = append(result,\
    \ number)\n    }\n    return rolling_max_helper(result, len(numbers))\n}\n", " \
    \   max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    return append(result, max)\n}\n", "    max := numbers[0]\n  \
    \  result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        } else {\n            max = number\n        }\n    }\n    result\
    \ = append(result, max)\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        }\n    }\n    return result\n}\n", "    var\
    \ max int\n    var max_index int\n    var max_value int\n    var i int\n\n   \
    \ for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n        \
    \    max_index = i\n            max_value = numbers[i]\n        }\n    }\n\n \
    \   for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n      \
    \      max = numbers[i]\n        }\n    }\n\n    result := make([]int, 0)\n  \
    \  for i = 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n       \
    \     result = append(result, numbers[i])\n        }\n    }\n\n    return append(result,\
    \ max_value)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number > max {\n            max\
    \ = number\n        }\n    }\n    for _, number := range numbers {\n        if\
    \ number > max {\n            result = append(result, max)\n            max =\
    \ number\n        }\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    max := numbers[0]\n  \
    \  result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    rolling_max := []int{}\n    for _, number := range numbers\
    \ {\n        if number > max {\n            rolling_max = append(rolling_max,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    rolling_max = append(rolling_max, max)\n    return rolling_max\n\
    }\n", "    var max int\n    var rolling_max []int\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ rolling_max = append(rolling_max, max)\n        } else {\n            rolling_max\
    \ = append(rolling_max, number)\n        }\n    }\n    return rolling_max\n}\n",
  "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n            result = append(result, max)\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    rolling_max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > rolling_max\
    \ {\n            rolling_max = number\n        }\n        result = append(result,\
    \ rolling_max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \        }\n        max = number\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    var max_number int\n    var max_index\
    \ int\n    var max_value int\n\n    for i := 0; i < len(numbers); i++ {\n    \
    \    if numbers[i] > max_value {\n            max_value = numbers[i]\n       \
    \     max_index = i\n        }\n    }\n\n    result := make([]int, 0)\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if i == max_index {\n            result\
    \ = append(result, max_value)\n        } else {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n\n    return result\n}\n", "    var max int\n\
    \    var rolling_max []int\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n            rolling_max = append(rolling_max,\
    \ max)\n        } else {\n            rolling_max = append(rolling_max, number)\n\
    \        }\n    }\n    return rolling_max\n}\n", "    max := numbers[0]\n    result\
    \ := make([]int, 0)\n    for _, number := range numbers {\n        if number >\
    \ max {\n            result = append(result, max)\n            max = number\n\
    \        } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    rolling_max := numbers[0]\n \
    \   for _, number := range numbers {\n        if number > rolling_max {\n    \
    \        rolling_max = number\n        }\n    }\n    result = append(result, rolling_max)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
