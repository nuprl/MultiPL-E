language: go_test.go
name: HumanEval_80_is_happy
results:
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n\
    \    for _, c := range s {\n        freqs[c]++\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if freqs[s[i]] == 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpopvbkniz_test.go:18:15: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpopvbkniz_test.go:21:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    distinctLetters := make(map[rune]bool)\n    for _, letter := range\
    \ last3 {\n        distinctLetters[letter] = true\n    }\n    \n    return len(distinctLetters)\
    \ >= 3\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n  \
    \  \n    for _, letter := range s[1:] {\n        if letter == lastLetter {\n \
    \           return false\n        }\n        lastLetter = letter\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7bqu1ut_test.go:20:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmpv7bqu1ut_test.go:23:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[i] || s[j-1] == s[i+1]\
    \ || s[j-1] == s[i+2] {\n            return false\n        }\n    }\n    \n  \
    \  return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpovt4r_23_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpovt4r_23_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpovt4r_23_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    letters := make(map[rune]bool)\n    for _, letter := range last3 {\n\
    \        letters[letter] = true\n    }\n    \n    for _, letter := range s {\n\
    \        if letters[letter] {\n            return false\n        }\n    }\n  \
    \  \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp5bjzex84_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp5bjzex84_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp5bjzex84_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[len(s)-1]\n\
    \    \n    for i := 0; i < len(s)-2; i++ {\n        if s[i] != s[i+1] {\n    \
    \        return false\n        }\n    }\n    \n    return lastLetter == s[len(s)-2]\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmposifspis_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmposifspis_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmposifspis_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[i] || s[j-1] == s[i+1]\
    \ || s[j-1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpizkgu2gp_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpizkgu2gp_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpizkgu2gp_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    result := true\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpbhb76rdy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpbhb76rdy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpbhb76rdy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3+letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7mesiwi1_test.go:20:14: invalid operation: len(s) - 3 + letter (mismatched
    types int and rune)

    /tmp/tmp7mesiwi1_test.go:20:34: invalid operation: s[len(s) - 3 + letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    \n\
    \    for i := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8_nm3_k_test.go:23:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    \n\
    \    for i := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8_nm3_k_test.go:23:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3:] == last3 {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o2hy0bv_test.go:19:12: letter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[i] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpgcjvola4_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpgcjvola4_test.go:36\
    \ +0x505\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmporuo3zkx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    freqs := make(map[string]int)\n\
    \    for _, letter := range s {\n        freqs[letter]++\n    }\n    \n    for\
    \ i := 0; i < len(s)-3; i++ {\n        if freqs[s[i]] == 1 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmproau1t0m_test.go:19:15: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmproau1t0m_test.go:23:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3-letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8tuntjf_test.go:20:14: invalid operation: len(s) - 3 - letter (mismatched
    types int and rune)

    /tmp/tmpz8tuntjf_test.go:20:34: invalid operation: s[len(s) - 3 - letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        result &= (s[i] != s[i+1])\n    }\n    return\
    \ result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2mpy4gk_test.go:19:9: invalid operation: operator & not defined on result
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    freqs := make(map[string]int)\n\
    \    for _, letter := range s {\n        freqs[letter]++\n    }\n    \n    for\
    \ i := 0; i < len(s); i++ {\n        if freqs[s[i]] == 3 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb3v6g2jy_test.go:19:15: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpb3v6g2jy_test.go:23:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpkdrpi3m6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    \n\
    \    for i := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8_nm3_k_test.go:23:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if strings.Contains(s, letter)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6uja9qz_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, r := range s {\n        letters[r] = true\n    }\n    for i := 0;\
    \ i < len(s); i += 3 {\n        if !letters[s[i]] == true {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyevl9kbp_test.go:21:21: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, r := range s {\n        letters[r] = true\n    }\n    \n    for i\
    \ := 0; i < len(s); i += 3 {\n        if letters[s[i]] == true {\n           \
    \ return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnvte6ai_test.go:23:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpkdrpi3m6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    \n\
    \    for i := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8_nm3_k_test.go:23:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if strings.Contains(s, letter)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6uja9qz_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    \n\
    \    for i := 0; i < len(s); i += 3 {\n        if !letters[s[i]] == true {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwk012l90_test.go:23:21: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3-letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8tuntjf_test.go:20:14: invalid operation: len(s) - 3 - letter (mismatched
    types int and rune)

    /tmp/tmpz8tuntjf_test.go:20:34: invalid operation: s[len(s) - 3 - letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if strings.Contains(s, letter)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6uja9qz_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if strings.Contains(s, letter)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6uja9qz_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    set := make(map[string]bool)\n    for _, letter := range last3 {\n\
    \        set[letter] = true\n    }\n    \n    for _, letter := range s {\n   \
    \     if set[letter] {\n            return false\n        }\n        set[letter]\
    \ = true\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n\
    \  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3sw0ye5__test.go:21:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmp3sw0ye5__test.go:25:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmp3sw0ye5__test.go:28:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    letters := make(map[rune]bool)\n    for _, letter := range last3 {\n\
    \        letters[letter] = true\n    }\n    \n    for _, letter := range s {\n\
    \        if letters[letter] {\n            return false\n        }\n    }\n  \
    \  \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp5bjzex84_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp5bjzex84_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp5bjzex84_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        if s[i] != s[i+1] && s[i+1] != s[i+2] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpsr8ygr4b_test.go:18\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpsr8ygr4b_test.go:36\
    \ +0x5bf\ntesting.tRunner(0xc0001036c0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n\
    \    for _, letter := range s {\n        freqs[letter]++\n    }\n    for i :=\
    \ 0; i < len(s); i++ {\n        if freqs[s[i]] == 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9c0_70j_test.go:18:15: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpl9c0_70j_test.go:21:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[j] || s[j-1] == s[j+1]\
    \ || s[j-1] == s[j+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpws_5rlin_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpws_5rlin_test.go:35\
    \ +0x739\ntesting.tRunner(0xc000103520, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n  \
    \  \n    for _, letter := range s[1:] {\n        if letter == lastLetter {\n \
    \           return false\n        }\n        lastLetter = letter\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7bqu1ut_test.go:20:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmpv7bqu1ut_test.go:23:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s)-3; i++ {\n        if letters[s[i]] == true {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmr_mubgi_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    set := make(map[string]bool)\n    for _, letter := range last3 {\n\
    \        set[letter] = true\n    }\n    \n    for _, letter := range s {\n   \
    \     if _, ok := set[letter]; !ok {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdg2zc8s8_test.go:21:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpdg2zc8s8_test.go:25:25: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpvpyzkmft_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01riclmf_test.go:21:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp704tl2hn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n  \
    \  \n    for _, letter := range s[1:] {\n        if letter == lastLetter {\n \
    \           return false\n        }\n        lastLetter = letter\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7bqu1ut_test.go:20:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmpv7bqu1ut_test.go:23:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j] != s[j+1] || s[j] != s[j+2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmp8_byody__test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmp8_byody__test.go:35\
    \ +0x633\ntesting.tRunner(0xc0000da340, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpkdrpi3m6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        letter := s[i]\n        for j := i + 1; j < len(s); j += 3\
    \ {\n            if s[i] == s[j] {\n                continue\n            }\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpacsfs9x4_test.go:18:9: letter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s); i += 3 {\n        if letters[s[i]] == true {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi3fu34nq_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        result &= (s[i] != s[i+1])\n    }\n\
    \    \n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj7coua36_test.go:20:9: invalid operation: operator & not defined on result
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpkdrpi3m6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    result := true\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp7t_n0uwx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp7t_n0uwx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp7t_n0uwx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp704tl2hn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n\
    \    for _, v := range s {\n        freqs[v]++\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if freqs[s[i]] == 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3slzgyva_test.go:18:15: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmp3slzgyva_test.go:21:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3-letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8tuntjf_test.go:20:14: invalid operation: len(s) - 3 - letter (mismatched
    types int and rune)

    /tmp/tmpz8tuntjf_test.go:20:34: invalid operation: s[len(s) - 3 - letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3-letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8tuntjf_test.go:20:14: invalid operation: len(s) - 3 - letter (mismatched
    types int and rune)

    /tmp/tmpz8tuntjf_test.go:20:34: invalid operation: s[len(s) - 3 - letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[len(s)-1]\n\
    \    \n    for i := 0; i < len(s)-3; i++ {\n        if s[i] != s[i+1] {\n    \
    \        return false\n        }\n    }\n    \n    return lastLetter == s[len(s)-2]\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp6mtuqi6j_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmp6mtuqi6j_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__4\
    \ (0.00s)\n        tmp6mtuqi6j_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp6mtuqi6j_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp6mtuqi6j_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        if s[i] != s[i+1] && s[i+1] != s[i+2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpi204zlqs_test.go:18\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpi204zlqs_test.go:35\
    \ +0x5bf\ntesting.tRunner(0xc0000da1a0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    freqs := make(map[string]int)\n\
    \    for _, letter := range s {\n        freqs[letter]++\n    }\n    \n    for\
    \ i := 0; i < len(s); i++ {\n        if freqs[s[i]] == 3 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb3v6g2jy_test.go:19:15: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpb3v6g2jy_test.go:23:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmporuo3zkx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n\
    \    for _, c := range s {\n        freqs[c]++\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if freqs[s[i]] == 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpopvbkniz_test.go:18:15: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpopvbkniz_test.go:21:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if strings.Contains(s, letter)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6uja9qz_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] != s[lastIndex] {\n\
    \            return false\n        }\n        lastIndex--\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpleburero_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpleburero_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpleburero_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    result := true\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpbhb76rdy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpbhb76rdy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpbhb76rdy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[len(s)-1]\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] != lastLetter {\n  \
    \          return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp48w4ulnw_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp48w4ulnw_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp48w4ulnw_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmporuo3zkx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        if s[i] != s[i+1] && s[i] != s[i+2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpnz33vpvi_test.go:18\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpnz33vpvi_test.go:35\
    \ +0x5bf\ntesting.tRunner(0xc000103380, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        result &= (s[i] != s[i+1])\n    }\n    return\
    \ result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2mpy4gk_test.go:19:9: invalid operation: operator & not defined on result
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s)-3; i++ {\n        if letters[s[i]] == true {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmr_mubgi_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmporuo3zkx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[j] { // if the letters\
    \ are the same\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmp0ct4q60x_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmp0ct4q60x_test.go:35\
    \ +0x532\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3:] == last3 {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o2hy0bv_test.go:19:12: letter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp704tl2hn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3-letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8tuntjf_test.go:20:14: invalid operation: len(s) - 3 - letter (mismatched
    types int and rune)

    /tmp/tmpz8tuntjf_test.go:20:34: invalid operation: s[len(s) - 3 - letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        \n        if s[j-1] == s[j] &&\n     \
    \       s[j+1] == s[j] &&\n            s[j+2] == s[j] {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmphuxa4otm_test.go:20\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmphuxa4otm_test.go:39\
    \ +0x745\ntesting.tRunner(0xc0001036c0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s)-3; i++ {\n        if letters[s[i]] == true {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmr_mubgi_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j] != s[j+1] || s[j] != s[j+2] {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpamdie6jv_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpamdie6jv_test.go:36\
    \ +0x633\ntesting.tRunner(0xc0000da340, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    freqs := make(map[string]int)\n\
    \    for _, letter := range s {\n        freqs[letter]++\n    }\n    \n    for\
    \ i := 0; i < len(s); i++ {\n        if freqs[s[i]] == 3 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb3v6g2jy_test.go:19:15: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpb3v6g2jy_test.go:23:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        if s[i] != s[i+1] && s[i+1] != s[i+2] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpsr8ygr4b_test.go:18\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpsr8ygr4b_test.go:36\
    \ +0x5bf\ntesting.tRunner(0xc0001036c0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[j] { // check that the\
    \ letters are distinct\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa8a0bo13_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa8a0bo13_test.go:35\
    \ +0x532\ntesting.tRunner(0xc0000da340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n  \
    \  \n    for _, letter := range s[1:] {\n        if letter == lastLetter {\n \
    \           return false\n        }\n        lastLetter = letter\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7bqu1ut_test.go:20:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmpv7bqu1ut_test.go:23:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if j > len(s) {\n            break\n \
    \       }\n        if s[i] != s[j] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpukubzxkf_test.go:22\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpukubzxkf_test.go:40\
    \ +0x4df\ntesting.tRunner(0xc0000cc4e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    \n\
    \    for i := 0; i < len(s); i += 3 {\n        if letters[s[i]] == true {\n  \
    \          return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp857wc3es_test.go:23:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmporuo3zkx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    chars := make(map[rune]bool)\n\
    \    for _, char := range s {\n        chars[char] = true\n    }\n    \n    for\
    \ i := 0; i < len(s); i += 3 {\n        if chars[s[i]] == true {\n           \
    \ return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9xjrrey_test.go:23:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if strings.Contains(s, letter)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6uja9qz_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == s[i+1] && s[i+1] == s[i+2]\
    \ {\n            continue\n        }\n        \n        result = false\n     \
    \   break\n    }\n    \n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp8d3sqo_8_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp8d3sqo_8_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp8d3sqo_8_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmp6hv1eq1p_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmp6hv1eq1p_test.go:35\
    \ +0x505\ntesting.tRunner(0xc0000cc4e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    letters := make(map[rune]bool)\n    for _, letter := range last3 {\n\
    \        letters[letter] = true\n    }\n    \n    for _, letter := range s {\n\
    \        if letters[letter] {\n            return false\n        }\n    }\n  \
    \  \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp5bjzex84_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp5bjzex84_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp5bjzex84_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    result := true\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp7t_n0uwx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp7t_n0uwx_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp7t_n0uwx_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmporuo3zkx_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmporuo3zkx_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01riclmf_test.go:21:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, letter := range s {\n        letters[letter] = true\n    }\n    for\
    \ i := 0; i < len(s)-3; i++ {\n        if letters[s[i]] == true {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmr_mubgi_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, r := range s {\n        letters[r] = true\n    }\n    for i := 0;\
    \ i < len(s); i += 3 {\n        if letters[s[i]] == true {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4z63ove_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        letter := s[i]\n        for j := i + 1; j < i+3; j++ {\n \
    \           if s[j] == letter {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpn9ip20_p_test.go:20\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpn9ip20_p_test.go:37\
    \ +0x557\ntesting.tRunner(0xc000103380, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    set := make(map[string]bool)\n    for _, char := range last3 {\n  \
    \      set[char] = true\n    }\n    \n    for _, char := range s {\n        if\
    \ set[char] {\n            return false\n        }\n        set[char] = true\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjfstmtu__test.go:21:13: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpjfstmtu__test.go:25:16: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpjfstmtu__test.go:28:13: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, r := range s {\n        letters[r] = true\n    }\n    for i := 0;\
    \ i < len(s)-3; i++ {\n        if letters[s[i]] == true {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt1wy0_i_test.go:21:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n\
    \    for _, r := range s {\n        letters[r] = true\n    }\n    for i := 0;\
    \ i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3238ad2c_test.go:21:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpi4qinwka_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpi4qinwka_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if s[len(s)-3-letter] == letter\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8tuntjf_test.go:20:14: invalid operation: len(s) - 3 - letter (mismatched
    types int and rune)

    /tmp/tmpz8tuntjf_test.go:20:34: invalid operation: s[len(s) - 3 - letter] == letter
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    chars := make(map[rune]bool)\n\
    \    for _, r := range s {\n        chars[r] = true\n    }\n    \n    for i :=\
    \ 0; i < len(s); i += 3 {\n        if chars[s[i]] == true {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9rg00jr0_test.go:23:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdltchm8_test.go:20:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    distinctLetters := make(map[rune]bool)\n    for _, letter := range\
    \ last3 {\n        distinctLetters[letter] = true\n    }\n    \n    return len(distinctLetters)\
    \ >= 3\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmprkovguyr_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmprkovguyr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075282
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n\
    \    for _, c := range s {\n        freqs[c]++\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if freqs[s[i]] == 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpopvbkniz_test.go:18:15: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpopvbkniz_test.go:21:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp704tl2hn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp704tl2hn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n      \
    \      return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl40uj3db_test.go:17:5: lastIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpqpyzdmiu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpqpyzdmiu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    seen := make(map[string]bool)\n    for _, letter := range last3 {\n\
    \        if seen[letter] {\n            return false\n        }\n        seen[letter]\
    \ = true\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n\
    \  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qgfb5vs_test.go:21:17: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmp9qgfb5vs_test.go:24:14: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i += 3 {\n        j := i + 3\n        if s[j-1] == s[j] { // if s[j-1] == s[j],\
    \ s[j-1] will always be true\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpc34ybuqs_test.go:19\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpc34ybuqs_test.go:35\
    \ +0x532\ntesting.tRunner(0xc0000da340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    result := true\n    \n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpkdrpi3m6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpkdrpi3m6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075280
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\nfunc is_happy(s string) bool {\n    if\
    \ len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[0] {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p7ttyek_test.go:20:22: invalid operation: letter == last3[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075280
