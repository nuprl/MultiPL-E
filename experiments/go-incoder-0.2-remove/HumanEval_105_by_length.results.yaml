language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"\
    One\"\n        if result[i] == \"???\" {\n            continue\n        }\n  \
    \      for j := 0; j < len(result); j++ {\n            if result[j] == \"???\"\
    \ {\n                continue\n            }\n            if result[j] == result[i]\
    \ {\n                result[j] = fmt.Sprintf(\"%v\", j)\n            }\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmcq6bi8q_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[0 1 2 3 4 5 6 7]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpmcq6bi8q_test.go:57: expected '[One]', got '[0 1 2]'\n \
    \   --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpmcq6bi8q_test.go:57:\
    \ expected '[Three Two One]', got '[0 1 2 3]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpmcq6bi8q_test.go:57: expected '[Nine Eight Four]', got '[0\
    \ 1 2]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, by_length_test.One[num-1])\n    }\n    for i := len(result)\
    \ - 1; i >= 0; i-- {\n        result[i] = by_length_test.Two[result[i]]\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Three[result[i]]\n    }\n    for\
    \ _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Four[result[i]]\n    }\n    for\
    \ _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Five[result[i]]\n    }\n    for\
    \ _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Six[result[i]]\n    }\n    for\
    \ _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Seven[result[i]]\n    }\n    for\
    \ _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Eight[result[i]]\n    }\n    for\
    \ _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result[i] = by_length_test.Nine[result[i]]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xqqt6g7_test.go:20:34: undefined: by_length_test

    /tmp/tmp4xqqt6g7_test.go:23:21: undefined: by_length_test

    /tmp/tmp4xqqt6g7_test.go:29:21: undefined: by_length_test

    /tmp/tmp4xqqt6g7_test.go:29:49: undefined: i

    /tmp/tmp4xqqt6g7_test.go:35:21: undefined: by_length_test

    /tmp/tmp4xqqt6g7_test.go:35:48: undefined: i

    /tmp/tmp4xqqt6g7_test.go:41:21: undefined: by_length_test

    /tmp/tmp4xqqt6g7_test.go:41:48: undefined: i

    /tmp/tmp4xqqt6g7_test.go:47:21: undefined: by_length_test

    /tmp/tmp4xqqt6g7_test.go:47:47: undefined: i

    /tmp/tmp4xqqt6g7_test.go:47:47: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = reverse(result[i])\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = replace(result[i],\
    \ \"One\", \"1\")\n        result[i] = replace(result[i], \"Two\", \"2\")\n  \
    \      result[i] = replace(result[i], \"Three\", \"3\")\n        result[i] = replace(result[i],\
    \ \"Four\", \"4\")\n        result[i] = replace(result[i], \"Five\", \"5\")\n\
    \        result[i] = replace(result[i], \"Six\", \"6\")\n        result[i] = replace(result[i],\
    \ \"Seven\", \"7\")\n        result[i] = replace(result[i], \"Eight\", \"8\")\n\
    \        result[i] = replace(result[i], \"Nine\", \"9\")\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzowtqdwc_test.go:24:21: undefined: reverse

    /tmp/tmpzowtqdwc_test.go:27:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:28:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:29:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:30:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:31:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:32:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:33:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:34:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:35:21: undefined: replace

    /tmp/tmpzowtqdwc_test.go:35:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    sort.Ints(arr[:9])\n    sort.Ints(arr[9:])\n\n    arr[9]\
    \ = arr[9] - 1\n    arr[9] = arr[9] * 10 + arr[9] - 1\n\n    arr[9] = by_length_test.One\n\
    \    arr[10] = by_length_test.Two\n    arr[11] = by_length_test.Three\n    arr[12]\
    \ = by_length_test.Four\n    arr[13] = by_length_test.Five\n    arr[14] = by_length_test.Six\n\
    \    arr[15] = by_length_test.Seven\n    arr[16] = by_length_test.Eight\n    arr[17]\
    \ = by_length_test.Nine\n\n    arr[9] = by_length_test.One\n    arr[10] = by_length_test.Two\n\
    \    arr[11] = by_length_test.Three\n    arr[12] = by_length_test.Four\n    arr[13]\
    \ = by_length_test.Five\n    arr[14] = by_length_test.Six\n    arr[15] = by_length_test.Seven\n\
    \    arr[16] = by_length_test.Eight\n    arr[17] = by_length_test.Nine\n\n   \
    \ return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrfy7bxc_test.go:19:5: undefined: sort

    /tmp/tmpdrfy7bxc_test.go:20:5: undefined: sort

    /tmp/tmpdrfy7bxc_test.go:21:5: undefined: sort

    /tmp/tmpdrfy7bxc_test.go:26:14: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:27:15: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:28:15: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:29:15: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:30:15: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:31:15: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:32:15: undefined: by_length_test

    /tmp/tmpdrfy7bxc_test.go:32:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n    for _,\
    \ v := range arr {\n        result = append(result, name[v])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlkevp70_test.go:19:5: undefined: sort

    /tmp/tmpdlkevp70_test.go:20:9: no new variables on left side of :=

    /tmp/tmpdlkevp70_test.go:20:12: undefined: reverse

    /tmp/tmpdlkevp70_test.go:22:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihnnhlpe_test.go:90:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf8p8iybx_test.go:91:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] > 9 {\n            result[i] = fmt.Sprintf(\"%v\",\
    \ arr[i])\n        } else {\n            result[i] = by_length_test.One[arr[i]-1]\n\
    \        }\n    }\n    for i := range result {\n        result[i] = by_length_test.Two[result[i]-1]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekycw4ut_test.go:20:25: undefined: by_length_test

    /tmp/tmpekycw4ut_test.go:24:21: undefined: by_length_test

    /tmp/tmpekycw4ut_test.go:24:40: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[:num])\n        result := append(result,\
    \ result[:num][num-1:])\n    }\n    for _, num := range result {\n        if num\
    \ == \"One\" {\n            result[0] = \"Zero\"\n        }\n        if num ==\
    \ \"Two\" {\n            result[1] = \"One\"\n        }\n        if num == \"\
    Three\" {\n            result[2] = \"Two\"\n        }\n        if num == \"Four\"\
    \ {\n            result[3] = \"Three\"\n        }\n        if num == \"Five\"\
    \ {\n            result[4] = \"Four\"\n        }\n        if num == \"Six\" {\n\
    \            result[5] = \"Five\"\n        }\n        if num == \"Seven\" {\n\
    \            result[6] = \"Six\"\n        }\n        if num == \"Eight\" {\n \
    \           result[7] = \"Seven\"\n        }\n        if num == \"Nine\" {\n \
    \           result[8] = \"Eight\"\n        }\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjt6ij1cg_test.go:24:16: no new variables on left side of :=

    /tmp/tmpjt6ij1cg_test.go:24:40: cannot use result[:num] (value of type []string)
    as type string in argument to append

    /tmp/tmpjt6ij1cg_test.go:25:16: no new variables on left side of :=

    /tmp/tmpjt6ij1cg_test.go:25:46: cannot use result[:num][num - 1:] (value of type
    []string) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", num))\n        }\n    }\n    for _, num := range result {\n        if num\
    \ == \"0\" {\n            result = append(result, \"One\")\n        }\n      \
    \  if num == \"1\" {\n            result = append(result, \"Two\")\n        }\n\
    \        if num == \"2\" {\n            result = append(result, \"Three\")\n \
    \       }\n        if num == \"3\" {\n            result = append(result, \"Four\"\
    )\n        }\n        if num == \"4\" {\n            result = append(result, \"\
    Five\")\n        }\n        if num == \"5\" {\n            result = append(result,\
    \ \"Six\")\n        }\n        if num == \"6\" {\n            result = append(result,\
    \ \"Seven\")\n        }\n        if num == \"7\" {\n            result = append(result,\
    \ \"Eight\")\n        }\n        if num == \"8\" {\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9pnefhl3_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3 Three Two Two Five Six Nine Three Four]'\n\
    \    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp9pnefhl3_test.go:70:\
    \ expected '[One]', got '[1 Two]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmp9pnefhl3_test.go:70: expected '[Three Two One]', got '[1 3 2 Two Four\
    \ Three]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp9pnefhl3_test.go:70:\
    \ expected '[Nine Eight Four]', got '[9 4 8 Five Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)-1]\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr,\
    \ \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"\
    Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n    arr := append(arr,\
    \ \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"\
    , \"Ninety\")\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Ten\"\
    , \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    , \"Seventeen\", \"Eighteen\", \"Nineteen\")\n    arr := append(arr, \"Twenty\"\
    , \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    )\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\")\n    arr := append(arr, \"Twenty\", \"Thirty\",\
    \ \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Ten\", \"Eleven\", \"\
    Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\")\n    arr := append(arr, \"Twenty\", \"Thirty\",\
    \ \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Ten\", \"Eleven\", \"\
    Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nine\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaht44pft_test.go:32:122: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"?\")\n    \
    \    }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"\
    One\"\n        if result[i] == \"?\" {\n            continue\n        }\n    \
    \    if result[i] == \"Five\" {\n            result[i] = \"Five\"\n        }\n\
    \        if result[i] == \"Nine\" {\n            result[i] = \"Nine\"\n      \
    \  }\n        if result[i] == \"Eight\" {\n            result[i] = \"Eight\"\n\
    \        }\n        if result[i] == \"Seven\" {\n            result[i] = \"Seven\"\
    \n        }\n        if result[i] == \"Six\" {\n            result[i] = \"Six\"\
    \n        }\n        if result[i] == \"Four\" {\n            result[i] = \"Four\"\
    \n        }\n        if result[i] == \"Three\" {\n            result[i] = \"Three\"\
    \n        }\n        if result[i] == \"Two\" {\n            result[i] = \"Two\"\
    \n        }\n        if result[i] == \"One\" {\n            result[i] = \"One\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp67892al9_test.go:76: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp67892al9_test.go:76: expected '[One]', got '[One One One]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp67892al9_test.go:76:\
    \ expected '[Three Two One]', got '[One One One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp67892al9_test.go:76: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] =\
    \ by_length_test.Reverse[result[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78tkuf32_test.go:18:37: undefined: by_length_test

    /tmp/tmp78tkuf32_test.go:20:37: undefined: by_length_test

    /tmp/tmp78tkuf32_test.go:24:21: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n    \
    \    if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsn0omtfk_test.go:25:5: undefined: sort

    /tmp/tmpsn0omtfk_test.go:26:12: undefined: reverse

    /tmp/tmpsn0omtfk_test.go:27:12: undefined: replaceDigits

    /tmp/tmpsn0omtfk_test.go:28:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        } else {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v%10))\n        }\n    }\n    for _, v := range result {\n        if v ==\
    \ \"0\" || v == \"1\" || v == \"2\" || v == \"3\" || v == \"4\" || v == \"5\"\
    \ || v == \"6\" || v == \"7\" || v == \"8\" || v == \"9\" {\n            continue\n\
    \        }\n        result = append(result, \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[v]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95w2uak4_test.go:27:18: cannot use append(result, "One", "Two", "Three",
    "Four", "Five", "Six", "Seven", "Eight", "Nine")[v] (variable of type string)
    as type []string in assignment

    /tmp/tmp95w2uak4_test.go:27:105: invalid argument: index v (variable of type string)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, by_length_test.One[num-1])\n    }\n    for i := len(result)\
    \ - 1; i >= 0; i-- {\n        result[i] = by_length_test.Two[result[i]]\n    }\n\
    \    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Three[result[i]]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Four[result[i]]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Five[result[i]]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Six[result[i]]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Seven[result[i]]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Eight[result[i]]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = by_length_test.Nine[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpufeuakr__test.go:20:9: result declared but not used

    /tmp/tmpufeuakr__test.go:20:34: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:23:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:26:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:29:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:32:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:35:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:38:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:41:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:44:21: undefined: by_length_test

    /tmp/tmpufeuakr__test.go:20:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, by_length_test.One[i])\n\
    \        }\n    }\n    for _, i := range arr {\n        if i >= 10 && i <= 99\
    \ {\n            result = append(result, by_length_test.Two[i])\n        }\n \
    \   }\n    for _, i := range arr {\n        if i >= 100 && i <= 999 {\n      \
    \      result = append(result, by_length_test.Three[i])\n        }\n    }\n  \
    \  for _, i := range arr {\n        if i >= 1000 && i <= 9999 {\n            result\
    \ = append(result, by_length_test.Four[i])\n        }\n    }\n    for _, i :=\
    \ range arr {\n        if i >= 10000 && i <= 99999 {\n            result = append(result,\
    \ by_length_test.Five[i])\n        }\n    }\n    for _, i := range arr {\n   \
    \     if i >= 100000 && i <= 999999 {\n            result = append(result, by_length_test.Six[i])\n\
    \        }\n    }\n    for _, i := range arr {\n        if i >= 1000000 && i <=\
    \ 9999999 {\n            result = append(result, by_length_test.Seven[i])\n  \
    \      }\n    }\n    for _, i := range arr {\n        if i >= 10000000 && i <=\
    \ 99999999 {\n            result = append(result, by_length_test.Eight[i])\n \
    \       }\n    }\n    for _, i := range arr {\n        if i >= 100000000 && i\
    \ <= 999999999 {\n            result = append(result, by_length_test.Nine[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp0q7vks_test.go:18:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:23:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:28:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:33:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:38:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:43:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:48:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:53:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:58:37: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    max := 9\n    for _, v := range arr {\n        if\
    \ v < 1 || v > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", v))\n        max -= 1\n    }\n    for _, v := range result\
    \ {\n        if v == \"9\" {\n            continue\n        }\n        result\
    \ := append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\")[v-1]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5gklhlt_test.go:24:9: result declared but not used

    /tmp/tmpn5gklhlt_test.go:31:9: result declared but not used

    /tmp/tmpn5gklhlt_test.go:31:106: invalid operation: v - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] > 9 {\n            continue\n        }\n        digitStr\
    \ := fmt.Sprintf(\"%d\", arr[i])\n        digitStr := strings.Replace(digitStr,\
    \ \"0\", \"One\", -1)\n        digitStr := strings.Replace(digitStr, \"1\", \"\
    Two\", -1)\n        digitStr := strings.Replace(digitStr, \"2\", \"Three\", -1)\n\
    \        digitStr := strings.Replace(digitStr, \"3\", \"Four\", -1)\n        digitStr\
    \ := strings.Replace(digitStr, \"4\", \"Five\", -1)\n        digitStr := strings.Replace(digitStr,\
    \ \"5\", \"Six\", -1)\n        digitStr := strings.Replace(digitStr, \"6\", \"\
    Seven\", -1)\n        digitStr := strings.Replace(digitStr, \"7\", \"Eight\",\
    \ -1)\n        digitStr := strings.Replace(digitStr, \"8\", \"Nine\", -1)\n  \
    \      digitStr := strings.Replace(digitStr, \"9\", \"Ten\", -1)\n        result[i]\
    \ = digitStr\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_drbeprc_test.go:21:18: no new variables on left side of :=

    /tmp/tmp_drbeprc_test.go:21:21: undefined: strings

    /tmp/tmp_drbeprc_test.go:22:18: no new variables on left side of :=

    /tmp/tmp_drbeprc_test.go:22:21: undefined: strings

    /tmp/tmp_drbeprc_test.go:23:18: no new variables on left side of :=

    /tmp/tmp_drbeprc_test.go:23:21: undefined: strings

    /tmp/tmp_drbeprc_test.go:24:18: no new variables on left side of :=

    /tmp/tmp_drbeprc_test.go:24:21: undefined: strings

    /tmp/tmp_drbeprc_test.go:25:18: no new variables on left side of :=

    /tmp/tmp_drbeprc_test.go:25:21: undefined: strings

    /tmp/tmp_drbeprc_test.go:25:18: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 99 {\n            arr2[i] = \"Two\"\
    \n        } else if arr[i] >= 100 && arr[i] <= 999 {\n            arr2[i] = \"\
    Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n            arr2[i]\
    \ = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999 {\n       \
    \     arr2[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i] <= 999999\
    \ {\n            arr2[i] = \"Six\"\n        } else if arr[i] >= 1000000 && arr[i]\
    \ <= 999999999 {\n            arr2[i] = \"Seven\"\n        } else if arr[i] >=\
    \ 10000000 && arr[i] <= 999999999999 {\n            arr2[i] = \"Eight\"\n    \
    \    } else if arr[i] >= 1000000000 && arr[i] <= 999999999999999 {\n         \
    \   arr2[i] = \"Nine\"\n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpau8boeq8_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpau8boeq8_test.go:57: expected '[One]', got '[One  Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpau8boeq8_test.go:57:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpau8boeq8_test.go:57: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"?\")\n    \
    \    }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        result[i]\
    \ = \"One\"\n        if i == 0 {\n            result[i] = \"Zero\"\n        }\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfo7eftuj_test.go:49: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Zero One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpfo7eftuj_test.go:49: expected '[One]', got '[Zero One One]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpfo7eftuj_test.go:49:\
    \ expected '[Three Two One]', got '[Zero One One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfo7eftuj_test.go:49: expected '[Nine Eight Four]', got '[Zero\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     arr2[i] = arr[i]\n    }\n\n    sort.Ints(arr2)\n\n    arr3 := make([]string,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr3[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbykqirdj_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num >= 1 &&\
    \ num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 10 && num\
    \ <= 99 {\n            result = append(result, by_length_test.Ten[num-10])\n \
    \       } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 100 && num\
    \ <= 999 {\n            result = append(result, by_length_test.Hundred[num-100])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 1000 && num\
    \ <= 9999 {\n            result = append(result, by_length_test.Thousand[num-1000])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 10000 && num\
    \ <= 99999 {\n            result = append(result, by_length_test.Million[num-10000])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 100000 &&\
    \ num <= 999999 {\n            result = append(result, by_length_test.Billion[num-100000])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 1000000 &&\
    \ num <= 999999999 {\n            result = append(result, by_length_test.Trillion[num-1000000])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 10000000 &&\
    \ num <= 99999999999 {\n            result = append(result, by_length_test.Quadrillion[num-10000000])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 1000000000\
    \ && num <= 999999999999 {\n            result = append(result, by_length_test.Quintillion[num-1000000000])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 1000000000000\
    \ && num <= 999999999999999 {\n            result = append(result, by_length_test.S\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdlq2z68k_test.go:84:53: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n \
    \   for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n \
    \           continue\n        }\n        result := []string{\n            fmt.Sprintf(\"\
    %s\", arr[i]),\n            fmt.Sprintf(\"%s\", arr[len(arr)-1]),\n        }\n\
    \        arr = append(arr[:len(arr)-1], arr[len(arr)-2:len(arr)])\n        arr\
    \ = append(arr, result...)\n    }\n    for i := 0; i < len(arr); i++ {\n     \
    \   arr[i] = map[int]string{\n            1: \"One\",\n            2: \"Two\"\
    ,\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\"\
    ,\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\"\
    ,\n            9: \"Nine\",\n        }[arr[i]]\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbmrri55n_test.go:19:5:\
    \ undefined: sort\n/tmp/tmpbmrri55n_test.go:20:5: undefined: sort\n/tmp/tmpbmrri55n_test.go:29:43:\
    \ cannot use arr[len(arr) - 2:len(arr)] (value of type []int) as type int in argument\
    \ to append\n/tmp/tmpbmrri55n_test.go:30:27: cannot use result (variable of type\
    \ []string) as type []int in argument to append\n/tmp/tmpbmrri55n_test.go:33:18:\
    \ cannot use map[int]string{\u2026}[arr[i]] (map index expression of type string)\
    \ as type int in assignment\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075383
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    One\" {\n            result[0] = \"1\"\n        } else if v == \"Two\" {\n   \
    \         result[1] = \"2\"\n        } else if v == \"Three\" {\n            result[2]\
    \ = \"3\"\n        } else if v == \"Four\" {\n            result[3] = \"4\"\n\
    \        } else if v == \"Five\" {\n            result[4] = \"5\"\n        } else\
    \ if v == \"Six\" {\n            result[5] = \"6\"\n        } else if v == \"\
    Seven\" {\n            result[6] = \"7\"\n        } else if v == \"Eight\" {\n\
    \            result[7] = \"8\"\n        } else if v == \"Nine\" {\n          \
    \  result[8] = \"9\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4fm72_cw_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp4fm72_cw_test.go:64: expected '[One]', got '[1 -1 55]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp4fm72_cw_test.go:64:\
    \ expected '[Three Two One]', got '[1 -1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp4fm72_cw_test.go:64: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%v\", v))\n    }\n    for _, v := range result\
    \ {\n        if v == \"0\" || v == \"1\" || v == \"2\" || v == \"3\" || v == \"\
    4\" || v == \"5\" || v == \"6\" || v == \"7\" || v == \"8\" || v == \"9\" {\n\
    \            continue\n        }\n        result = append(result, \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dtbtwhr_test.go:26:18: cannot use append(result, "One", "Two", "Three",
    "Four", "Five", "Six", "Seven", "Eight", "Nine")[v] (variable of type string)
    as type []string in assignment

    /tmp/tmp7dtbtwhr_test.go:26:105: invalid argument: index v (variable of type string)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075383
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        digit,\
    \ ok := reverse[num]\n        if !ok {\n            continue\n        }\n    \
    \    result = append(result, digit)\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphltmneug_test.go:20:22: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr3[i] = arr[i]\n \
    \   }\n    sort.Ints(arr3)\n    for i := 0; i < len(arr); i++ {\n        if arr3[i]\
    \ < 10 {\n            arr2[i] = \"One\"\n        } else if arr3[i] < 20 {\n  \
    \          arr2[i] = \"Two\"\n        } else if arr3[i] < 30 {\n            arr2[i]\
    \ = \"Three\"\n        } else if arr3[i] < 40 {\n            arr2[i] = \"Four\"\
    \n        } else if arr3[i] < 50 {\n            arr2[i] = \"Five\"\n        }\
    \ else if arr3[i] < 60 {\n            arr2[i] = \"Six\"\n        } else if arr3[i]\
    \ < 70 {\n            arr2[i] = \"Seven\"\n        } else if arr3[i] < 80 {\n\
    \            arr2[i] = \"Eight\"\n        } else if arr3[i] < 90 {\n         \
    \   arr2[i] = \"Nine\"\n        } else {\n            arr2[i] = \"Ten\"\n    \
    \    }\n    }\n    for i := 0; i < len(arr); i++ {\n        arr2[i] = arr2[i][1:]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_urqfmw_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        digitStr := fmt.Sprintf(\"%d\"\
    , num)\n        result := append(result, by_length_test.map[digitStr]...)\n  \
    \  }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n       \
    \     continue\n        }\n        digitStr := fmt.Sprintf(\"%d\", num)\n    \
    \    result := append(result, by_length_test.map[digitStr]...)\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8un6x59b_test.go:24:49: expected selector or type assertion, found ''map''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075383
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        digitStr := fmt.Sprintf(\"%v\", arr[i])\n        digitStr := digitStr[0:len(digitStr)-1]\n\
    \        result[i] = by_length_test.One[digitStr]\n    }\n    for i := range result\
    \ {\n        result[i] = by_length_test.Two[result[i]]\n    }\n    for i := range\
    \ result {\n        result[i] = by_length_test.Three[result[i]]\n    }\n    for\
    \ i := range result {\n        result[i] = by_length_test.Four[result[i]]\n  \
    \  }\n    for i := range result {\n        result[i] = by_length_test.Five[result[i]]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Six[result[i]]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Seven[result[i]]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Eight[result[i]]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Nine[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqeio79vn_test.go:21:18: no new variables on left side of :=

    /tmp/tmpqeio79vn_test.go:22:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:25:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:28:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:31:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:34:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:37:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:40:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:43:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:46:21: undefined: by_length_test

    /tmp/tmpqeio79vn_test.go:46:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replace(arr)\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9_hje9w_test.go:18:5: undefined: sort

    /tmp/tmpb9_hje9w_test.go:19:9: no new variables on left side of :=

    /tmp/tmpb9_hje9w_test.go:19:12: undefined: reverse

    /tmp/tmpb9_hje9w_test.go:20:9: no new variables on left side of :=

    /tmp/tmpb9_hje9w_test.go:20:12: undefined: replace

    /tmp/tmpb9_hje9w_test.go:21:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // Sort the array in descending order\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \n    // Reverse the sorted array\n    for i := 0; i < len(arr); i++ {\n     \
    \   arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    }\n\n    // Replace\
    \ each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr[0] = One\n    arr[1]\
    \ = Two\n    arr[2] = Three\n    arr[3] = Four\n    arr[4] = Five\n    arr[5]\
    \ = Six\n    arr[6] = Seven\n    arr[7] = Eight\n    arr[8] = Nine\n\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqfq9al04_test.go:20:5: undefined: sort

    /tmp/tmpqfq9al04_test.go:28:14: undefined: One

    /tmp/tmpqfq9al04_test.go:29:14: undefined: Two

    /tmp/tmpqfq9al04_test.go:30:14: undefined: Three

    /tmp/tmpqfq9al04_test.go:31:14: undefined: Four

    /tmp/tmpqfq9al04_test.go:32:14: undefined: Five

    /tmp/tmpqfq9al04_test.go:33:14: undefined: Six

    /tmp/tmpqfq9al04_test.go:34:14: undefined: Seven

    /tmp/tmpqfq9al04_test.go:35:14: undefined: Eight

    /tmp/tmpqfq9al04_test.go:36:14: undefined: Nine

    /tmp/tmpqfq9al04_test.go:36:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := arr[:len(arr)/10]\n    arr := append(arr,\
    \ arr[len(arr)/10]...)\n    arr := append([]string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgtz1qqx9_test.go:18:5:\
    \ undefined: sort\n/tmp/tmpgtz1qqx9_test.go:19:9: no new variables on left side\
    \ of :=\n/tmp/tmpgtz1qqx9_test.go:19:12: undefined: reverse\n/tmp/tmpgtz1qqx9_test.go:20:9:\
    \ no new variables on left side of :=\n/tmp/tmpgtz1qqx9_test.go:21:9: no new variables\
    \ on left side of :=\n/tmp/tmpgtz1qqx9_test.go:21:24: cannot use arr[len(arr)\
    \ / 10] (variable of type int) as type []int in argument to append\n/tmp/tmpgtz1qqx9_test.go:22:9:\
    \ no new variables on left side of :=\n/tmp/tmpgtz1qqx9_test.go:22:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmpgtz1qqx9_test.go:22:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmpgtz1qqx9_test.go:23:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n\
    /tmp/tmpgtz1qqx9_test.go:23:12: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    max := 9\n    for _, v := range arr {\n        if\
    \ v < 1 || v > max {\n            continue\n        }\n        digit, ok := reverseDigitMap[v]\n\
    \        if !ok {\n            continue\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%v\", digit))\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplf23ydn3_test.go:24:22: undefined: reverseDigitMap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    for _, v := range arr {\n    \
    \    if v < 1 || v > 9 {\n            continue\n        }\n        result = append(result,\
    \ by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7zszsr0k_test.go:19:5: undefined: sort

    /tmp/tmp7zszsr0k_test.go:24:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:25:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:26:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:27:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:28:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:29:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:30:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:31:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:32:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:32:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var i int\n    for i = 0; i\
    \ < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr[i]\
    \ = arr[i] + 10\n        }\n    }\n    for i = 0; i < len(arr); i++ {\n      \
    \  result = append(result, fmt.Sprintf(\"%v\", arr[i]))\n    }\n    for i = 0;\
    \ i < len(arr); i++ {\n        arr[i] = arr[i]/10\n    }\n    for i = 0; i < len(arr);\
    \ i++ {\n        result = append(result, fmt.Sprintf(\"%v\", arr[i]))\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpbxpda8qu_test.go:51: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[12 11 11 14 15 18 12 13 1 1 1 1 1 1 1 1]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpbxpda8qu_test.go:51: expected\
    \ '[One]', got '[11 -1 55 1 0 5]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpbxpda8qu_test.go:51: expected '[Three Two One]', got '[11 -1 13 12\
    \ 1 0 1 1]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpbxpda8qu_test.go:51:\
    \ expected '[Nine Eight Four]', got '[19 14 18 1 1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqvg0qp0_test.go:19:5: undefined: sort

    /tmp/tmpwqvg0qp0_test.go:20:9: no new variables on left side of :=

    /tmp/tmpwqvg0qp0_test.go:20:12: undefined: reverse

    /tmp/tmpwqvg0qp0_test.go:21:9: no new variables on left side of :=

    /tmp/tmpwqvg0qp0_test.go:21:12: undefined: replaceDigits

    /tmp/tmpwqvg0qp0_test.go:22:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else\
    \ {\n            arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2\
    \ {\n        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n\
    \            arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n\
    \        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n \
    \           arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n \
    \       if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n  \
    \          arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n  \
    \      if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n   \
    \         arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n   \
    \     if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n    \
    \        arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n    \
    \    if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n     \
    \       arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n     \
    \   if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n      \
    \      arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n      \
    \  if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n       \
    \     arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n       \
    \ if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n        \
    \    arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n        if\
    \ arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n           \
    \ arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n        if arr[i]\
    \ > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n            arr2[i]\
    \ = \"One\"\n        }\n    }\n    for i := range arr2 {\n        if arr[i] >\
    \ 9 {\n            arr2[i] = \"Nine\"\n        } else {\n            arr2[i] =\
    \ \"One\"\n        }\n    }\n    for i := range arr2 {\n        if arr[i] > 9\
    \ {\n            arr2[i] = \"\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzjkj2vpf_test.go:109:23: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075383
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr := arr[:0]\n    arr := append(arr, arr...)\n    arr\
    \ := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n  \
    \  arr := append(arr, arr...)\n    arr := append(arr, arr...)\n    arr := append(arr,\
    \ arr...)\n    arr := append(arr, arr...)\n    arr := append(arr, arr...)\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpetdshgvf_test.go:73:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075383
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        if\
    \ result[i] == \"1\" {\n            result[i] = \"One\"\n        } else if result[i]\
    \ == \"2\" {\n            result[i] = \"Two\"\n        } else if result[i] ==\
    \ \"3\" {\n            result[i] = \"Three\"\n        } else if result[i] == \"\
    4\" {\n            result[i] = \"Four\"\n        } else if result[i] == \"5\"\
    \ {\n            result[i] = \"Five\"\n        } else if result[i] == \"6\" {\n\
    \            result[i] = \"Six\"\n        } else if result[i] == \"7\" {\n   \
    \         result[i] = \"Seven\"\n        } else if result[i] == \"8\" {\n    \
    \        result[i] = \"Eight\"\n        } else if result[i] == \"9\" {\n     \
    \       result[i] = \"Nine\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpd3xf98e5_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpd3xf98e5_test.go:64: expected\
    \ '[One]', got '[One -1 55]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpd3xf98e5_test.go:64: expected '[Three Two One]', got '[One -1 Three\
    \ Two]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpd3xf98e5_test.go:64:\
    \ expected '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    result := append(result,\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := append(result, \"\")\n    result := append(result, \"\")\n  \
    \  result := append(result, \"\")\n    result := append(result, \"\")\n    result\
    \ := append(result, \"\")\n    result := append(result, \"\")\n    result := append(result,\
    \ \"\")\n    result := append(result, \"\")\n    result := append(result, \"\"\
    )\n    result := \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_flgjzg9_test.go:85:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        digit,\
    \ ok := reverseDigit(num-1)\n        if !ok {\n            continue\n        }\n\
    \        result = append(result, name[digit])\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgde8gj37_test.go:20:22: undefined: reverseDigit

    /tmp/tmpgde8gj37_test.go:24:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n    for _,\
    \ v := range arr {\n        if v < 1 || v > 9 {\n            continue\n      \
    \  }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result[v-1] = result[v-1]\
    \ + \"-\" + result[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodtwzb3p_test.go:19:5: undefined: sort

    /tmp/tmpodtwzb3p_test.go:20:9: no new variables on left side of :=

    /tmp/tmpodtwzb3p_test.go:20:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n        } else {\n            result[i] = \"\"\n        }\n   \
    \ }\n    for i := range result {\n        if result[i] == \"\" {\n           \
    \ result[i] = \"One\"\n        }\n    }\n    for i := range result {\n       \
    \ if result[i] == \"One\" {\n            result[i] = \"One\"\n        }\n    }\n\
    \    for i := range result {\n        if result[i] == \"One\" {\n            result[i]\
    \ = \"One\"\n        }\n    }\n    for i := range result {\n        if result[i]\
    \ == \"One\" {\n            result[i] = \"One\"\n        }\n    }\n    for i :=\
    \ range result {\n        if result[i] == \"One\" {\n            result[i] = \"\
    One\"\n        }\n    }\n    for i := range result {\n        if result[i] ==\
    \ \"One\" {\n            result[i] = \"One\"\n        }\n    }\n    for i := range\
    \ result {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\
    \n        }\n    }\n    for i := range result {\n        if result[i] == \"One\"\
    \ {\n            result[i] = \"One\"\n        }\n    }\n    for i := range result\
    \ {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\n    \
    \    }\n    }\n    for i := range result {\n        if result[i] == \"One\" {\n\
    \            result[i] = \"One\"\n        }\n    }\n    for i := range result\
    \ {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\n    \
    \    }\n    }\n    for i := range result {\n        if result[i] == \"One\" {\n\
    \            result[i] = \"One\"\n        }\n    }\n    for i := range result\
    \ {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\n    \
    \    }\n    }\n    for i := range result {\n        if result[i] == \"One\" {\n\
    \            result[i] = \"One\"\n        }\n    }\n    for i := range result\
    \ {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\n    \
    \    }\n    }\n    for i := range result {\n        if result[i] == \"One\" {\n\
    \            result[i] = \"One\"\n        }\n    }\n    for i := range result\
    \ {\n        if result[i] == \"One\" {\n            result[i] = \"One\"\n    \
    \    }\n    }\n    for i := range result {\n        if result[i] == \"One\" {\n\
    \            result[i] = \"One\"\n        }\n    }\n    for i := range result\
    \ {\n        if result[i] == \"One\" {\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ktau8g__test.go:115:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    max := 9\n    for _, num := range arr {\n        if\
    \ num < 1 || num > max {\n            continue\n        }\n        result := []string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n        result := append(result, result[:num-1]...)\n        result\
    \ := append(result, result[:num]...)\n        max -= 1\n    }\n    for _, num\
    \ := range arr {\n        if num < 1 || num > max {\n            continue\n  \
    \      }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[:num]...)\n        result := append(result, result[:num-1]...)\n    \
    \    max -= 1\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > max {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[:num-1]...)\n        result := append(result,\
    \ result[:num]...)\n        max -= 1\n    }\n    for _, num := range arr {\n \
    \       if num < 1 || num > max {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[:num]...)\n  \
    \      result := append(result, result[:num-1]...)\n        max -= 1\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > max {\n          \
    \  continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[:num]...)\n        result := append(result, result[:num-1]...)\n\
    \        max -= 1\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > max {\n            continue\n        }\n        result := []string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n        result := append(result, result[:num]...)\n        result\
    \ := append(result, result[:num-1]...)\n        max -= 1\n    }\n    for _, num\
    \ := range arr {\n        if num < 1 || num > max {\n            continue\n  \
    \      }\n        result := []string{\"One\", \"Two\", \"\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl25latuf_test.go:78:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%v\", v))\n    }\n    for _, v := range result\
    \ {\n        if v == \"0\" || v == \"1\" {\n            continue\n        }\n\
    \        result = append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\")[v-1]\n    }\n    return result\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb70m0o3d_test.go:26:18: cannot use append(result, "One", "Two", "Three",
    "Four", "Five", "Six", "Seven", "Eight", "Nine")[v - 1] (variable of type string)
    as type []string in assignment

    /tmp/tmpb70m0o3d_test.go:26:105: invalid operation: v - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"?\")\n    \
    \    }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"\
    One\"\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Two\"\
    \n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Three\"\
    \n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Four\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Five\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Six\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Seven\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Eight\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Nine\"\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpcn4ls75c_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Nine Nine Nine Nine Nine Nine Nine Nine]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpcn4ls75c_test.go:70: expected\
    \ '[One]', got '[Nine Nine Nine]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpcn4ls75c_test.go:70: expected '[Three Two One]', got '[Nine Nine Nine\
    \ Nine]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpcn4ls75c_test.go:70:\
    \ expected '[Nine Eight Four]', got '[Nine Nine Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075386
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"\
    One\"\n        if result[i] == \"???\" {\n            continue\n        }\n  \
    \      switch result[i] {\n        case \"One\":\n            result[i] = \"Two\"\
    \n        case \"Two\":\n            result[i] = \"Three\"\n        case \"Three\"\
    :\n            result[i] = \"Four\"\n        case \"Four\":\n            result[i]\
    \ = \"Five\"\n        case \"Five\":\n            result[i] = \"Six\"\n      \
    \  case \"Six\":\n            result[i] = \"Seven\"\n        case \"Seven\":\n\
    \            result[i] = \"Eight\"\n        case \"Eight\":\n            result[i]\
    \ = \"Nine\"\n        case \"Nine\":\n            result[i] = \"Ten\"\n      \
    \  case \"Ten\":\n            result[i] = \"Eleven\"\n        case \"Eleven\"\
    :\n            result[i] = \"Twelve\"\n        case \"Twelve\":\n            result[i]\
    \ = \"Thirteen\"\n        case \"Thirteen\":\n            result[i] = \"Fourteen\"\
    \n        case \"Fourteen\":\n            result[i] = \"Fifteen\"\n        case\
    \ \"Fifteen\":\n            result[i] = \"Sixteen\"\n        case \"Sixteen\"\
    :\n            result[i] = \"Seventeen\"\n        case \"Seventeen\":\n      \
    \      result[i] = \"Eighteen\"\n        case \"Eighteen\":\n            result[i]\
    \ = \"Nineteen\"\n        case \"Nineteen\":\n            result[i] = \"Twenty\"\
    \n        case \"Twenty\":\n            result[i] = \"Twenty one\"\n        case\
    \ \"Twenty one\":\n            result[i] = \"Twenty two\"\n        case \"Twenty\
    \ two\":\n            result[i] = \"Twenty three\"\n        case \"Twenty three\"\
    :\n            result[i] = \"Twenty four\"\n        case \"Twenty four\":\n  \
    \          result[i] = \"Twenty five\"\n        case \"Twenty five\":\n      \
    \      result[i] = \"Twenty six\"\n        case \"Twenty six\":\n            result[i]\
    \ = \"Twenty seven\"\n        case \"Twenty seven\":\n            result[i] =\
    \ \"Twenty eight\"\n        case \"Twenty eight\":\n            result[i] = \"\
    Twenty nine\"\n        case \"Twenty nine\":\n            result[i] = \"Thirty\"\
    \n        case \"Thirty\":\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqicosezp_test.go:89:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := reverse(arr)\n    for i := 0; i < len(arr); i++ {\n        arr[i] = name[arr[i]]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68coxt8y_test.go:18:9: no new variables on left side of :=

    /tmp/tmp68coxt8y_test.go:18:12: undefined: reverse

    /tmp/tmp68coxt8y_test.go:20:18: undefined: name

    /tmp/tmp68coxt8y_test.go:22:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    result := make([]string, len(arr))\n\
    \    for i := range arr {\n        if arr[i] > 9 {\n            continue\n   \
    \     }\n        if arr[i] < 1 {\n            continue\n        }\n        result[i]\
    \ = by_length_test.One[arr[i]-1]\n    }\n    for i := range result {\n       \
    \ result[i] = by_length_test.Two[result[i]-1]\n    }\n    for i := range result\
    \ {\n        result[i] = by_length_test.Three[result[i]-1]\n    }\n    for i :=\
    \ range result {\n        result[i] = by_length_test.Four[result[i]-1]\n    }\n\
    \    for i := range result {\n        result[i] = by_length_test.Five[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Six[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Seven[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Eight[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Nine[result[i]-1]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpydb9_mco_test.go:19:5: undefined: sort

    /tmp/tmpydb9_mco_test.go:20:12: no new variables on left side of :=

    /tmp/tmpydb9_mco_test.go:28:21: undefined: by_length_test

    /tmp/tmpydb9_mco_test.go:31:21: undefined: by_length_test

    /tmp/tmpydb9_mco_test.go:31:40: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmpydb9_mco_test.go:34:21: undefined: by_length_test

    /tmp/tmpydb9_mco_test.go:34:42: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmpydb9_mco_test.go:37:21: undefined: by_length_test

    /tmp/tmpydb9_mco_test.go:37:41: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmpydb9_mco_test.go:40:21: undefined: by_length_test

    /tmp/tmpydb9_mco_test.go:40:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        digitStr := fmt.Sprintf(\"%v\", arr[i])\n        digitStr := strings.Replace(digitStr,\
    \ \"1\", \"One\", 1)\n        digitStr := strings.Replace(digitStr, \"2\", \"\
    Two\", 2)\n        digitStr := strings.Replace(digitStr, \"3\", \"Three\", 3)\n\
    \        digitStr := strings.Replace(digitStr, \"4\", \"Four\", 4)\n        digitStr\
    \ := strings.Replace(digitStr, \"5\", \"Five\", 5)\n        digitStr := strings.Replace(digitStr,\
    \ \"6\", \"Six\", 6)\n        digitStr := strings.Replace(digitStr, \"7\", \"\
    Seven\", 7)\n        digitStr := strings.Replace(digitStr, \"8\", \"Eight\", 8)\n\
    \        digitStr := strings.Replace(digitStr, \"9\", \"Nine\", 9)\n        result[i]\
    \ = digitStr\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqf7qtz1_test.go:21:18: no new variables on left side of :=

    /tmp/tmpsqf7qtz1_test.go:21:21: undefined: strings

    /tmp/tmpsqf7qtz1_test.go:22:18: no new variables on left side of :=

    /tmp/tmpsqf7qtz1_test.go:22:21: undefined: strings

    /tmp/tmpsqf7qtz1_test.go:23:18: no new variables on left side of :=

    /tmp/tmpsqf7qtz1_test.go:23:21: undefined: strings

    /tmp/tmpsqf7qtz1_test.go:24:18: no new variables on left side of :=

    /tmp/tmpsqf7qtz1_test.go:24:21: undefined: strings

    /tmp/tmpsqf7qtz1_test.go:25:18: no new variables on left side of :=

    /tmp/tmpsqf7qtz1_test.go:25:21: undefined: strings

    /tmp/tmpsqf7qtz1_test.go:25:18: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", i))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for _, i := range result {\n        result[len(result)-1]\
    \ = i\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpwg4xgbdk_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 2]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpwg4xgbdk_test.go:46: expected '[One]', got '[1 ??? ???]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpwg4xgbdk_test.go:46:\
    \ expected '[Three Two One]', got '[1 ??? 3 3]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpwg4xgbdk_test.go:46: expected '[Nine Eight Four]', got '[9\
    \ 4 4]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = i\n   \
    \ }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    arr := reverse(arr)\n\
    \    arr := replaceDigit(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tlyat4g_test.go:18:9: no new variables on left side of :=

    /tmp/tmp1tlyat4g_test.go:22:5: undefined: sort

    /tmp/tmp1tlyat4g_test.go:23:9: no new variables on left side of :=

    /tmp/tmp1tlyat4g_test.go:23:12: undefined: reverse

    /tmp/tmp1tlyat4g_test.go:24:9: no new variables on left side of :=

    /tmp/tmp1tlyat4g_test.go:24:12: undefined: replaceDigit

    /tmp/tmp1tlyat4g_test.go:25:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n\n    arr2 = append(arr2, 9)\n    arr2 = append(arr2, 0)\n\n\
    \    sort.Ints(arr2)\n\n    arr2 := reverse(arr2)\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\
    \n    arr2 := arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    arr2 :=\
    \ arr2[:len(arr2)]\n\n    arr2 := arr2[:len(arr2)]\n\n    \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8_xwsmkt_test.go:112:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"?\")\n    \
    \    }\n    }\n    for _, v := range result {\n        if v == \"?\" {\n     \
    \       continue\n        }\n        result := []string{\n            \"One\"\
    ,\n            \"Two\",\n            \"Three\",\n            \"Four\",\n     \
    \       \"Five\",\n            \"Six\",\n            \"Seven\",\n            \"\
    Eight\",\n            \"Nine\",\n        }[v]\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g6n3f60_test.go:27:9: result declared but not used

    /tmp/tmp_g6n3f60_test.go:37:11: invalid argument: index v (variable of type string)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            str = fmt.Sprintf(\"%v\", v)\n     \
    \       str = str[0:len(str)-1]\n            str = str[0:3]\n            str =\
    \ str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n         \
    \   str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n \
    \           str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:3]\n\
    \            str = str[0:3]\n            str = str[0:3]\n            str = str[0:\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplokcn6ek_test.go:99:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[0:9]\n    arr[len(arr)-1]--\n    for i :=\
    \ 0; i < len(arr); i++ {\n        arr[i] = \"One\"\n    }\n    for i := 0; i <\
    \ len(arr); i++ {\n        arr[len(arr)-i-1] = \"Nine\"\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        arr[len(arr)-i] = \"Five\"\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        arr[len(arr)-i-1] = \"Four\"\n    }\n    for\
    \ i := 0; i < len(arr); i++ {\n        arr[len(arr)-i-2] = \"Three\"\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        arr[len(arr)-i-1] = \"Two\"\n  \
    \  }\n    for i := 0; i < len(arr); i++ {\n        arr[len(arr)-i-2] = \"One\"\
    \n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpshkjrpwc_test.go:18:5: undefined: sort

    /tmp/tmpshkjrpwc_test.go:19:9: no new variables on left side of :=

    /tmp/tmpshkjrpwc_test.go:22:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:25:29: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:28:27: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:31:29: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:34:29: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:37:29: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:40:29: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpshkjrpwc_test.go:42:12: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmpshkjrpwc_test.go:42:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := arr[:9]\n    for i := 0; i\
    \ < len(arr); i++ {\n        if arr[i] > 9 {\n            arr[i] = arr[i] - 10\n\
    \        }\n    }\n    arr := reverse(arr)\n    arr := arr[:len(arr)/10]\n   \
    \ arr := arr[:len(arr)/10]\n    arr := append(arr, \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpypxhg34w_test.go:15:5: undefined: sort

    /tmp/tmpypxhg34w_test.go:16:9: no new variables on left side of :=

    /tmp/tmpypxhg34w_test.go:22:9: no new variables on left side of :=

    /tmp/tmpypxhg34w_test.go:22:12: undefined: reverse

    /tmp/tmpypxhg34w_test.go:23:9: no new variables on left side of :=

    /tmp/tmpypxhg34w_test.go:24:9: no new variables on left side of :=

    /tmp/tmpypxhg34w_test.go:25:24: cannot use "One" (untyped string constant) as
    int value in argument to append

    /tmp/tmpypxhg34w_test.go:25:31: cannot use "Two" (untyped string constant) as
    int value in argument to append

    /tmp/tmpypxhg34w_test.go:25:38: cannot use "Three" (untyped string constant) as
    int value in argument to append

    /tmp/tmpypxhg34w_test.go:25:47: cannot use "Four" (untyped string constant) as
    int value in argument to append

    /tmp/tmpypxhg34w_test.go:25:47: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, reverse(arr))\n    arr :=\
    \ arr[:len(arr)-1]\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    return arr\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwk7ocr9j_test.go:18:9: no new variables on left side of :=

    /tmp/tmpwk7ocr9j_test.go:19:9: no new variables on left side of :=

    /tmp/tmpwk7ocr9j_test.go:19:24: undefined: reverse

    /tmp/tmpwk7ocr9j_test.go:20:9: no new variables on left side of :=

    /tmp/tmpwk7ocr9j_test.go:21:24: cannot use "One" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:31: cannot use "Two" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:38: cannot use "Three" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:47: cannot use "Four" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:55: cannot use "Five" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:63: cannot use "Six" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:63: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpij2oqmzu_test.go:74:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i], result[len(result)-i-1]\
    \ = result[len(result)-i-1], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgsk3rikm_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgsk3rikm_test.go:46: expected '[One]', got '[1 ??? ???]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgsk3rikm_test.go:46:\
    \ expected '[Three Two One]', got '[1 ??? 3 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpgsk3rikm_test.go:46: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075387
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    for\
    \ _, v := range arr {\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        switch\
    \ v {\n        case 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19:\n            v\
    \ = 10\n        case 2, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29:\n            v\
    \ = 20\n        case 3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39:\n            v\
    \ = 30\n        case 4, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49:\n            v\
    \ = 40\n        case 5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59:\n            v\
    \ = 50\n        case 6, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69:\n            v\
    \ = 60\n        case 7, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79:\n            v\
    \ = 70\n        case 8, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89:\n            v\
    \ = 80\n        case 9, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99:\n            v\
    \ = 90\n        }\n        result = append(result, result[v])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0aq_a15_test.go:19:5: undefined: sort

    /tmp/tmpc0aq_a15_test.go:20:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wv85ir1_test.go:18:5: undefined: sort

    /tmp/tmp5wv85ir1_test.go:19:9: no new variables on left side of :=

    /tmp/tmp5wv85ir1_test.go:19:12: undefined: reverse

    /tmp/tmp5wv85ir1_test.go:20:9: no new variables on left side of :=

    /tmp/tmp5wv85ir1_test.go:20:12: undefined: replaceDigits

    /tmp/tmp5wv85ir1_test.go:21:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr[i] = \"One\"\n        if arr[i] > 9 {\n            arr[i]\
    \ = \"Nine\"\n            arr[i-1] = \"Five\"\n        }\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        arr[i] = \"Two\"\n        if arr[i] > 9 {\n\
    \            arr[i] = \"Nine\"\n            arr[i-1] = \"Four\"\n        }\n \
    \   }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = \"Three\"\n     \
    \   if arr[i] > 9 {\n            arr[i] = \"Nine\"\n            arr[i-1] = \"\
    Three\"\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i]\
    \ = \"Four\"\n        if arr[i] > 9 {\n            arr[i] = \"Nine\"\n       \
    \     arr[i-1] = \"Two\"\n        }\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        arr[i] = \"Five\"\n        if arr[i] > 9 {\n            arr[i] =\
    \ \"Nine\"\n            arr[i-1] = \"One\"\n        }\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        arr[i] = \"Six\"\n        if arr[i] > 9 {\n   \
    \         arr[i] = \"Nine\"\n            arr[i-1] = \"Six\"\n        }\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        arr[i] = \"Seven\"\n        if arr[i]\
    \ > 9 {\n            arr[i] = \"Nine\"\n            arr[i-1] = \"Seven\"\n   \
    \     }\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = \"Eight\"\
    \n        if arr[i] > 9 {\n            arr[i] = \"Nine\"\n            arr[i-1]\
    \ = \"Eight\"\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n       \
    \ arr[i] = \"Nine\"\n        if arr[i] > 9 {\n            arr[i] = \"Nine\"\n\
    \            arr[i-1] = \"Nine\"\n        }\n    }\n    return arr\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9b_422ob_test.go:18:5: undefined: sort

    /tmp/tmp9b_422ob_test.go:19:9: no new variables on left side of :=

    /tmp/tmp9b_422ob_test.go:21:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:23:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:24:24: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:28:18: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:30:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:31:24: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:35:18: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:37:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp9b_422ob_test.go:37:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, by_length_test.by_length_map[num])\n    }\n    for _, num\
    \ := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = append(result, by_length_test.by_length_map[num])\n\
    \    }\n    for _, num := range result {\n        result = \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx2gkxr8x_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    for i := 0; i < len(arr); i++\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n\
    \        result := append(result, fmt.Sprintf(\"%v\", arr[i]))\n    }\n    for\
    \ i := 0; i < len(result); i++ {\n        if result[i] == \"1\" {\n          \
    \  result[i] = \"One\"\n        } else if result[i] == \"2\" {\n            result[i]\
    \ = \"Two\"\n        } else if result[i] == \"3\" {\n            result[i] = \"\
    Three\"\n        } else if result[i] == \"4\" {\n            result[i] = \"Four\"\
    \n        } else if result[i] == \"5\" {\n            result[i] = \"Five\"\n \
    \       } else if result[i] == \"6\" {\n            result[i] = \"Six\"\n    \
    \    } else if result[i] == \"7\" {\n            result[i] = \"Seven\"\n     \
    \   } else if result[i] == \"8\" {\n            result[i] = \"Eight\"\n      \
    \  } else if result[i] == \"9\" {\n            result[i] = \"Nine\"\n        }\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgky4_5xq_test.go:19:5: undefined: sort

    /tmp/tmpgky4_5xq_test.go:24:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075387
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replace(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5_rzc6n_test.go:15:5: undefined: sort

    /tmp/tmpe5_rzc6n_test.go:16:9: no new variables on left side of :=

    /tmp/tmpe5_rzc6n_test.go:16:12: undefined: reverse

    /tmp/tmpe5_rzc6n_test.go:17:9: no new variables on left side of :=

    /tmp/tmpe5_rzc6n_test.go:17:12: undefined: replace

    /tmp/tmpe5_rzc6n_test.go:18:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075387
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %s\", num))\n        }\n    }\n    for _, num := range result {\n        result[result.Index(num)]\
    \ = map[int]string{\n            1: \"One\",\n            2: \"Two\",\n      \
    \      3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n   \
    \         6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n\
    \            9: \"Nine\",\n        }[num]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejqd3b___test.go:22:23: result.Index undefined (type []string has no field
    or method Index)

    /tmp/tmpejqd3b___test.go:32:11: cannot use num (variable of type string) as type
    int in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075387
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    for _, v := range arr {\n        arr[len(arr)-1] = v\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf89117cm_test.go:18:5: undefined: sort

    /tmp/tmpf89117cm_test.go:19:9: no new variables on left side of :=

    /tmp/tmpf89117cm_test.go:20:24: cannot use "One" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:31: cannot use "Two" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:38: cannot use "Three" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:47: cannot use "Four" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:55: cannot use "Five" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:63: cannot use "Six" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:70: cannot use "Seven" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:79: cannot use "Eight" (untyped string constant) as
    int value in argument to append

    /tmp/tmpf89117cm_test.go:20:79: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075387
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, by_length_test.by_length_test_helper(num)...)\n    }\n   \
    \ return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09njcv51_test.go:20:9: result declared but not used

    /tmp/tmp09njcv51_test.go:20:34: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075387
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else\
    \ {\n            arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2\
    \ {\n        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n\
    \            arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n\
    \        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n \
    \           arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n \
    \       if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n  \
    \          arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n  \
    \      if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n   \
    \         arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n   \
    \     if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n    \
    \        arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n    \
    \    if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n     \
    \       arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n     \
    \   if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n      \
    \      arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n      \
    \  if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n       \
    \     arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n       \
    \ if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n        \
    \    arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n        if\
    \ arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n           \
    \ arr2[i] = \"One\"\n        }\n    }\n    for i := range arr2 {\n        if arr[i]\
    \ > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n            arr2[i]\
    \ = \"One\"\n        }\n    }\n    for i := range arr2 {\n        if arr[i] >\
    \ 9 {\n            arr2[i] = \"Nine\"\n        } else {\n            arr2[i] =\
    \ \"One\"\n        }\n    }\n    for i := range arr2 {\n        if arr[i] > 9\
    \ {\n            arr2[i] = \"\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzjkj2vpf_test.go:109:23: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075383
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", i))\n        }\n    }\n    for _, i := range result {\n        if i == \"\
    0\" {\n            result = append(result, \"One\")\n        } else if i == \"\
    1\" {\n            result = append(result, \"Two\")\n        } else if i == \"\
    2\" {\n            result = append(result, \"Three\")\n        } else if i ==\
    \ \"3\" {\n            result = append(result, \"Four\")\n        } else if i\
    \ == \"4\" {\n            result = append(result, \"Five\")\n        } else if\
    \ i == \"5\" {\n            result = append(result, \"Six\")\n        } else if\
    \ i == \"6\" {\n            result = append(result, \"Seven\")\n        } else\
    \ if i == \"7\" {\n            result = append(result, \"Eight\")\n        } else\
    \ if i == \"8\" {\n            result = append(result, \"Nine\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgcy7ce1z_test.go:62: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3 Three Two Two Five Six Nine Three Four]'\n\
    \    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpgcy7ce1z_test.go:62:\
    \ expected '[One]', got '[1 Two]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpgcy7ce1z_test.go:62: expected '[Three Two One]', got '[1 3 2 Two Four\
    \ Three]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpgcy7ce1z_test.go:62:\
    \ expected '[Nine Eight Four]', got '[9 4 8 Five Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, fmt.Sprintf(\"%v\", num))\n    }\n    for i := len(result)\
    \ - 1; i >= 0; i-- {\n        result[i] = map[int]string{\n            1: \"One\"\
    ,\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\"\
    ,\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\"\
    ,\n            8: \"Eight\",\n            9: \"Nine\",\n        }[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_uthz44_test.go:20:9: result declared but not used

    /tmp/tmpq_uthz44_test.go:33:11: cannot use result[i] (variable of type string)
    as type int in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        result[i]\
    \ = by_length_test.One[result[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm47sxyw4_test.go:24:21: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, by_length_test.by_length_map[num])\n    }\n    for i := 0;\
    \ i < len(result); i++ {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08djlut4_test.go:20:9: result declared but not used

    /tmp/tmp08djlut4_test.go:20:34: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range result {\n        if num == \"One\" {\n            result[0]\
    \ = \"Zero\"\n        }\n        if num == \"Two\" {\n            result[1] =\
    \ \"One\"\n        }\n        if num == \"Three\" {\n            result[2] = \"\
    Two\"\n        }\n        if num == \"Four\" {\n            result[3] = \"Three\"\
    \n        }\n        if num == \"Five\" {\n            result[4] = \"Four\"\n\
    \        }\n        if num == \"Six\" {\n            result[5] = \"Five\"\n  \
    \      }\n        if num == \"Seven\" {\n            result[6] = \"Six\"\n   \
    \     }\n        if num == \"Eight\" {\n            result[7] = \"Seven\"\n  \
    \      }\n        if num == \"Nine\" {\n            result[8] = \"Eight\"\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kdovmwd_test.go:21:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ < 1 || arr[i] > 9 {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", arr[i]))\n    }\n    for i := len(result) - 1; i >= 0; i--\
    \ {\n        result[i] = reverse(result[i])\n    }\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = replace(result[i], \"One\", \"1\")\n        result[i]\
    \ = replace(result[i], \"Two\", \"2\")\n        result[i] = replace(result[i],\
    \ \"Three\", \"3\")\n        result[i] = replace(result[i], \"Four\", \"4\")\n\
    \        result[i] = replace(result[i], \"Five\", \"5\")\n        result[i] =\
    \ replace(result[i], \"Six\", \"6\")\n        result[i] = replace(result[i], \"\
    Seven\", \"7\")\n        result[i] = replace(result[i], \"Eight\", \"8\")\n  \
    \      result[i] = replace(result[i], \"Nine\", \"9\")\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx63qmuje_test.go:26:21: undefined: reverse

    /tmp/tmpx63qmuje_test.go:29:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:30:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:31:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:32:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:33:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:34:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:35:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:36:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:37:21: undefined: replace

    /tmp/tmpx63qmuje_test.go:37:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n\
    \    for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        result = append(result, fmt.Sprintf(\"%v\", v))\n    }\n \
    \   for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        result = append(result, fmt.Sprintf(\"%v\", reverse[v-1]))\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9bhvxz__test.go:19:5: undefined: sort

    /tmp/tmpd9bhvxz__test.go:20:5: undefined: sort

    /tmp/tmpd9bhvxz__test.go:31:51: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wv85ir1_test.go:18:5: undefined: sort

    /tmp/tmp5wv85ir1_test.go:19:9: no new variables on left side of :=

    /tmp/tmp5wv85ir1_test.go:19:12: undefined: reverse

    /tmp/tmp5wv85ir1_test.go:20:9: no new variables on left side of :=

    /tmp/tmp5wv85ir1_test.go:20:12: undefined: replaceDigits

    /tmp/tmp5wv85ir1_test.go:21:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range result {\n        if num == \"One\" {\n            result[0]\
    \ = \"Zero\"\n        }\n        if num == \"Two\" {\n            result[1] =\
    \ \"One\"\n        }\n        if num == \"Three\" {\n            result[2] = \"\
    Two\"\n        }\n        if num == \"Four\" {\n            result[3] = \"Three\"\
    \n        }\n        if num == \"Five\" {\n            result[4] = \"Four\"\n\
    \        }\n        if num == \"Six\" {\n            result[5] = \"Five\"\n  \
    \      }\n        if num == \"Seven\" {\n            result[6] = \"Six\"\n   \
    \     }\n        if num == \"Eight\" {\n            result[7] = \"Seven\"\n  \
    \      }\n        if num == \"Nine\" {\n            result[8] = \"Eight\"\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kdovmwd_test.go:21:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    for\
    \ _, v := range arr {\n        result = append(result, by_length_test.One[v])\n\
    \        result = append(result, by_length_test.Two[v])\n        result = append(result,\
    \ by_length_test.Three[v])\n        result = append(result, by_length_test.Four[v])\n\
    \        result = append(result, by_length_test.Five[v])\n        result = append(result,\
    \ by_length_test.Six[v])\n        result = append(result, by_length_test.Seven[v])\n\
    \        result = append(result, by_length_test.Eight[v])\n        result = append(result,\
    \ by_length_test.Nine[v])\n    }\n    for _, v := range arr {\n        result\
    \ = append(result, by_length_test.One[v])\n        result = append(result, by_length_test.Two[v])\n\
    \        result = append(result, by_length_test.Three[v])\n        result = append(result,\
    \ by_length_test.Four[v])\n        result = append(result, by_length_test.Five[v])\n\
    \        result = append(result, by_length_test.Six[v])\n        result = append(result,\
    \ by_length_test.Seven[v])\n        result = append(result, by_length_test.Eight[v])\n\
    \        result = append(result, by_length_test.Nine[v])\n    }\n    for _, v\
    \ := range arr {\n        result = append(result, by_length_test.One[v])\n   \
    \     result = append(result, by_length_test.Two[v])\n        result = append(result,\
    \ by_length_test.Three[v])\n        result = append(result, by_length_test.Four[v])\n\
    \        result = append(result, by_length_test.Five[v])\n        result = append(result,\
    \ by_length_test.Six[v])\n        result = append(result, by_length_test.Seven[v])\n\
    \        result = append(result, by_length_test.Eight[v])\n        result = append(result,\
    \ by_length_test.Nine[v])\n    }\n    for _, v := range arr {\n        result\
    \ = append(result, by_length_test.One[v])\n        result = append(result, by_length_test.Two[v])\n\
    \        result = append(result, by_length_test.Three[v])\n        result = append(result,\
    \ by_length_test.Four[v])\n        result = append(result, by_length_test.Five[v])\n\
    \        result = append(result, by_length_test.Six[v])\n        result = append(result,\
    \ by_length_test.Seven[v])\n        result = append(result, by_length_test.Eight[v])\n\
    \        result = append(result, by_length_test.Nine[v])\n    }\n    for _, v\
    \ := range arr {\n        result = append(result, by_length_test.One[v])\n   \
    \     result = append(result, by_\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5odu15zw_test.go:67:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wv85ir1_test.go:18:5: undefined: sort

    /tmp/tmp5wv85ir1_test.go:19:9: no new variables on left side of :=

    /tmp/tmp5wv85ir1_test.go:19:12: undefined: reverse

    /tmp/tmp5wv85ir1_test.go:20:9: no new variables on left side of :=

    /tmp/tmp5wv85ir1_test.go:20:12: undefined: replaceDigits

    /tmp/tmp5wv85ir1_test.go:21:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    max := 9\n    for _, num := range arr {\n        if\
    \ num < 1 || num > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", num))\n        max -= 1\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > max {\n            continue\n        }\n\
    \        result := append(result, fmt.Sprintf(\"%v\", num))\n        max -= 1\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > max {\n   \
    \         continue\n        }\n        result := append(result, fmt.Sprintf(\"\
    %v\", num))\n        max -= 1\n    }\n    for _, num := range arr {\n        if\
    \ num < 1 || num > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", num))\n        max -= 1\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > max {\n            continue\n        }\n\
    \        result := append(result, fmt.Sprintf(\"%v\", num))\n        max -= 1\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > max {\n   \
    \         continue\n        }\n        result := append(result, fmt.Sprintf(\"\
    %v\", num))\n        max -= 1\n    }\n    for _, num := range arr {\n        if\
    \ num < 1 || num > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", num))\n        max -= 1\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > max {\n            continue\n        }\n\
    \        result := append(result, fmt.Sprintf(\"%v\", num))\n        max -= 1\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > max {\n   \
    \         continue\n        }\n        result := append(result, fmt.Sprintf(\"\
    %v\", num))\n        max -= 1\n    }\n    for _, num := range arr {\n        if\
    \ num < 1 || num > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", num))\n        max -= 1\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > max {\n            continue\n        }\n\
    \        result := append(result, fmt.Sprintf(\"%v\", num))\n        max -= 1\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > max {\n   \
    \         continue\n        }\n        result := append(result, fmt.Sprintf(\"\
    %v\", num))\n        max -= 1\n    }\n    for \nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3z7cxg3i_test.go:105:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1]--\n   \
    \ arr[len(arr)-1] = arr[len(arr)-1] % 10\n\n    var result []string\n    for _,\
    \ v := range arr {\n        result = append(result, fmt.Sprintf(\"%v\", v))\n\
    \    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dms40mc_test.go:19:5: undefined: sort

    /tmp/tmp6dms40mc_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    sort.Ints(arr[:9])\n    sort.Ints(arr[9:])\n\n    var\
    \ result []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            result = append(result, fmt.Sprintf(\"%v\", v))\n        } else {\n\
    \            result = append(result, \"???\")\n        }\n    }\n\n    for _,\
    \ v := range result {\n        if v == \"???\" {\n            result = append(result,\
    \ \"???\")\n        }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph3mtmxo9_test.go:19:5: undefined: sort

    /tmp/tmph3mtmxo9_test.go:20:5: undefined: sort

    /tmp/tmph3mtmxo9_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"\
    One\"\n        if result[i] == \"???\" {\n            continue\n        }\n  \
    \      switch result[i] {\n        case \"One\":\n            result[i] = \"Two\"\
    \n        case \"Two\":\n            result[i] = \"Three\"\n        case \"Three\"\
    :\n            result[i] = \"Four\"\n        case \"Four\":\n            result[i]\
    \ = \"Five\"\n        case \"Five\":\n            result[i] = \"Six\"\n      \
    \  case \"Six\":\n            result[i] = \"Seven\"\n        case \"Seven\":\n\
    \            result[i] = \"Eight\"\n        case \"Eight\":\n            result[i]\
    \ = \"Nine\"\n        case \"Nine\":\n            result[i] = \"Ten\"\n      \
    \  case \"Ten\":\n            result[i] = \"Eleven\"\n        case \"Eleven\"\
    :\n            result[i] = \"Twelve\"\n        case \"Twelve\":\n            result[i]\
    \ = \"Thirteen\"\n        case \"Thirteen\":\n            result[i] = \"Fourteen\"\
    \n        case \"Fourteen\":\n            result[i] = \"Fifteen\"\n        case\
    \ \"Fifteen\":\n            result[i] = \"Sixteen\"\n        case \"Sixteen\"\
    :\n            result[i] = \"Seventeen\"\n        case \"Seventeen\":\n      \
    \      result[i] = \"Eighteen\"\n        case \"Eighteen\":\n            result[i]\
    \ = \"Nineteen\"\n        case \"Nineteen\":\n            result[i] = \"Twenty\"\
    \n        case \"Twenty\":\n            result[i] = \"Twenty One\"\n        case\
    \ \"Twenty One\":\n            result[i] = \"Twenty Two\"\n        case \"Twenty\
    \ Two\":\n            result[i] = \"Twenty Three\"\n        case \"Twenty Three\"\
    :\n            result[i] = \"Twenty Four\"\n        case \"Twenty Four\":\n  \
    \          result[i] = \"Twenty Five\"\n        case \"Twenty Five\":\n      \
    \      result[i] = \"Twenty Six\"\n        case \"Twenty Six\":\n            result[i]\
    \ = \"Twenty Seven\"\n        case \"Twenty Seven\":\n            result[i] =\
    \ \"Twenty Eight\"\n        case \"Twenty Eight\":\n            result[i] = \"\
    Twenty Nine\"\n        case \"Twenty Nine\":\n            result[i] = \"Thirty\"\
    \n        case \"Thirty\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1g_ral0d_test.go:87:14: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    for i := range arr {\n     \
    \   arr[i] = names[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7fojg_r_test.go:18:5: undefined: sort

    /tmp/tmpp7fojg_r_test.go:19:9: no new variables on left side of :=

    /tmp/tmpp7fojg_r_test.go:19:12: undefined: reverse

    /tmp/tmpp7fojg_r_test.go:21:18: undefined: names

    /tmp/tmpp7fojg_r_test.go:23:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    for _,\
    \ v := range result {\n        result = append(result, reverse(v))\n    }\n  \
    \  for _, v := range result {\n        result = append(result, by_length_test.Digits[v-1])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt25zm1w6_test.go:20:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:21:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:22:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:23:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:24:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:25:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:26:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:27:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:28:33: undefined: by_length_test

    /tmp/tmpt25zm1w6_test.go:31:33: undefined: reverse

    /tmp/tmpt25zm1w6_test.go:31:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %s\", v))\n        } else {\n            result = append(result, \"?\")\n    \
    \    }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"\
    One\"\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Two\"\
    \n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Three\"\
    \n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Four\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Five\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Six\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Seven\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Eight\"\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = \"Nine\"\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpavhnh1te_test.go:18:37: fmt.Sprintf format %s has arg v of wrong type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075389
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    for _,\
    \ v := range result {\n        result = append(result, by_length_test.Reverse[v-1])\n\
    \    }\n    for _, v := range result {\n        result = append(result, by_length_test.Replace[v-1])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofgdnumj_test.go:20:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:21:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:22:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:23:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:24:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:25:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:26:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:27:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:28:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:31:33: undefined: by_length_test

    /tmp/tmpofgdnumj_test.go:31:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, by_length_test.One[v-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[v-1])\n\
    \        }\n    }\n    for _, v := range result {\n        result = append(result,\
    \ by_length_test.Reverse[v-1])\n    }\n    for _, v := range result {\n      \
    \  result = append(result, by_length_test.Replace[v-1])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetrsgx33_test.go:18:37: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:20:37: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:24:33: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:24:56: invalid operation: v - 1 (mismatched types string
    and untyped int)

    /tmp/tmpetrsgx33_test.go:27:33: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:27:56: invalid operation: v - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 19 {\n            arr2[i] = \"Two\"\
    \n        } else if arr[i] >= 20 && arr[i] <= 29 {\n            arr2[i] = \"Three\"\
    \n        } else if arr[i] >= 30 && arr[i] <= 39 {\n            arr2[i] = \"Four\"\
    \n        } else if arr[i] >= 40 && arr[i] <= 49 {\n            arr2[i] = \"Five\"\
    \n        } else if arr[i] >= 50 && arr[i] <= 59 {\n            arr2[i] = \"Six\"\
    \n        } else if arr[i] >= 60 && arr[i] <= 69 {\n            arr2[i] = \"Seven\"\
    \n        } else if arr[i] >= 70 && arr[i] <= 79 {\n            arr2[i] = \"Eight\"\
    \n        } else if arr[i] >= 80 && arr[i] <= 89 {\n            arr2[i] = \"Nine\"\
    \n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmptu7br5e9_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmptu7br5e9_test.go:57: expected '[One]', got '[One  Six]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmptu7br5e9_test.go:57:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmptu7br5e9_test.go:57: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075389
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        digitStr := fmt.Sprintf(\"%v\"\
    , num)\n        digitStr := digitStr[0:len(digitStr)-1]\n        digitStr := digitStr[0:3]\n\
    \        result := append(result, digitStr)\n    }\n    for _, num := range arr\
    \ {\n        if num < 1 || num > 9 {\n            continue\n        }\n      \
    \  digitStr := fmt.Sprintf(\"%v\", num)\n        digitStr := digitStr[0:len(digitStr)-1]\n\
    \        digitStr := digitStr[0:3]\n        result := append(result, digitStr)\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        digitStr := fmt.Sprintf(\"%v\", num)\n  \
    \      digitStr := digitStr[0:len(digitStr)-1]\n        digitStr := digitStr[0:3]\n\
    \        result := append(result, digitStr)\n    }\n    for _, num := range arr\
    \ {\n        if num < 1 || num > 9 {\n            continue\n        }\n      \
    \  digitStr := fmt.Sprintf(\"%v\", num)\n        digitStr := digitStr[0:len(digitStr)-1]\n\
    \        digitStr := digitStr[0:3]\n        result := append(result, digitStr)\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        digitStr := fmt.Sprintf(\"%v\", num)\n  \
    \      digitStr := digitStr[0:len(digitStr)-1]\n        digitStr := digitStr[0:3]\n\
    \        result := append(result, digitStr)\n    }\n    for _, num := range arr\
    \ {\n        if num < 1 || num > 9 {\n            continue\n        }\n      \
    \  digitStr := fmt.Sprintf(\"%v\", num)\n        digitStr := digitStr[0:len(digitStr)-1]\n\
    \        digitStr := digitStr[0:3]\n        result := append(result, digitStr)\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        digitStr := fmt.Sprintf(\"%v\", num)\n  \
    \      digitStr := digitStr[0:len(digitStr)-1]\n        digitStr := digitStr[0:3]\n\
    \        result := append(result, digitStr)\n    }\n    for _, num := range arr\
    \ {\n        if num < 1 || num > 9\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgwx15k08_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    reverse(arr)\n    arr :=\
    \ arr[:len(arr)/2]\n    for i := range arr {\n        arr[i] = \"One\"\n     \
    \   arr[len(arr)-i-1] = \"Nine\"\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpogpomktr_test.go:18:5: undefined: sort

    /tmp/tmpogpomktr_test.go:19:9: no new variables on left side of :=

    /tmp/tmpogpomktr_test.go:20:5: undefined: reverse

    /tmp/tmpogpomktr_test.go:21:9: no new variables on left side of :=

    /tmp/tmpogpomktr_test.go:23:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpogpomktr_test.go:24:29: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpogpomktr_test.go:26:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075389
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, number := range arr {\n        if number >=\
    \ 1 && number <= 9 {\n            result = append(result, by_length_test.One[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Two[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Three[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Four[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Five[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Six[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Seven[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Eight[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    for _, number := range arr {\n        if number >= 1 &&\
    \ number <= 9 {\n            result = append(result, by_length_test.Nine[number-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[number-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmbqcs087_test.go:21:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:23:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:28:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:30:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:35:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:37:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:42:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:44:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:49:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:51:37: undefined: by_length_test

    /tmp/tmpmbqcs087_test.go:51:37: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075389
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var i int\n    for i = 0; i\
    \ < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n\
    \        }\n        result := append(result, \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[i]))\n    }\n    for i = 0; i < len(result); i++ {\n\
    \        if result[i] == \"One\" {\n            result[i] = \"One\"\n        }\
    \ else if result[i] == \"Two\" {\n            result[i] = \"Two\"\n        } else\
    \ if result[i] == \"Three\" {\n            result[i] = \"Three\"\n        } else\
    \ if result[i] == \"Four\" {\n            result[i] = \"Four\"\n        } else\
    \ if result[i] == \"Five\" {\n            result[i] = \"Five\"\n        } else\
    \ if result[i] == \"Six\" {\n            result[i] = \"Six\"\n        } else if\
    \ result[i] == \"Seven\" {\n            result[i] = \"Seven\"\n        } else\
    \ if result[i] == \"Eight\" {\n            result[i] = \"Eight\"\n        } else\
    \ if result[i] == \"Nine\" {\n            result[i] = \"Nine\"\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31wac60c_test.go:22:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075389
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, by_length_test.One[num-1])\n    }\n    for i := len(result)\
    \ - 1; i >= 0; i-- {\n        result[i] = by_length_test.Reverse[result[i]]\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result[num-1] = by_length_test.Name[num-1]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9dzs16o7_test.go:20:9: result declared but not used

    /tmp/tmp9dzs16o7_test.go:20:34: undefined: by_length_test

    /tmp/tmp9dzs16o7_test.go:23:21: undefined: by_length_test

    /tmp/tmp9dzs16o7_test.go:29:25: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075389
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1]--\n    arr\
    \ := append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    for i := 0; i < len(arr); i++\
    \ {\n        arr[i] = fmt.Sprintf(\"%v\", arr[i])\n    }\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4oq2ho1j_test.go:18:5:\
    \ undefined: sort\n/tmp/tmp4oq2ho1j_test.go:19:9: no new variables on left side\
    \ of :=\n/tmp/tmp4oq2ho1j_test.go:21:9: no new variables on left side of :=\n\
    /tmp/tmp4oq2ho1j_test.go:21:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp4oq2ho1j_test.go:21:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp4oq2ho1j_test.go:23:18: cannot use fmt.Sprintf(\"%v\", arr[i]) (value\
    \ of type string) as type int in assignment\n/tmp/tmp4oq2ho1j_test.go:25:12: cannot\
    \ use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for i := range arr2\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n\
    \        arr2[i] = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\
    \    arr3 = make([]string, len(arr))\n    for i := range arr3 {\n        arr3[i]\
    \ = map[int]string{\n            1: \"One\",\n            2: \"Two\",\n      \
    \      3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n   \
    \         6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n\
    \            9: \"Nine\",\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3ubos0l_test.go:22:5: undefined: sort

    /tmp/tmpq3ubos0l_test.go:23:5: undefined: arr3

    /tmp/tmpq3ubos0l_test.go:24:20: undefined: arr3

    /tmp/tmpq3ubos0l_test.go:25:9: undefined: arr3

    /tmp/tmpq3ubos0l_test.go:37:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n        }\n    }\n    for i := range result {\n        result[i]\
    \ = reverse(result[i])\n    }\n    for i := range result {\n        result[i]\
    \ = replace(result[i], \"0\", \"One\")\n        result[i] = replace(result[i],\
    \ \"1\", \"Two\")\n        result[i] = replace(result[i], \"2\", \"Three\")\n\
    \        result[i] = replace(result[i], \"3\", \"Four\")\n        result[i] =\
    \ replace(result[i], \"4\", \"Five\")\n        result[i] = replace(result[i],\
    \ \"5\", \"Six\")\n        result[i] = replace(result[i], \"6\", \"Seven\")\n\
    \        result[i] = replace(result[i], \"7\", \"Eight\")\n        result[i] =\
    \ replace(result[i], \"8\", \"Nine\")\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2i9slns5_test.go:22:21: undefined: reverse

    /tmp/tmp2i9slns5_test.go:25:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:26:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:27:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:28:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:29:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:30:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:31:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:32:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:33:21: undefined: replace

    /tmp/tmp2i9slns5_test.go:33:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:9])\n    sort.Ints(arr[9:])\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}[v-1]\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd0luxp5p_test.go:19:5: undefined: sort

    /tmp/tmpd0luxp5p_test.go:20:5: undefined: sort

    /tmp/tmpd0luxp5p_test.go:21:5: undefined: sort

    /tmp/tmpd0luxp5p_test.go:25:29: first argument to append must be a slice; have
    result (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr := arr[:0]\n    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    arr := append(arr, 0)\n    arr := append(arr, 1)\n    arr :=\
    \ append(arr, 2)\n    arr := append(arr, 3)\n    arr := append(arr, 4)\n    arr\
    \ := append(arr, 5)\n    arr := append(arr, 6)\n    arr := append(arr, 7)\n  \
    \  arr := append(arr, 8)\n    arr := append(arr, 9)\n    arr := append(arr, 10)\n\
    \    arr := append(arr, 11)\n    arr := append(arr, 12)\n    arr := append(arr,\
    \ 13)\n    arr := append(arr, 14)\n    arr := append(arr, 15)\n    arr := append(arr,\
    \ 16)\n    arr := append(arr, 17)\n    arr := append(arr, 18)\n    arr := append(arr,\
    \ 19)\n    arr := append(arr, 20)\n    arr := append(arr, 21)\n    arr := append(arr,\
    \ 22)\n    arr := append(arr, 23)\n    arr := append(arr, 24)\n    arr := append(arr,\
    \ 25)\n    arr := append(arr, 26)\n    arr := append(arr, 27)\n    arr := append(arr,\
    \ 28)\n    arr := append(arr, 29)\n    arr := append(arr, 30)\n    arr := append(arr,\
    \ 31)\n    arr := append(arr, 32)\n    arr := append(arr, 33)\n    arr := append(arr,\
    \ 34)\n    arr := append(arr, 35)\n    arr := append(arr, 36)\n    arr := append(arr,\
    \ 37)\n    arr := append(arr, 38)\n    arr := append(arr, 39)\n    arr := append(arr,\
    \ 40)\n    arr := append(arr, 41)\n    arr := append(arr, 42)\n    arr := append(arr,\
    \ 43)\n    arr := append(arr, 44)\n    arr := append(arr, 45)\n    arr := append(arr,\
    \ 46)\n    arr := append(arr, 47)\n    arr := append(arr, 48)\n    arr := append(arr,\
    \ 49)\n    arr := append(arr, 50)\n    arr := append(arr, 51)\n    arr := append(arr,\
    \ 52)\n    arr := append(arr, 53)\n    arr := append(arr, 54)\n    arr := append(arr,\
    \ 55)\n    arr := append(arr, 56)\n    arr := append(arr, 57)\n    \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6nzr4mkw_test.go:78:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075389
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    for _,\
    \ v := range result {\n        result = append(result, by_length_test.Reverse[v-1])\n\
    \    }\n    for _, v := range result {\n        result = append(result, by_length_test.Digits[v-1])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0_kbuk2_test.go:20:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:21:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:22:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:23:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:24:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:25:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:26:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:27:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:28:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:31:33: undefined: by_length_test

    /tmp/tmph0_kbuk2_test.go:31:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps0o1tpgd_test.go:20:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:21:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:22:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:23:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:24:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:25:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:26:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:27:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:28:33: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1]--\n    arr\
    \ := append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    for _, v := range arr {\n    \
    \    arr[v] = fmt.Sprintf(\"%d\", v)\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpodjvd2sv_test.go:18:5:\
    \ undefined: sort\n/tmp/tmpodjvd2sv_test.go:19:9: no new variables on left side\
    \ of :=\n/tmp/tmpodjvd2sv_test.go:21:9: no new variables on left side of :=\n\
    /tmp/tmpodjvd2sv_test.go:21:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpodjvd2sv_test.go:21:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpodjvd2sv_test.go:23:18: cannot use fmt.Sprintf(\"%d\", v) (value of type\
    \ string) as type int in assignment\n/tmp/tmpodjvd2sv_test.go:25:12: cannot use\
    \ arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr2[i] = arr[i]\n    }\n    sort.Sort(by_length_test.ByLength(arr2))\n\
    \    arr3 = make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      arr3[i] = by_length_test.Name[arr2[i]]\n    }\n    return arr3\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxkh16yzo_test.go:19:5: undefined: sort

    /tmp/tmpxkh16yzo_test.go:19:15: undefined: by_length_test

    /tmp/tmpxkh16yzo_test.go:20:5: undefined: arr3

    /tmp/tmpxkh16yzo_test.go:22:9: undefined: arr3

    /tmp/tmpxkh16yzo_test.go:22:19: undefined: by_length_test

    /tmp/tmpxkh16yzo_test.go:24:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)/2]\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > 9 {\n            arr[i] = arr[i]%10\n            arr[i] = \"Nine\"\
    \ + arr[i]\n        } else {\n            arr[i] = \"One\" + arr[i]\n        }\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = arr[i][:1] + arr[i][1:]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_cf8ek6_test.go:18:5: undefined: sort

    /tmp/tmpw_cf8ek6_test.go:19:9: no new variables on left side of :=

    /tmp/tmpw_cf8ek6_test.go:23:22: invalid operation: "Nine" + arr[i] (mismatched
    types untyped string and int)

    /tmp/tmpw_cf8ek6_test.go:25:22: invalid operation: "One" + arr[i] (mismatched
    types untyped string and int)

    /tmp/tmpw_cf8ek6_test.go:29:18: invalid operation: cannot slice arr[i] (variable
    of type int)

    /tmp/tmpw_cf8ek6_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n       \
    \ if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n        arr2[i]\
    \ = arr[i]\n    }\n\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    for i\
    \ := 0; i < len(arr2); i++ {\n        arr2[i] = name[arr2[i]]\n    }\n\n    return\
    \ arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgmil2b0_test.go:27:5: undefined: sort

    /tmp/tmpzgmil2b0_test.go:28:12: undefined: reverse

    /tmp/tmpzgmil2b0_test.go:30:19: undefined: name

    /tmp/tmpzgmil2b0_test.go:33:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\")[num-1]\n    }\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", num))\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8fqam2n_test.go:20:9: result declared but not used

    /tmp/tmpi8fqam2n_test.go:26:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    for\
    \ i := 0; i < len(arr); i++ {\n        arr[i] = 9 - arr[i]\n    }\n    arr :=\
    \ reverse(arr)\n    for i := 0; i < len(arr); i++ {\n        arr[i] = names[arr[i]]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmw3d_0h_test.go:15:5: undefined: sort

    /tmp/tmpnmw3d_0h_test.go:16:9: no new variables on left side of :=

    /tmp/tmpnmw3d_0h_test.go:20:9: no new variables on left side of :=

    /tmp/tmpnmw3d_0h_test.go:20:12: undefined: reverse

    /tmp/tmpnmw3d_0h_test.go:22:18: undefined: names

    /tmp/tmpnmw3d_0h_test.go:24:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := []string{}\n    for _, i := range arr {\n\
    \        arr = append(arr, names[i-1])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw0aaz87x_test.go:18:5: undefined: sort

    /tmp/tmpw0aaz87x_test.go:19:9: no new variables on left side of :=

    /tmp/tmpw0aaz87x_test.go:19:12: undefined: reverse

    /tmp/tmpw0aaz87x_test.go:20:9: no new variables on left side of :=

    /tmp/tmpw0aaz87x_test.go:20:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpw0aaz87x_test.go:22:27: undefined: names

    /tmp/tmpw0aaz87x_test.go:24:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    result := make([]string, len(arr))\n\
    \    for i := range arr {\n        result[i] = names[arr[i]]\n    }\n    for i\
    \ := range result {\n        result[i] = reverse(result[i])\n    }\n    for i\
    \ := range result {\n        result[i] = replaceDigit(result[i])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpieddsp6j_test.go:19:5: undefined: sort

    /tmp/tmpieddsp6j_test.go:20:12: no new variables on left side of :=

    /tmp/tmpieddsp6j_test.go:22:21: undefined: names

    /tmp/tmpieddsp6j_test.go:25:21: undefined: reverse

    /tmp/tmpieddsp6j_test.go:28:21: undefined: replaceDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for i := 0; i < len(result); i++ {\n        if result[i]\
    \ == \"???\" {\n            continue\n        }\n        digit, err := strconv.Atoi(result[i])\n\
    \        if err != nil {\n            continue\n        }\n        result[i] =\
    \ by_length_test.One[digit]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmyfknjd_test.go:27:23: undefined: strconv

    /tmp/tmprmyfknjd_test.go:31:21: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    if len(arr) == 0 {\n      \
    \  return result\n    }\n    max := 9\n    min := 1\n    for _, v := range arr\
    \ {\n        if v < min || v > max {\n            continue\n        }\n      \
    \  result := append(result, by_length_test.One[v-min])\n    }\n    for _, v :=\
    \ range arr {\n        if v < min || v > max {\n            continue\n       \
    \ }\n        result := append(result, by_length_test.Two[v-min])\n    }\n    for\
    \ _, v := range arr {\n        if v < min || v > max {\n            continue\n\
    \        }\n        result := append(result, by_length_test.Three[v-min])\n  \
    \  }\n    for _, v := range arr {\n        if v < min || v > max {\n         \
    \   continue\n        }\n        result := append(result, by_length_test.Four[v-min])\n\
    \    }\n    for _, v := range arr {\n        if v < min || v > max {\n       \
    \     continue\n        }\n        result := append(result, by_length_test.Five[v-min])\n\
    \    }\n    for _, v := range arr {\n        if v < min || v > max {\n       \
    \     continue\n        }\n        result := append(result, by_length_test.Six[v-min])\n\
    \    }\n    for _, v := range arr {\n        if v < min || v > max {\n       \
    \     continue\n        }\n        result := append(result, by_length_test.Seven[v-min])\n\
    \    }\n    for _, v := range arr {\n        if v < min || v > max {\n       \
    \     continue\n        }\n        result := append(result, by_length_test.Eight[v-min])\n\
    \    }\n    for _, v := range arr {\n        if v < min || v > max {\n       \
    \     continue\n        }\n        result := append(result, by_length_test.Nine[v-min])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxxz904x_test.go:25:9: result declared but not used

    /tmp/tmptxxz904x_test.go:25:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:31:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:37:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:43:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:49:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:55:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:61:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:67:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:73:34: undefined: by_length_test

    /tmp/tmptxxz904x_test.go:25:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var length int\n    var i int\n\
    \    for i = 0; i < len(arr); i++ {\n        length = arr[i]\n        if length\
    \ < 1 || length > 9 {\n            continue\n        }\n        arr = append(arr[:i],\
    \ arr[i+1:]...)\n        arr = append(arr[:length], []string{\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}...)\n\
    \    }\n    for i = 0; i < len(arr); i++ {\n        result = append(result, fmt.Sprintf(\"\
    %d\", arr[i]))\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3d0rwjhd_test.go:24:36:\
    \ cannot use []string{\u2026} (value of type []string) as type []int in argument\
    \ to append\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:9])\n    sort.Ints(arr[10:])\n\
    \    for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        result = append(result, fmt.Sprintf(\"%v\", v))\n    }\n \
    \   for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        result = append(result, fmt.Sprintf(\"%v\", reverse[v]))\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcygxws6p_test.go:19:5: undefined: sort

    /tmp/tmpcygxws6p_test.go:20:5: undefined: sort

    /tmp/tmpcygxws6p_test.go:21:5: undefined: sort

    /tmp/tmpcygxws6p_test.go:32:51: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, v := range arr {\n \
    \       if v < 1 || v > 9 {\n            continue\n        }\n        result :=\
    \ append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")[v-1]\n    }\n    for _, v := range arr {\n     \
    \   if v < 10 {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08u2w0ru_test.go:20:9: result declared but not used

    /tmp/tmp08u2w0ru_test.go:26:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i]\
    \ = \"One\"\n        } else if arr[i] >= 10 && arr[i] <= 99 {\n            arr2[i]\
    \ = \"Two\"\n        } else if arr[i] >= 100 && arr[i] <= 999 {\n            arr2[i]\
    \ = \"Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n        \
    \    arr2[i] = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999\
    \ {\n            arr2[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i]\
    \ <= 999999 {\n            arr2[i] = \"Six\"\n        } else if arr[i] >= 1000000\
    \ && arr[i] <= 9999999 {\n            arr2[i] = \"Seven\"\n        } else if arr[i]\
    \ >= 10000000 && arr[i] <= 99999999 {\n            arr2[i] = \"Eight\"\n     \
    \   } else if arr[i] >= 100000000 && arr[i] <= 999999999 {\n            arr2[i]\
    \ = \"Nine\"\n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpcimtq_bd_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpcimtq_bd_test.go:57: expected '[One]', got '[One  Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpcimtq_bd_test.go:57:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpcimtq_bd_test.go:57: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, by_length_test.One[i])\n\
    \        }\n    }\n    for _, i := range arr {\n        if i >= 10 && i <= 99\
    \ {\n            result = append(result, by_length_test.Two[i])\n        }\n \
    \   }\n    for _, i := range arr {\n        if i >= 100 && i <= 999 {\n      \
    \      result = append(result, by_length_test.Three[i])\n        }\n    }\n  \
    \  for _, i := range arr {\n        if i >= 1000 && i <= 9999 {\n            result\
    \ = append(result, by_length_test.Four[i])\n        }\n    }\n    for _, i :=\
    \ range arr {\n        if i >= 10000 && i <= 99999 {\n            result = append(result,\
    \ by_length_test.Five[i])\n        }\n    }\n    for _, i := range arr {\n   \
    \     if i >= 100000 && i <= 999999 {\n            result = append(result, by_length_test.Six[i])\n\
    \        }\n    }\n    for _, i := range arr {\n        if i >= 1000000 && i <=\
    \ 9999999 {\n            result = append(result, by_length_test.Seven[i])\n  \
    \      }\n    }\n    for _, i := range arr {\n        if i >= 10000000 && i <=\
    \ 99999999 {\n            result = append(result, by_length_test.Eight[i])\n \
    \       }\n    }\n    for _, i := range arr {\n        if i >= 100000000 && i\
    \ <= 999999999 {\n            result = append(result, by_length_test.Nine[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp0q7vks_test.go:18:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:23:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:28:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:33:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:38:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:43:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:48:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:53:37: undefined: by_length_test

    /tmp/tmpxp0q7vks_test.go:58:37: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    sort.Sort(sort.Reverse(arr))\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = fmt.Sprintf(\"%v\", v)\n    }\n    for i, v := range arr {\n        if v >\
    \ 9 {\n            result[i] = fmt.Sprintf(\"%v\", v - 10)\n        }\n    }\n\
    \    for i, v := range arr {\n        if v < 1 {\n            result[i] = fmt.Sprintf(\"\
    %v\", v + 10)\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jc5_4lc_test.go:15:5: undefined: sort

    /tmp/tmp9jc5_4lc_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range result {\n        result = append(result,\
    \ by_length_test.Reverse[num-1])\n    }\n    for _, num := range result {\n  \
    \      result = append(result, by_length_test.Digit[num-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8859q7ve_test.go:18:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:20:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:56: invalid operation: num - 1 (mismatched types string
    and untyped int)

    /tmp/tmp8859q7ve_test.go:27:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:27:54: invalid operation: num - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n    for _,\
    \ v := range arr {\n        result = append(result, name[v])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlkevp70_test.go:19:5: undefined: sort

    /tmp/tmpdlkevp70_test.go:20:9: no new variables on left side of :=

    /tmp/tmpdlkevp70_test.go:20:12: undefined: reverse

    /tmp/tmpdlkevp70_test.go:22:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", i))\n        }\n    }\n    for _, i := range result {\n        if i == \"\
    0\" {\n            result = append(result, \"One\")\n        }\n        if i ==\
    \ \"1\" {\n            result = append(result, \"Two\")\n        }\n        if\
    \ i == \"2\" {\n            result = append(result, \"Three\")\n        }\n  \
    \      if i == \"3\" {\n            result = append(result, \"Four\")\n      \
    \  }\n        if i == \"4\" {\n            result = append(result, \"Five\")\n\
    \        }\n        if i == \"5\" {\n            result = append(result, \"Six\"\
    )\n        }\n        if i == \"6\" {\n            result = append(result, \"\
    Seven\")\n        }\n        if i == \"7\" {\n            result = append(result,\
    \ \"Eight\")\n        }\n        if i == \"8\" {\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4ar_lrgf_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3 Three Two Two Five Six Nine Three Four]'\n\
    \    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp4ar_lrgf_test.go:70:\
    \ expected '[One]', got '[1 Two]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmp4ar_lrgf_test.go:70: expected '[Three Two One]', got '[1 3 2 Two Four\
    \ Three]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4ar_lrgf_test.go:70:\
    \ expected '[Nine Eight Four]', got '[9 4 8 Five Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range result {\n        result = append(result,\
    \ by_length_test.Reverse[num-1])\n    }\n    for _, num := range result {\n  \
    \      result = append(result, by_length_test.Digit[num-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8859q7ve_test.go:18:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:20:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:56: invalid operation: num - 1 (mismatched types string
    and untyped int)

    /tmp/tmp8859q7ve_test.go:27:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:27:54: invalid operation: num - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := map[int]string{\n        1: \"One\",\n  \
    \      2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"\
    Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n \
    \       9: \"Nine\",\n    }\n    for _, v := range arr {\n        arr[v] = fmt.Sprintf(\"\
    %d\", v)\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp31v83290_test.go:18:5:\
    \ undefined: sort\n/tmp/tmp31v83290_test.go:19:9: no new variables on left side\
    \ of :=\n/tmp/tmp31v83290_test.go:19:12: undefined: reverse\n/tmp/tmp31v83290_test.go:20:9:\
    \ no new variables on left side of :=\n/tmp/tmp31v83290_test.go:20:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmp31v83290_test.go:32:18: cannot use fmt.Sprintf(\"%d\", v) (value of type\
    \ string) as type int in assignment\n/tmp/tmp31v83290_test.go:34:12: cannot use\
    \ arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]string, len(arr))\n    for i := range arr2 {\n        if arr[i] <\
    \ 1 || arr[i] > 9 {\n            continue\n        }\n        arr2[i] = \"One\"\
    \n        if arr[i] == 1 {\n            arr2[i] = \"Two\"\n        }\n       \
    \ if arr[i] == 2 {\n            arr2[i] = \"Three\"\n        }\n        if arr[i]\
    \ == 3 {\n            arr2[i] = \"Four\"\n        }\n        if arr[i] == 4 {\n\
    \            arr2[i] = \"Five\"\n        }\n        if arr[i] == 5 {\n       \
    \     arr2[i] = \"Six\"\n        }\n        if arr[i] == 6 {\n            arr2[i]\
    \ = \"Seven\"\n        }\n        if arr[i] == 7 {\n            arr2[i] = \"Eight\"\
    \n        }\n        if arr[i] == 8 {\n            arr2[i] = \"Nine\"\n      \
    \  }\n        if arr[i] == 9 {\n            arr2[i] = \"Ten\"\n        }\n   \
    \ }\n    for i := range arr2 {\n        arr2[i] = arr2[i][1:]\n    }\n    return\
    \ arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc0000f5de0, 0x3, 0x0?})\n\t\
    /tmp/tmp116mfqbj_test.go:53 +0x30c\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmp116mfqbj_test.go:67 +0x16a\ntesting.tRunner(0xc0001a0340, 0x529048)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n    sort.Ints(arr[:len(arr)-1])\n\
    \n    var result []string\n    for _, v := range arr {\n        if v < 1 || v\
    \ > 9 {\n            continue\n        }\n        result = append(result, fmt.Sprintf(\"\
    %v\", v))\n    }\n\n    for _, v := range result {\n        if v == \"1\" {\n\
    \            result[0] = \"One\"\n        } else if v == \"2\" {\n           \
    \ result[1] = \"Two\"\n        } else if v == \"3\" {\n            result[2] =\
    \ \"Three\"\n        } else if v == \"4\" {\n            result[3] = \"Four\"\n\
    \        } else if v == \"5\" {\n            result[4] = \"Five\"\n        } else\
    \ if v == \"6\" {\n            result[5] = \"Six\"\n        } else if v == \"\
    7\" {\n            result[6] = \"Seven\"\n        } else if v == \"8\" {\n   \
    \         result[7] = \"Eight\"\n        } else if v == \"9\" {\n            result[8]\
    \ = \"Nine\"\n        }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbdqgq52_test.go:19:5: undefined: sort

    /tmp/tmprbdqgq52_test.go:20:5: undefined: sort

    /tmp/tmprbdqgq52_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1]--\n    arr := append([]string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}, arr...)\n    for i := 0; i < len(arr); i++ {\n        arr[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpih81547z_test.go:15:9:\
    \ no new variables on left side of :=\n/tmp/tmpih81547z_test.go:16:5: undefined:\
    \ sort\n/tmp/tmpih81547z_test.go:17:9: no new variables on left side of :=\n/tmp/tmpih81547z_test.go:19:9:\
    \ no new variables on left side of :=\n/tmp/tmpih81547z_test.go:19:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmpih81547z_test.go:19:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmpih81547z_test.go:21:18:\
    \ cannot use fmt.Sprintf(\"%v\", arr[i]) (value of type string) as type int in\
    \ assignment\n/tmp/tmpih81547z_test.go:23:12: cannot use arr (variable of type\
    \ []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    sort.Ints(arr)\n\
    \    for i := range arr {\n        if arr[i] > 9 {\n            arr[i] = 9\n \
    \       }\n        if arr[i] < 1 {\n            arr[i] = 1\n        }\n      \
    \  if arr[i] == 0 {\n            continue\n        }\n        result[i] = names[arr[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = reverse(result[i])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwf9ieoug_test.go:16:5: undefined: sort

    /tmp/tmpwf9ieoug_test.go:27:21: undefined: names

    /tmp/tmpwf9ieoug_test.go:30:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, reverse(arr))\n    arr :=\
    \ arr[:len(arr)-1]\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    return arr\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwk7ocr9j_test.go:18:9: no new variables on left side of :=

    /tmp/tmpwk7ocr9j_test.go:19:9: no new variables on left side of :=

    /tmp/tmpwk7ocr9j_test.go:19:24: undefined: reverse

    /tmp/tmpwk7ocr9j_test.go:20:9: no new variables on left side of :=

    /tmp/tmpwk7ocr9j_test.go:21:24: cannot use "One" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:31: cannot use "Two" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:38: cannot use "Three" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:47: cannot use "Four" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:55: cannot use "Five" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:63: cannot use "Six" (untyped string constant) as
    int value in argument to append

    /tmp/tmpwk7ocr9j_test.go:21:63: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075386
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] > 9 {\n            arr[i] = arr[i] - 10\n        }\n\
    \        result[i] = names[arr[i]]\n    }\n    for i := range result {\n     \
    \   result[i] = reverse(result[i])\n    }\n    for i := range result {\n     \
    \   result[i] = replaceDigit(result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxuob9nqm_test.go:20:21: undefined: names

    /tmp/tmpxuob9nqm_test.go:23:21: undefined: reverse

    /tmp/tmpxuob9nqm_test.go:26:21: undefined: replaceDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, \nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe5rfbqz0_test.go:72:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, v := range arr {\n \
    \       if v < 1 || v > 9 {\n            continue\n        }\n        result :=\
    \ append(result, by_length_test.One[v-1])\n        result := append(result, by_length_test.Two[v-1])\n\
    \        result := append(result, by_length_test.Three[v-1])\n        result :=\
    \ append(result, by_length_test.Four[v-1])\n        result := append(result, by_length_test.Five[v-1])\n\
    \        result := append(result, by_length_test.Six[v-1])\n        result :=\
    \ append(result, by_length_test.Seven[v-1])\n        result := append(result,\
    \ by_length_test.Eight[v-1])\n        result := append(result, by_length_test.Nine[v-1])\n\
    \    }\n    for _, v := range result {\n        result = append(result, v)\n \
    \   }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqzx28_5i_test.go:20:34: undefined: by_length_test

    /tmp/tmpqzx28_5i_test.go:21:16: no new variables on left side of :=

    /tmp/tmpqzx28_5i_test.go:21:34: undefined: by_length_test

    /tmp/tmpqzx28_5i_test.go:22:16: no new variables on left side of :=

    /tmp/tmpqzx28_5i_test.go:22:34: undefined: by_length_test

    /tmp/tmpqzx28_5i_test.go:23:16: no new variables on left side of :=

    /tmp/tmpqzx28_5i_test.go:23:34: undefined: by_length_test

    /tmp/tmpqzx28_5i_test.go:24:16: no new variables on left side of :=

    /tmp/tmpqzx28_5i_test.go:24:34: undefined: by_length_test

    /tmp/tmpqzx28_5i_test.go:25:34: undefined: by_length_test

    /tmp/tmpqzx28_5i_test.go:25:34: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := arr[:9]\n    for _, i :=\
    \ range arr {\n        if i < 10 {\n            result += []string{\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }[i]\n        } else {\n            result += []string{\"Ten\", \"Eleven\", \"\
    Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"}[i]\n        }\n    }\n    for _, i := range arr\
    \ {\n        if i >= 10 {\n            result += []string{\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\"}[i]\n        }\n    }\n    for _, i := range arr\
    \ {\n        if i >= 100 {\n            result += []string{\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"}[i]\n \
    \       }\n    }\n    for _, i := range arr {\n        if i >= 1000 {\n      \
    \      result += []string{\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\"}[i]\n        }\n    }\n    for _, i := range\
    \ arr {\n        if i >= 10000 {\n            result += []string{\"Twenty\", \"\
    Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    }[i]\n        }\n    }\n    for _, i := range arr {\n        if i >= 100000 {\n\
    \            result += []string{\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\",\
    \ \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"}[i]\n        }\n    }\n    for\
    \ _, i := range arr {\n        if i >= 1000000 {\n            result += []string{\"\
    Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"\
    , \"Ninety\"}[i]\n        }\n    }\n    for _, i := range arr {\n        if i\
    \ >= 10000000 {\n            result += []string{\"Twenty\", \"Thirty\", \"Forty\"\
    , \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"}[i]\n        }\n \
    \   }\n    for _, i := range arr {\n        if i >= 100000000 {\n            result\
    \ += []string{\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"S\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0i_109zx_test.go:65:70: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc6q86_cu_test.go:18:9: no new variables on left side of :=

    /tmp/tmpc6q86_cu_test.go:18:12: undefined: reverse

    /tmp/tmpc6q86_cu_test.go:19:9: no new variables on left side of :=

    /tmp/tmpc6q86_cu_test.go:19:12: undefined: replaceDigits

    /tmp/tmpc6q86_cu_test.go:20:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result[i] =\
    \ \"One\"\n        } else if v >= 10 && v <= 19 {\n            result[i] = \"\
    Two\"\n        } else if v >= 20 && v <= 29 {\n            result[i] = \"Three\"\
    \n        } else if v >= 30 && v <= 39 {\n            result[i] = \"Four\"\n \
    \       } else if v >= 40 && v <= 49 {\n            result[i] = \"Five\"\n   \
    \     } else if v >= 50 && v <= 59 {\n            result[i] = \"Six\"\n      \
    \  } else if v >= 60 && v <= 69 {\n            result[i] = \"Seven\"\n       \
    \ } else if v >= 70 && v <= 79 {\n            result[i] = \"Eight\"\n        }\
    \ else if v >= 80 && v <= 89 {\n            result[i] = \"Nine\"\n        } else\
    \ {\n            result[i] = fmt.Sprintf(\"%v\", v)\n        }\n        i++\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp412pg5gq_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp412pg5gq_test.go:61: expected '[One]', got '[One -1 Six]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp412pg5gq_test.go:61:\
    \ expected '[Three Two One]', got '[One -1 One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp412pg5gq_test.go:61: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075393
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result := append(result, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )[num-1]\n        } else {\n            continue\n        }\n    }\n    for _,\
    \ num := range arr {\n        if num >= 10 && num <= 99 {\n            result\
    \ := append(result, \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")[num-10]\n\
    \        } else {\n            continue\n        }\n    }\n    for _, num := range\
    \ arr {\n        if num >= 100 && num <= 999 {\n            result := append(result,\
    \ \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"\
    , \"Ninety\")[num-100]\n        } else {\n            continue\n        }\n  \
    \  }\n    for _, num := range arr {\n        if num >= 1000 && num <= 999999 {\n\
    \            result := append(result, \"Hundred\", \"Thousand\", \"Million\",\
    \ \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\"\
    , \"Septillion\", \"Octillion\", \"Nonillion\")[num-1000]\n        } else {\n\
    \            continue\n        }\n    }\n    for _, num := range arr {\n     \
    \   if num >= 1000000 && num <= 9999999 {\n            result := append(result,\
    \ \"HundredThousand\", \"ThousandMillion\", \"BillionTrillion\", \"TrillionQuadrillion\"\
    , \"QuadrillionQuintillion\", \"SextillionSeptillion\", \"SeptillionOctillion\"\
    , \"OctillionNonillion\")[num-1000000]\n        } else {\n            continue\n\
    \        }\n    }\n    for _, num := range arr {\n        if num >= 1000000000\
    \ && num <= 999999999 {\n            result := append(result, \"HundredThousandThousand\"\
    , \"ThousandMillionThousand\", \"BillionTrillionThousand\", \"TrillionQuadrillionThousand\"\
    , \"QuadrillionQuintillionThousand\", \"SextillionSeptillionThousand\", \"SeptillionOctillionThousand\"\
    , \"OctillionNonillionThousand\")[num-1000000000]\n        } else {\n        \
    \    continue\n        }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplu6n8_79_test.go:58:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\")\n        result := append(result, fmt.Sprintf(\"\
    %d\", num))\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-i-1] = result[len(result)-i-1], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9pe25cfs_test.go:21:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else {\n           \
    \ arr2[i] = \"One\"\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n \
    \       if arr[i] > 9 {\n            arr2[i] = arr2[i] + \"Nine\"\n        } else\
    \ {\n            arr2[i] = arr2[i] + \"One\"\n        }\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        arr2[i] = arr2[i] + strconv.Itoa(arr[i])\n    }\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_uzoicl_test.go:34:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(by_length(arr2))\n    reverse(arr2)\n    arr3 := make([]string,\
    \ len(arr2))\n    for i := range arr3 {\n        arr3[i] = by_length_test.One[arr2[i]]\n\
    \    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6q51387b_test.go:22:5: undefined: sort

    /tmp/tmp6q51387b_test.go:23:5: undefined: reverse

    /tmp/tmp6q51387b_test.go:26:19: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n    \
    \    arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr2[i] < 10 {\n            arr2[i] = \"One\"\n        } else\
    \ if arr2[i] < 20 {\n            arr2[i] = \"Two\"\n        } else if arr2[i]\
    \ < 30 {\n            arr2[i] = \"Three\"\n        } else if arr2[i] < 40 {\n\
    \            arr2[i] = \"Four\"\n        } else if arr2[i] < 50 {\n          \
    \  arr2[i] = \"Five\"\n        } else if arr2[i] < 60 {\n            arr2[i] =\
    \ \"Six\"\n        } else if arr2[i] < 70 {\n            arr2[i] = \"Seven\"\n\
    \        } else if arr2[i] < 80 {\n            arr2[i] = \"Eight\"\n        }\
    \ else if arr2[i] < 90 {\n            arr2[i] = \"Nine\"\n        }\n    }\n \
    \   for i := 0; i < len(arr); i++ {\n        if arr2[i] < 10 {\n            arr2[i]\
    \ = \"One\"\n        } else if arr2[i] < 20 {\n            arr2[i] = \"Two\"\n\
    \        } else if arr2[i] < 30 {\n            arr2[i] = \"Three\"\n        }\
    \ else if arr2[i] < 40 {\n            arr2[i] = \"Four\"\n        } else if arr2[i]\
    \ < 50 {\n            arr2[i] = \"Five\"\n        } else if arr2[i] < 60 {\n \
    \           arr2[i] = \"Six\"\n        } else if arr2[i] < 70 {\n            arr2[i]\
    \ = \"Seven\"\n        } else if arr2[i] < 80 {\n            arr2[i] = \"Eight\"\
    \n        } else if arr2[i] < 90 {\n            arr2[i] = \"Nine\"\n        }\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwm01mfar_test.go:22:5: undefined: sort

    /tmp/tmpwm01mfar_test.go:25:23: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:27:23: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:29:23: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:31:23: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:33:23: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:35:23: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:37:23: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:39:23: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:41:23: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpwm01mfar_test.go:41:23: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] > 9 {\n            continue\n        }\n        if\
    \ arr[i] < 1 {\n            continue\n        }\n        result[i] = by_length_test.One[arr[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Two[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Three[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Four[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Five[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Six[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Seven[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Eight[result[i]-1]\n\
    \    }\n    for i := range result {\n        result[i] = by_length_test.Nine[result[i]-1]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7z2b6l_f_test.go:23:21: undefined: by_length_test

    /tmp/tmp7z2b6l_f_test.go:26:21: undefined: by_length_test

    /tmp/tmp7z2b6l_f_test.go:26:40: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmp7z2b6l_f_test.go:29:21: undefined: by_length_test

    /tmp/tmp7z2b6l_f_test.go:29:42: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmp7z2b6l_f_test.go:32:21: undefined: by_length_test

    /tmp/tmp7z2b6l_f_test.go:32:41: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmp7z2b6l_f_test.go:35:21: undefined: by_length_test

    /tmp/tmp7z2b6l_f_test.go:35:41: invalid operation: result[i] - 1 (mismatched types
    string and untyped int)

    /tmp/tmp7z2b6l_f_test.go:38:21: undefined: by_length_test

    /tmp/tmp7z2b6l_f_test.go:38:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075393
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)/2:] = reverse(arr[len(arr)/2:])\n\
    \    arr := arr[:len(arr)/2]\n    for i := 0; i < len(arr); i++ {\n        arr[i]\
    \ = \"One\"\n        if i < len(arr)-1 {\n            arr[i+1] = \"Two\"\n   \
    \         if i < len(arr)-2 {\n                arr[i+2] = \"Three\"\n        \
    \        if i < len(arr)-3 {\n                    arr[i+3] = \"Four\"\n      \
    \              if i < len(arr)-4 {\n                        arr[i+4] = \"Five\"\
    \n                        if i < len(arr)-5 {\n                            arr[i+5]\
    \ = \"Six\"\n                            if i < len(arr)-6 {\n               \
    \                 arr[i+6] = \"Seven\"\n                                if i <\
    \ len(arr)-7 {\n                                    arr[i+7] = \"Eight\"\n   \
    \                                 if i < len(arr)-8 {\n                      \
    \                  arr[i+8] = \"Nine\"\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzo9kzig_test.go:18:9: no new variables on left side of :=

    /tmp/tmpkzo9kzig_test.go:19:24: undefined: reverse

    /tmp/tmpkzo9kzig_test.go:20:9: no new variables on left side of :=

    /tmp/tmpkzo9kzig_test.go:22:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:24:24: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:26:28: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:28:32: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:30:36: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:32:40: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:34:44: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpkzo9kzig_test.go:34:44: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075393
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr2 := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = \"One\"\n    \
    \    } else if arr[i] >= 10 && arr[i] <= 19 {\n            arr2[i] = \"Two\"\n\
    \        } else if arr[i] >= 20 && arr[i] <= 29 {\n            arr2[i] = \"Three\"\
    \n        } else if arr[i] >= 30 && arr[i] <= 39 {\n            arr2[i] = \"Four\"\
    \n        } else if arr[i] >= 40 && arr[i] <= 49 {\n            arr2[i] = \"Five\"\
    \n        } else if arr[i] >= 50 && arr[i] <= 59 {\n            arr2[i] = \"Six\"\
    \n        } else if arr[i] >= 60 && arr[i] <= 69 {\n            arr2[i] = \"Seven\"\
    \n        } else if arr[i] >= 70 && arr[i] <= 79 {\n            arr2[i] = \"Eight\"\
    \n        } else if arr[i] >= 80 && arr[i] <= 89 {\n            arr2[i] = \"Nine\"\
    \n        }\n    }\n\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpvr3v4t3g_test.go:62: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpvr3v4t3g_test.go:62: expected '[One]', got '[One  Six]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvr3v4t3g_test.go:62:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpvr3v4t3g_test.go:62: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075393
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjoky651a_test.go:55:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075392
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n \
    \   for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n \
    \           continue\n        }\n        result := []string{\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  \
    \      result := append(result, result[len(arr[i])-1])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxdhmdoc_test.go:19:5: undefined: sort

    /tmp/tmpdxdhmdoc_test.go:20:5: undefined: sort

    /tmp/tmpdxdhmdoc_test.go:26:16: no new variables on left side of :=

    /tmp/tmpdxdhmdoc_test.go:26:45: invalid argument: arr[i] (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075393
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        result := []string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n    }\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result,\
    \ result[num-1])\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n        result := append(result, result[num-1])\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[num-1])\n\
    \    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        result := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result\
    \ := append(result, result[num-1])\n    }\n    for _, num := range arr {\n   \
    \     if num\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8wrd96g_test.go:77:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        digitIndex := arr[i] - 1\n        result[i] = \"One\"\n        if\
    \ digitIndex < 2 {\n            result[i] = \"Two\"\n            if digitIndex\
    \ < 3 {\n                result[i] = \"Three\"\n                if digitIndex\
    \ < 4 {\n                    result[i] = \"Four\"\n                    if digitIndex\
    \ < 5 {\n                        result[i] = \"Five\"\n                      \
    \  if digitIndex < 6 {\n                            result[i] = \"Six\"\n    \
    \                        if digitIndex < 7 {\n                               \
    \ result[i] = \"Seven\"\n                                if digitIndex < 8 {\n\
    \                                    result[i] = \"Eight\"\n                 \
    \                   if digitIndex < 9 {\n                                    \
    \    result[i] = \"Nine\"\n                                    }\n           \
    \                     }\n                            }\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpzivg5x_y_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Nine Nine Nine One One One Nine One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpzivg5x_y_test.go:67: expected '[One]', got '[Nine  ]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpzivg5x_y_test.go:67:\
    \ expected '[Three Two One]', got '[Nine  One Nine]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpzivg5x_y_test.go:67: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075394
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        digitStr := fmt.Sprintf(\"%v\", arr[i])\n        digitStr := digitStr[0:len(digitStr)-1]\n\
    \        result[i] = by_length_test.map[digitStr]\n    }\n    for i := range result\
    \ {\n        result[i] = reverse(result[i])\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuihi4uez_test.go:22:36: expected selector or type assertion, found ''map''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075393
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i]\
    \ = \"One\"\n        } else if arr[i] >= 10 && arr[i] <= 19 {\n            arr2[i]\
    \ = \"Two\"\n        } else if arr[i] >= 20 && arr[i] <= 29 {\n            arr2[i]\
    \ = \"Three\"\n        } else if arr[i] >= 30 && arr[i] <= 39 {\n            arr2[i]\
    \ = \"Four\"\n        } else if arr[i] >= 40 && arr[i] <= 49 {\n            arr2[i]\
    \ = \"Five\"\n        } else if arr[i] >= 50 && arr[i] <= 59 {\n            arr2[i]\
    \ = \"Six\"\n        } else if arr[i] >= 60 && arr[i] <= 69 {\n            arr2[i]\
    \ = \"Seven\"\n        } else if arr[i] >= 70 && arr[i] <= 79 {\n            arr2[i]\
    \ = \"Eight\"\n        } else if arr[i] >= 80 && arr[i] <= 89 {\n            arr2[i]\
    \ = \"Nine\"\n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpq1drv505_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpq1drv505_test.go:57: expected '[One]', got '[One  Six]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpq1drv505_test.go:57:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpq1drv505_test.go:57: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = by_length_test.Reverse[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeohdouy4_test.go:20:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:21:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:22:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:23:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:24:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:25:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:26:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:27:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:28:33: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:31:21: undefined: by_length_test

    /tmp/tmpeohdouy4_test.go:31:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    for\
    \ _, v := range arr {\n        result := append(result, fmt.Sprintf(\"%v\", v))\n\
    \    }\n    for _, v := range result {\n        if v == \"1\" {\n            result[0]\
    \ = \"One\"\n        } else if v == \"2\" {\n            result[1] = \"Two\"\n\
    \        } else if v == \"3\" {\n            result[2] = \"Three\"\n        }\
    \ else if v == \"4\" {\n            result[3] = \"Four\"\n        } else if v\
    \ == \"5\" {\n            result[4] = \"Five\"\n        } else if v == \"6\" {\n\
    \            result[5] = \"Six\"\n        } else if v == \"7\" {\n           \
    \ result[6] = \"Seven\"\n        } else if v == \"8\" {\n            result[7]\
    \ = \"Eight\"\n        } else if v == \"9\" {\n            result[8] = \"Nine\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiety19v3_test.go:19:5: undefined: sort

    /tmp/tmpiety19v3_test.go:20:9: no new variables on left side of :=

    /tmp/tmpiety19v3_test.go:22:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]string, len(arr))\n    arr2[0] = fmt.Sprintf(\"%d\", arr[0])\n   \
    \ for i := 1; i < len(arr); i++ {\n        if arr[i] < 10 {\n            arr2[i]\
    \ = fmt.Sprintf(\"%d\", arr[i])\n        } else {\n            arr2[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n        }\n    }\n    arr2 = append(arr2[:len(arr2)-1], arr2[len(arr2)-1])\n\
    \    for i := 0; i < len(arr2); i++ {\n        if arr2[i] == \"0\" {\n       \
    \     arr2[i] = \"One\"\n        } else if arr2[i] == \"1\" {\n            arr2[i]\
    \ = \"Two\"\n        } else if arr2[i] == \"2\" {\n            arr2[i] = \"Three\"\
    \n        } else if arr2[i] == \"3\" {\n            arr2[i] = \"Four\"\n     \
    \   } else if arr2[i] == \"4\" {\n            arr2[i] = \"Five\"\n        } else\
    \ if arr2[i] == \"5\" {\n            arr2[i] = \"Six\"\n        } else if arr2[i]\
    \ == \"6\" {\n            arr2[i] = \"Seven\"\n        } else if arr2[i] == \"\
    7\" {\n            arr2[i] = \"Eight\"\n        } else if arr2[i] == \"8\" {\n\
    \            arr2[i] = \"Nine\"\n        }\n    }\n    return arr2\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmp53hjlz_test.go:69: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Two Five Six Nine Three Four]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpmp53hjlz_test.go:69: expected\
    \ '[One]', got '[Two -1 55]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpmp53hjlz_test.go:69: expected '[Three Two One]', got '[Two -1 Four\
    \ Three]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmp53hjlz_test.go:69:\
    \ expected '[Nine Eight Four]', got '[9 Five Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result :=\
    \ append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")[v-1]\n    }\n    for _, v := range result {\n  \
    \      result = append(result, v)\n    }\n    for _, v := range result {\n   \
    \     result = append(result, v)\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6v798000_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 19 {\n            result[i] = \"\
    Two\"\n        } else if arr[i] >= 20 && arr[i] <= 29 {\n            result[i]\
    \ = \"Three\"\n        } else if arr[i] >= 30 && arr[i] <= 39 {\n            result[i]\
    \ = \"Four\"\n        } else if arr[i] >= 40 && arr[i] <= 49 {\n            result[i]\
    \ = \"Five\"\n        } else if arr[i] >= 50 && arr[i] <= 59 {\n            result[i]\
    \ = \"Six\"\n        } else if arr[i] >= 60 && arr[i] <= 69 {\n            result[i]\
    \ = \"Seven\"\n        } else if arr[i] >= 70 && arr[i] <= 79 {\n            result[i]\
    \ = \"Eight\"\n        } else if arr[i] >= 80 && arr[i] <= 89 {\n            result[i]\
    \ = \"Nine\"\n        }\n    }\n    for i := range result {\n        result[i]\
    \ = reverse(result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7jwi2vgc_test.go:38:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n    for _,\
    \ v := range arr {\n        result = append(result, name[v])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlkevp70_test.go:19:5: undefined: sort

    /tmp/tmpdlkevp70_test.go:20:9: no new variables on left side of :=

    /tmp/tmpdlkevp70_test.go:20:12: undefined: reverse

    /tmp/tmpdlkevp70_test.go:22:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, reverse(arr))\n    arr :=\
    \ append(arr, map[int]string{\n        1: \"One\",\n        2: \"Two\",\n    \
    \    3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n \
    \   }...)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwekxgm8_test.go:18:9:\
    \ no new variables on left side of :=\n/tmp/tmpzwekxgm8_test.go:19:9: no new variables\
    \ on left side of :=\n/tmp/tmpzwekxgm8_test.go:19:24: undefined: reverse\n/tmp/tmpzwekxgm8_test.go:20:9:\
    \ no new variables on left side of :=\n/tmp/tmpzwekxgm8_test.go:20:24: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in argument\
    \ to append\n/tmp/tmpzwekxgm8_test.go:31:12: cannot use arr (variable of type\
    \ []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, by_length_test.One[i-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[i-1])\n\
    \        }\n    }\n    for _, i := range result {\n        if i == \"\" {\n  \
    \          result = append(result, \"\")\n        }\n    }\n    for _, i := range\
    \ result {\n        if i == \"\" {\n            result = append(result, \"\")\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6soyzowv_test.go:18:37: undefined: by_length_test

    /tmp/tmp6soyzowv_test.go:20:37: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    for _, v := range arr {\n    \
    \    if v < 1 || v > 9 {\n            continue\n        }\n        result = append(result,\
    \ by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7zszsr0k_test.go:19:5: undefined: sort

    /tmp/tmp7zszsr0k_test.go:24:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:25:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:26:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:27:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:28:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:29:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:30:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:31:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:32:33: undefined: by_length_test

    /tmp/tmp7zszsr0k_test.go:32:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range result {\n        result = append(result,\
    \ by_length_test.Reverse[num-1])\n    }\n    for _, num := range result {\n  \
    \      result = append(result, by_length_test.Digit[num-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8859q7ve_test.go:18:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:20:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:56: invalid operation: num - 1 (mismatched types string
    and untyped int)

    /tmp/tmp8859q7ve_test.go:27:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:27:54: invalid operation: num - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    sort.Ints(arr[:9])\n    sort.Ints(arr[9:])\n\n    result\
    \ := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = by_length_test.map[v]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnvyo6m8k_test.go:25:36: expected selector or type assertion, found ''map''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075393
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n    sort.Ints(arr[len(arr)-1:])\n\
    \n    var result []string\n    for _, num := range arr {\n        if num < 10\
    \ {\n            result := append(result, fmt.Sprintf(\"%v\", num))\n        }\
    \ else {\n            result := append(result, \"Nine\")\n        }\n    }\n \
    \   return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2n_rrp87_test.go:19:5: undefined: sort

    /tmp/tmp2n_rrp87_test.go:20:5: undefined: sort

    /tmp/tmp2n_rrp87_test.go:21:5: undefined: sort

    /tmp/tmp2n_rrp87_test.go:26:13: result declared but not used

    /tmp/tmp2n_rrp87_test.go:28:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"???\")\n  \
    \      }\n    }\n    for _, v := range result {\n        if v == \"???\" {\n \
    \           result = append(result, \"???\")\n        }\n    }\n    for _, v :=\
    \ range result {\n        if v == \"???\" {\n            result = append(result,\
    \ \"???\")\n        }\n    }\n    for _, v := range result {\n        if v ==\
    \ \"???\" {\n            result = append(result, \"???\")\n        }\n    }\n\
    \    for _, v := range result {\n        if v == \"???\" {\n            result\
    \ = append(result, \"???\")\n        }\n    }\n    for _, v := range result {\n\
    \        if v == \"???\" {\n            result = append(result, \"???\")\n   \
    \     }\n    }\n    for _, v := range result {\n        if v == \"???\" {\n  \
    \          result = append(result, \"???\")\n        }\n    }\n    for _, v :=\
    \ range result {\n        if v == \"???\" {\n            result = append(result,\
    \ \"???\")\n        }\n    }\n    for _, v := range result {\n        if v ==\
    \ \"???\" {\n            result = append(result, \"???\")\n        }\n    }\n\
    \    for _, v := range result {\n        if v == \"???\" {\n            result\
    \ = append(result, \"???\")\n        }\n    }\n    for _, v := range result {\n\
    \        if v == \"???\" {\n            result = append(result, \"???\")\n   \
    \     }\n    }\n    for _, v := range result {\n        if v == \"???\" {\n  \
    \          result = append(result, \"???\")\n        }\n    }\n    for _, v :=\
    \ range result {\n        if v == \"???\" {\n            result = append(result,\
    \ \"???\")\n        }\n    }\n    for _, v := range result {\n        if v ==\
    \ \"???\" {\n            result = append(result, \"???\")\n        }\n    }\n\
    \    for _, v := range result {\n        if v == \"???\" {\n            result\
    \ = append(result, \"???\")\n        }\n    }\n    for _, v := range result {\n\
    \        if v == \"???\" {\n            result = append(result, \"???\")\n   \
    \     }\n    }\n    for _, v := range result {\n        if v == \"???\" {\n  \
    \          result = append(result, \"???\")\n        }\n    }\n    for _, v :=\
    \ range result {\n        if v == \"???\" {\n            result = append(result,\
    \ \"???\")\n        }\n    }\n    for _, v := range result {\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvyag5z3_test.go:109:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:9]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ 9 {\n            arr[i] = 9\n        }\n    }\n    arr := reverse(arr)\n   \
    \ for i := 0; i < len(arr); i++ {\n        arr[i] = names[arr[i]]\n    }\n   \
    \ return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptd3lm0va_test.go:18:5: undefined: sort

    /tmp/tmptd3lm0va_test.go:19:9: no new variables on left side of :=

    /tmp/tmptd3lm0va_test.go:25:9: no new variables on left side of :=

    /tmp/tmptd3lm0va_test.go:25:12: undefined: reverse

    /tmp/tmptd3lm0va_test.go:27:18: undefined: names

    /tmp/tmptd3lm0va_test.go:29:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n\
    \    arr := append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    for i := range arr {\n  \
    \      arr[i] = fmt.Sprintf(\"%d\", arr[i])\n    }\n    return arr\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2egrnj6h_test.go:18:9:\
    \ no new variables on left side of :=\n/tmp/tmp2egrnj6h_test.go:19:5: undefined:\
    \ sort\n/tmp/tmp2egrnj6h_test.go:20:9: no new variables on left side of :=\n/tmp/tmp2egrnj6h_test.go:21:9:\
    \ no new variables on left side of :=\n/tmp/tmp2egrnj6h_test.go:21:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmp2egrnj6h_test.go:21:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmp2egrnj6h_test.go:23:18:\
    \ cannot use fmt.Sprintf(\"%d\", arr[i]) (value of type string) as type int in\
    \ assignment\n/tmp/tmp2egrnj6h_test.go:25:12: cannot use arr (variable of type\
    \ []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := arr[:len(arr)/2]\n    arr[len(arr)-1],\
    \ arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]], arr[len(arr)-1]\n    arr := reverse(arr)\n\
    \    arr := arr[:len(arr)/2]\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcsdt7qfw_test.go:55:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr2 := make([]string, len(arr))\n    arr2 := append(arr2, fmt.Sprintf(\"One\"\
    ))\n    arr2 := append(arr2, fmt.Sprintf(\"Two\"))\n    arr2 := append(arr2, fmt.Sprintf(\"\
    Three\"))\n    arr2 := append(arr2, fmt.Sprintf(\"Four\"))\n    arr2 := append(arr2,\
    \ fmt.Sprintf(\"Five\"))\n    arr2 := append(arr2, fmt.Sprintf(\"Six\"))\n   \
    \ arr2 := append(arr2, fmt.Sprintf(\"Seven\"))\n    arr2 := append(arr2, fmt.Sprintf(\"\
    Eight\"))\n    arr2 := append(arr2, fmt.Sprintf(\"Nine\"))\n\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr[i]\
    \ = arr2[i]\n        }\n    }\n\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl4wy4nln_test.go:20:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:21:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:22:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:23:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:24:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:25:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:26:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:27:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:28:10: no new variables on left side of :=

    /tmp/tmpl4wy4nln_test.go:32:22: cannot use arr2[i] (variable of type string) as
    type int in assignment

    /tmp/tmpl4wy4nln_test.go:32:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] =\
    \ by_length_test.Reverse[result[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78tkuf32_test.go:18:37: undefined: by_length_test

    /tmp/tmp78tkuf32_test.go:20:37: undefined: by_length_test

    /tmp/tmp78tkuf32_test.go:24:21: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        arr2[i] = by_length_test.One[arr[i]]\n    }\n    for i := range\
    \ arr2 {\n        arr2[i] = by_length_test.Two[arr2[i]]\n    }\n    for i := range\
    \ arr2 {\n        arr2[i] = by_length_test.Three[arr2[i]]\n    }\n    for i :=\
    \ range arr2 {\n        arr2[i] = by_length_test.Four[arr2[i]]\n    }\n    for\
    \ i := range arr2 {\n        arr2[i] = by_length_test.Five[arr2[i]]\n    }\n \
    \   for i := range arr2 {\n        arr2[i] = by_length_test.Six[arr2[i]]\n   \
    \ }\n    for i := range arr2 {\n        arr2[i] = by_length_test.Seven[arr2[i]]\n\
    \    }\n    for i := range arr2 {\n        arr2[i] = by_length_test.Eight[arr2[i]]\n\
    \    }\n    for i := range arr2 {\n        arr2[i] = by_length_test.Nine[arr2[i]]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpitjs9z_test.go:17:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:20:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:23:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:26:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:29:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:32:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:35:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:38:19: undefined: by_length_test

    /tmp/tmpqpitjs9z_test.go:41:19: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075394
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        } else {\n            result = append(result, \"\")\n     \
    \   }\n    }\n    for _, v := range result {\n        if v != \"\" {\n       \
    \     reverse(result[:])\n        }\n    }\n    for _, v := range result {\n \
    \       if v != \"\" {\n            replace(result[:], v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpid30w_24_test.go:25:13: undefined: reverse

    /tmp/tmpid30w_24_test.go:30:13: undefined: replace

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        digit,\
    \ ok := reverseDigit(num)\n        if !ok {\n            continue\n        }\n\
    \        result = append(result, name[digit])\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1shrhvsr_test.go:20:22: undefined: reverseDigit

    /tmp/tmp1shrhvsr_test.go:24:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.One[v-1])\n        result = append(result, by_length_test.Two[v-1])\n\
    \        result = append(result, by_length_test.Three[v-1])\n        result =\
    \ append(result, by_length_test.Four[v-1])\n        result = append(result, by_length_test.Five[v-1])\n\
    \        result = append(result, by_length_test.Six[v-1])\n        result = append(result,\
    \ by_length_test.Seven[v-1])\n        result = append(result, by_length_test.Eight[v-1])\n\
    \        result = append(result, by_length_test.Nine[v-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps0o1tpgd_test.go:20:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:21:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:22:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:23:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:24:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:25:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:26:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:27:33: undefined: by_length_test

    /tmp/tmps0o1tpgd_test.go:28:33: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075390
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := arr[:9]\n    for i := 0; i\
    \ < len(arr); i++ {\n        if arr[i] < 10 {\n            arr[i] = \"One\"\n\
    \        } else if arr[i] < 20 {\n            arr[i] = \"Two\"\n        } else\
    \ if arr[i] < 30 {\n            arr[i] = \"Three\"\n        } else if arr[i] <\
    \ 40 {\n            arr[i] = \"Four\"\n        } else if arr[i] < 50 {\n     \
    \       arr[i] = \"Five\"\n        } else if arr[i] < 60 {\n            arr[i]\
    \ = \"Six\"\n        } else if arr[i] < 70 {\n            arr[i] = \"Seven\"\n\
    \        } else if arr[i] < 80 {\n            arr[i] = \"Eight\"\n        } else\
    \ if arr[i] < 90 {\n            arr[i] = \"Nine\"\n        }\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwv0y6n_w_test.go:15:5: undefined: sort

    /tmp/tmpwv0y6n_w_test.go:16:9: no new variables on left side of :=

    /tmp/tmpwv0y6n_w_test.go:19:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:21:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:23:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:25:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:27:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:29:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:31:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:33:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpwv0y6n_w_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result :=\
    \ append(result, by_length_test.One[v-1])\n        result := append(result, by_length_test.Two[v-1])\n\
    \        result := append(result, by_length_test.Three[v-1])\n        result :=\
    \ append(result, by_length_test.Four[v-1])\n        result := append(result, by_length_test.Five[v-1])\n\
    \        result := append(result, by_length_test.Six[v-1])\n        result :=\
    \ append(result, by_length_test.Seven[v-1])\n        result := append(result,\
    \ by_length_test.Eight[v-1])\n        result := append(result, by_length_test.Nine[v-1])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gh59izv_test.go:20:34: undefined: by_length_test

    /tmp/tmp8gh59izv_test.go:21:16: no new variables on left side of :=

    /tmp/tmp8gh59izv_test.go:21:34: undefined: by_length_test

    /tmp/tmp8gh59izv_test.go:22:16: no new variables on left side of :=

    /tmp/tmp8gh59izv_test.go:22:34: undefined: by_length_test

    /tmp/tmp8gh59izv_test.go:23:16: no new variables on left side of :=

    /tmp/tmp8gh59izv_test.go:23:34: undefined: by_length_test

    /tmp/tmp8gh59izv_test.go:24:16: no new variables on left side of :=

    /tmp/tmp8gh59izv_test.go:24:34: undefined: by_length_test

    /tmp/tmp8gh59izv_test.go:25:34: undefined: by_length_test

    /tmp/tmp8gh59izv_test.go:25:34: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var length int\n    for _, v\
    \ := range arr {\n        if v < 1 || v > 9 {\n            continue\n        }\n\
    \        length = length - 1\n        if length == 0 {\n            break\n  \
    \      }\n        result = append(result, fmt.Sprintf(\"%v\", v))\n    }\n   \
    \ for i := 0; i < length; i++ {\n        result = append(result, \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \  }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpp9beig1j_test.go:50: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpp9beig1j_test.go:50: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpp9beig1j_test.go:50: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpp9beig1j_test.go:50: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(by_length_test.ByLength(arr2))\n    reverse(arr2)\n    for\
    \ i := range arr2 {\n        arr2[i] = by_length_test.Name[arr2[i]]\n    }\n \
    \   return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptrirbed7_test.go:22:5: undefined: sort

    /tmp/tmptrirbed7_test.go:22:15: undefined: by_length_test

    /tmp/tmptrirbed7_test.go:23:5: undefined: reverse

    /tmp/tmptrirbed7_test.go:25:19: undefined: by_length_test

    /tmp/tmptrirbed7_test.go:27:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, i := range arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", i))\n        }\n    }\n    for _, i := range result {\n        if i == \"\
    One\" {\n            result[0] = \"1\"\n        } else if i == \"Two\" {\n   \
    \         result[1] = \"2\"\n        } else if i == \"Three\" {\n            result[2]\
    \ = \"3\"\n        } else if i == \"Four\" {\n            result[3] = \"4\"\n\
    \        } else if i == \"Five\" {\n            result[4] = \"5\"\n        } else\
    \ if i == \"Six\" {\n            result[5] = \"6\"\n        } else if i == \"\
    Seven\" {\n            result[6] = \"7\"\n        } else if i == \"Eight\" {\n\
    \            result[7] = \"8\"\n        } else if i == \"Nine\" {\n          \
    \  result[8] = \"9\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp0h2zsh6__test.go:62: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp0h2zsh6__test.go:62: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp0h2zsh6__test.go:62: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp0h2zsh6__test.go:62: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%v\", v))\n    }\n    for _, v := range result\
    \ {\n        if v == \"0\" || v == \"1\" {\n            continue\n        }\n\
    \        result = append(result, \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\")[v]\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3kqqvza_test.go:26:18: cannot use append(result, "One", "Two", "Three",
    "Four", "Five", "Six", "Seven", "Eight", "Nine")[v] (variable of type string)
    as type []string in assignment

    /tmp/tmpz3kqqvza_test.go:26:105: invalid argument: index v (variable of type string)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:9])\n    sort.Ints(arr[9:])\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}[num-1]\n        for _, c\
    \ := range result {\n            arr[len(arr)-1] = arr[len(arr)-1] - c\n     \
    \   }\n    }\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n\
    \            continue\n        }\n        result := []string{\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}[num-1]\n\
    \        for _, c := range result {\n            arr[len(arr)-1] = arr[len(arr)-1]\
    \ + c\n        }\n    }\n    for _, num := range arr {\n        if num < 1 ||\
    \ num > 9 {\n            continue\n        }\n        result := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }[num-1]\n        for _, c := range result {\n            arr[len(arr)-1] = arr[len(arr)-1]\
    \ * 10 + c\n        }\n    }\n    for _, num := range arr {\n        if num <\
    \ 1 || num > 9 {\n            continue\n        }\n        result := []string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}[num-1]\n        for _, c := range result {\n            arr[len(arr)-1]\
    \ = arr[len(arr)-1] / 10 + c\n        }\n    }\n    for _, num := range arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result\
    \ := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}[num-1]\n        for _, c := range result {\n          \
    \  arr[len(arr)-1] = arr[len(arr)-1] % 10 + c\n        }\n    }\n    for _, num\
    \ := range arr {\n        if num < 1 || num > 9 {\n            continue\n    \
    \    }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}[num-1]\n        for _, c := range result\
    \ {\n            arr[len(arr)-1] = arr[len(arr)-1] / 100 + c\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp98n288_n_test.go:75:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := map[int]string{1: \"\
    One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"}\n    arr := []string{}\n    for _, v := range arr\
    \ {\n        arr = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj_s51ili_test.go:18:5:\
    \ undefined: sort\n/tmp/tmpj_s51ili_test.go:19:9: no new variables on left side\
    \ of :=\n/tmp/tmpj_s51ili_test.go:19:12: undefined: reverse\n/tmp/tmpj_s51ili_test.go:20:9:\
    \ no new variables on left side of :=\n/tmp/tmpj_s51ili_test.go:20:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmpj_s51ili_test.go:21:9: no new variables on left side of :=\n/tmp/tmpj_s51ili_test.go:21:12:\
    \ cannot use []string{} (value of type []string) as type []int in assignment\n\
    /tmp/tmpj_s51ili_test.go:25:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := map[int]string{\n   \
    \     1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    arr := map[int]string{\n      \
    \  1: \"One\",\n        2: \"Two\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfgx6m8ic_test.go:99:12: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    sort.Ints(arr)\n    for i := 0; i < len(arr); i++\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n\
    \        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[i-1])\n\
    \        result := append(result, result[i])\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[i-1])\n\
    \        result := append(result, result[i])\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[i-1])\n\
    \        result := append(result, result[i])\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[i-1])\n\
    \        result := append(result, result[i])\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[i-1])\n\
    \        result := append(result, result[i])\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result := append(result, result[i-1])\n\
    \        result := append(result, result[i])\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0_0pfgic_test.go:72:74: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    max := 9\n    for _, num := range arr {\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for _, num := range\
    \ arr {\n        if num < 1 {\n            continue\n        }\n        if num\
    \ > max {\n            continue\n        }\n        if num == 1 {\n          \
    \  result = append(result, \"One\")\n            continue\n        }\n       \
    \ if num == 2 {\n            result = append(result, \"Two\")\n            continue\n\
    \        }\n        if num == 3 {\n            result = append(result, \"Three\"\
    )\n            continue\n        }\n        if num == 4 {\n            result\
    \ = append(result, \"Four\")\n            continue\n        }\n        if num\
    \ == 5 {\n            result = append(result, \"Five\")\n            continue\n\
    \        }\n        if num == 6 {\n            result = append(result, \"Six\"\
    )\n            continue\n        }\n        if num == 7 {\n            result\
    \ = append(result, \"Seven\")\n            continue\n        }\n        if num\
    \ == 8 {\n            result = append(result, \"Eight\")\n            continue\n\
    \        }\n        if num == 9 {\n            result = append(result, \"Nine\"\
    )\n            continue\n        }\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 {\n            continue\n        }\n        if num > max {\n\
    \            continue\n        }\n        if num == 1 {\n            result =\
    \ append(result, \"One\")\n            continue\n        }\n        if num ==\
    \ 2 {\n            result = append(result, \"Two\")\n            continue\n  \
    \      }\n        if num == 3 {\n            result = append(result, \"Three\"\
    )\n            continue\n        }\n        if num == 4 {\n            result\
    \ = append(result, \"Four\")\n            continue\n        }\n        if num\
    \ == 5 {\n            result = append(result, \"Five\")\n            continue\n\
    \        }\n        if num == 6 {\n            result = append(result, \"Six\"\
    )\n            continue\n        }\n        if num == 7 {\n            result\
    \ = append(result, \"Seven\")\n            continue\n        }\n        if num\
    \ == 8 {\n            result = append(result, \"Eight\")\n            continue\n\
    \        }\n        if num == 9 {\n            result = append(result, \"Nine\"\
    )\n            continue\n        }\n    }\n    for _, num := range arr {\n   \
    \     if num < 1 {\n            continue\n        }\n        if num > max {\n\
    \            continue\n        }\n        if num == 1 {\n            result =\
    \ append(result, \"One\")\n            continue\n        }\n        if num ==\
    \ 2 {\n            result = append(result, \"Two\")\n            continue\n  \
    \      }\n        if num == 3 {\n            result = append(result, \"Three\"\
    )\n            continue\n        }\n        if num == 4 {\n            result\
    \ = append(result, \"Four\")\n            continue\n        }\n        if num\
    \ == 5 {\n            result = append(result, \"Five\")\n            continue\n\
    \        }\n        if num == 6 {\n            result = append(\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1j5app67_test.go:142:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, by_length_test.by_length_result[v-1])\n    }\n    for _, v :=\
    \ range result {\n        result = append(result, by_length_test.by_length_result[v])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq9x98_el_test.go:20:33: undefined: by_length_test

    /tmp/tmpq9x98_el_test.go:23:33: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result := append(result, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )[num-1]\n        } else {\n            continue\n        }\n    }\n    for _,\
    \ num := range result {\n        result = append(result, num)\n    }\n    for\
    \ _, num := range result {\n        result = append(result, \"Zero\")\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3564zosr_test.go:18:13: result declared but not used

    /tmp/tmp3564zosr_test.go:26:12: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr := arr[:0]\n    for _, v := range arr {\n       \
    \ if v >= 1 && v <= 9 {\n            arr = append(arr, v)\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(arr))\n    arr := arr[:0]\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            arr = append(arr, map[int]string{v:\
    \ \"One\"}[v-1])\n        }\n    }\n    for _, v := range arr {\n        if v\
    \ >= 1 && v <= 9 {\n            arr = append(arr, map[int]string{v: \"Two\"}[v-1])\n\
    \        }\n    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            arr = append(arr, map[int]string{v: \"Three\"}[v-1])\n        }\n\
    \    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n         \
    \   arr = append(arr, map[int]string{v: \"Four\"}[v-1])\n        }\n    }\n  \
    \  for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            arr = append(arr,\
    \ map[int]string{v: \"Five\"}[v-1])\n        }\n    }\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            arr = append(arr, map[int]string{v:\
    \ \"Six\"}[v-1])\n        }\n    }\n    for _, v := range arr {\n        if v\
    \ >= 1 && v <= 9 {\n            arr = append(arr, map[int]string{v: \"Seven\"\
    }[v-1])\n        }\n    }\n    for _, v := range arr {\n        if v >= 1 && v\
    \ <= 9 {\n            arr = append(arr, map[int]string{v: \"Eight\"}[v-1])\n \
    \       }\n    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            arr = append(arr, map[int]string{v: \"Nine\"}[v-1])\n        }\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjswt_n5c_test.go:15:9:\
    \ no new variables on left side of :=\n/tmp/tmpjswt_n5c_test.go:21:5: undefined:\
    \ sort\n/tmp/tmpjswt_n5c_test.go:22:9: no new variables on left side of :=\n/tmp/tmpjswt_n5c_test.go:25:31:\
    \ cannot use map[int]string{\u2026}[v - 1] (map index expression of type string)\
    \ as type int in argument to append\n/tmp/tmpjswt_n5c_test.go:30:31: cannot use\
    \ map[int]string{\u2026}[v - 1] (map index expression of type string) as type\
    \ int in argument to append\n/tmp/tmpjswt_n5c_test.go:35:31: cannot use map[int]string{\u2026\
    }[v - 1] (map index expression of type string) as type int in argument to append\n\
    /tmp/tmpjswt_n5c_test.go:40:31: cannot use map[int]string{\u2026}[v - 1] (map\
    \ index expression of type string) as type int in argument to append\n/tmp/tmpjswt_n5c_test.go:45:31:\
    \ cannot use map[int]string{\u2026}[v - 1] (map index expression of type string)\
    \ as type int in argument to append\n/tmp/tmpjswt_n5c_test.go:50:31: cannot use\
    \ map[int]string{\u2026}[v - 1] (map index expression of type string) as type\
    \ int in argument to append\n/tmp/tmpjswt_n5c_test.go:55:31: cannot use map[int]string{\u2026\
    }[v - 1] (map index expression of type string) as type int in argument to append\n\
    /tmp/tmpjswt_n5c_test.go:55:31: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = i\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    arr := make([]string, len(arr))\n    for i := range arr {\n        arr[i]\
    \ = \"One\"\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n        }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp635hk21a_test.go:15:9: no new variables on left side of :=

    /tmp/tmp635hk21a_test.go:19:5: undefined: sort

    /tmp/tmp635hk21a_test.go:20:9: no new variables on left side of :=

    /tmp/tmp635hk21a_test.go:20:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmp635hk21a_test.go:22:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp635hk21a_test.go:24:22: cannot use fmt.Sprintf("%v", arr[i]) (value of
    type string) as type int in assignment

    /tmp/tmp635hk21a_test.go:27:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := map[int]string{1: \"One\", 2: \"Two\", 3:\
    \ \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"}\n    arr := []string{}\n    for _, v := range arr {\n        arr\
    \ = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaa211b4o_test.go:18:5:\
    \ undefined: sort\n/tmp/tmpaa211b4o_test.go:19:9: no new variables on left side\
    \ of :=\n/tmp/tmpaa211b4o_test.go:19:12: undefined: reverse\n/tmp/tmpaa211b4o_test.go:20:9:\
    \ no new variables on left side of :=\n/tmp/tmpaa211b4o_test.go:20:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmpaa211b4o_test.go:21:9: no new variables on left side of :=\n/tmp/tmpaa211b4o_test.go:21:12:\
    \ cannot use []string{} (value of type []string) as type []int in assignment\n\
    /tmp/tmpaa211b4o_test.go:25:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, num := range arr {\n\
    \        if num >= 1 && num <= 9 {\n            result = append(result, by_length_test.One[num-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[num-1])\n\
    \        }\n    }\n    for _, num := range result {\n        result = append(result,\
    \ by_length_test.Reverse[num-1])\n    }\n    for _, num := range result {\n  \
    \      result = append(result, by_length_test.Digit[num-1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8859q7ve_test.go:18:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:20:37: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:24:56: invalid operation: num - 1 (mismatched types string
    and untyped int)

    /tmp/tmp8859q7ve_test.go:27:33: undefined: by_length_test

    /tmp/tmp8859q7ve_test.go:27:54: invalid operation: num - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075391
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, by_length_test.One[v-1])\n\
    \        } else {\n            result = append(result, by_length_test.Other[v-1])\n\
    \        }\n    }\n    for _, v := range result {\n        result = append(result,\
    \ by_length_test.Reverse[v-1])\n    }\n    for _, v := range result {\n      \
    \  result = append(result, by_length_test.Replace[v-1])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetrsgx33_test.go:18:37: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:20:37: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:24:33: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:24:56: invalid operation: v - 1 (mismatched types string
    and untyped int)

    /tmp/tmpetrsgx33_test.go:27:33: undefined: by_length_test

    /tmp/tmpetrsgx33_test.go:27:56: invalid operation: v - 1 (mismatched types string
    and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075388
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, v := range arr {\n \
    \       if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"?\")\n    \
    \    }\n    }\n    for _, v := range result {\n        if v == \"?\" {\n     \
    \       result = append(result, \"?\")\n        }\n    }\n    for _, v := range\
    \ result {\n        if v == \"?\" {\n            result = append(result, \"?\"\
    )\n        }\n    }\n    for _, v := range result {\n        if v == \"?\" {\n\
    \            result = append(result, \"?\")\n        }\n    }\n    for _, v :=\
    \ range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n            result = append(result, \"?\")\n        }\n    }\n    for _,\
    \ v := range result {\n        if v == \"?\" {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    for _, v := range result {\n        if v == \"\
    ?\" {\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc7c1lxy__test.go:116:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075395
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr[i] = \"One\"\
    \n            arr[i] = \"Two\"\n            arr[i] = \"Three\"\n            arr[i]\
    \ = \"Four\"\n            arr[i] = \"Five\"\n            arr[i] = \"Six\"\n  \
    \          arr[i] = \"Seven\"\n            arr[i] = \"Eight\"\n            arr[i]\
    \ = \"Nine\"\n        }\n    }\n    for i := range arr {\n        result[i] =\
    \ fmt.Sprintf(\"%v\", arr[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m5d6jrl_test.go:18:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:19:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:20:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:21:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:22:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:23:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:24:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:25:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmp8m5d6jrl_test.go:26:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075395
