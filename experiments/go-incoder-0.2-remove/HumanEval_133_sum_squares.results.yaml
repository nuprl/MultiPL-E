language: go_test.go
name: HumanEval_133_sum_squares
results:
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum = 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2kndt2t_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmpt2kndt2t_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26zfaug3_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ogbaevu_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppy76oqld_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26zfaug3_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26zfaug3_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum = 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphy5orkoq_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmphy5orkoq_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_a13xqd_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp3_a13xqd_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb0qwp0d_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26zfaug3_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj6n7f7j_test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6f40n8__test.go:15:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g05mzyf_test.go:15:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmp6g05mzyf_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
